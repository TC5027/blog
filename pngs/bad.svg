<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="806" onload="init(evt)" viewBox="0 0 1200 806" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="806" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="789.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="789.00"> </text><svg id="frames" x="10" width="1180" total_samples="762"><g><title>perf (5 samples, 0.66%)</title><rect x="0.0000%" y="741" width="0.6562%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="5"/><text x="0.2500%" y="751.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 0.66%)</title><rect x="0.0000%" y="725" width="0.6562%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="5"/><text x="0.2500%" y="735.50"></text></g><g><title>do_syscall_64 (5 samples, 0.66%)</title><rect x="0.0000%" y="709" width="0.6562%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="5"/><text x="0.2500%" y="719.50"></text></g><g><title>__x64_sys_execve (5 samples, 0.66%)</title><rect x="0.0000%" y="693" width="0.6562%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="5"/><text x="0.2500%" y="703.50"></text></g><g><title>__do_execve_file.isra.0 (5 samples, 0.66%)</title><rect x="0.0000%" y="677" width="0.6562%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="5"/><text x="0.2500%" y="687.50"></text></g><g><title>search_binary_handler (5 samples, 0.66%)</title><rect x="0.0000%" y="661" width="0.6562%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="5"/><text x="0.2500%" y="671.50"></text></g><g><title>load_elf_binary (5 samples, 0.66%)</title><rect x="0.0000%" y="645" width="0.6562%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="5"/><text x="0.2500%" y="655.50"></text></g><g><title>setup_new_exec (5 samples, 0.66%)</title><rect x="0.0000%" y="629" width="0.6562%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="5"/><text x="0.2500%" y="639.50"></text></g><g><title>perf_event_exec (5 samples, 0.66%)</title><rect x="0.0000%" y="613" width="0.6562%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="5"/><text x="0.2500%" y="623.50"></text></g><g><title>ctx_resched (5 samples, 0.66%)</title><rect x="0.0000%" y="597" width="0.6562%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="5"/><text x="0.2500%" y="607.50"></text></g><g><title>perf_pmu_enable.part.0 (5 samples, 0.66%)</title><rect x="0.0000%" y="581" width="0.6562%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="5"/><text x="0.2500%" y="591.50"></text></g><g><title>x86_pmu_enable (5 samples, 0.66%)</title><rect x="0.0000%" y="565" width="0.6562%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="5"/><text x="0.2500%" y="575.50"></text></g><g><title>intel_pmu_enable_all (5 samples, 0.66%)</title><rect x="0.0000%" y="549" width="0.6562%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="5"/><text x="0.2500%" y="559.50"></text></g><g><title>native_write_msr (5 samples, 0.66%)</title><rect x="0.0000%" y="533" width="0.6562%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="5"/><text x="0.2500%" y="543.50"></text></g><g><title>__GI___libc_free (2 samples, 0.26%)</title><rect x="0.6562%" y="341" width="0.2625%" height="15" fill="rgb(217,207,13)" fg:x="5" fg:w="2"/><text x="0.9062%" y="351.50"></text></g><g><title>flush_tlb_mm_range (1 samples, 0.13%)</title><rect x="0.9186%" y="197" width="0.1312%" height="15" fill="rgb(231,73,38)" fg:x="7" fg:w="1"/><text x="1.1686%" y="207.50"></text></g><g><title>flush_tlb_func_common.constprop.0 (1 samples, 0.13%)</title><rect x="0.9186%" y="181" width="0.1312%" height="15" fill="rgb(225,20,46)" fg:x="7" fg:w="1"/><text x="1.1686%" y="191.50"></text></g><g><title>native_flush_tlb (1 samples, 0.13%)</title><rect x="0.9186%" y="165" width="0.1312%" height="15" fill="rgb(210,31,41)" fg:x="7" fg:w="1"/><text x="1.1686%" y="175.50"></text></g><g><title>__mod_lruvec_state (2 samples, 0.26%)</title><rect x="2.0997%" y="165" width="0.2625%" height="15" fill="rgb(221,200,47)" fg:x="16" fg:w="2"/><text x="2.3497%" y="175.50"></text></g><g><title>__mod_node_page_state (1 samples, 0.13%)</title><rect x="2.2310%" y="149" width="0.1312%" height="15" fill="rgb(226,26,5)" fg:x="17" fg:w="1"/><text x="2.4810%" y="159.50"></text></g><g><title>__mod_node_page_state (2 samples, 0.26%)</title><rect x="2.3622%" y="165" width="0.2625%" height="15" fill="rgb(249,33,26)" fg:x="18" fg:w="2"/><text x="2.6122%" y="175.50"></text></g><g><title>__mod_zone_page_state (1 samples, 0.13%)</title><rect x="2.6247%" y="165" width="0.1312%" height="15" fill="rgb(235,183,28)" fg:x="20" fg:w="1"/><text x="2.8747%" y="175.50"></text></g><g><title>_raw_spin_lock_irqsave (1 samples, 0.13%)</title><rect x="2.7559%" y="165" width="0.1312%" height="15" fill="rgb(221,5,38)" fg:x="21" fg:w="1"/><text x="3.0059%" y="175.50"></text></g><g><title>free_pcp_prepare (2 samples, 0.26%)</title><rect x="2.8871%" y="165" width="0.2625%" height="15" fill="rgb(247,18,42)" fg:x="22" fg:w="2"/><text x="3.1371%" y="175.50"></text></g><g><title>free_pcp_prepare (1 samples, 0.13%)</title><rect x="3.4121%" y="149" width="0.1312%" height="15" fill="rgb(241,131,45)" fg:x="26" fg:w="1"/><text x="3.6621%" y="159.50"></text></g><g><title>free_unref_page_commit (9 samples, 1.18%)</title><rect x="3.5433%" y="149" width="1.1811%" height="15" fill="rgb(249,31,29)" fg:x="27" fg:w="9"/><text x="3.7933%" y="159.50"></text></g><g><title>free_pcppages_bulk (9 samples, 1.18%)</title><rect x="3.5433%" y="133" width="1.1811%" height="15" fill="rgb(225,111,53)" fg:x="27" fg:w="9"/><text x="3.7933%" y="143.50"></text></g><g><title>__mod_zone_page_state (1 samples, 0.13%)</title><rect x="4.5932%" y="117" width="0.1312%" height="15" fill="rgb(238,160,17)" fg:x="35" fg:w="1"/><text x="4.8432%" y="127.50"></text></g><g><title>free_unref_page_list (13 samples, 1.71%)</title><rect x="3.1496%" y="165" width="1.7060%" height="15" fill="rgb(214,148,48)" fg:x="24" fg:w="13"/><text x="3.3996%" y="175.50"></text></g><g><title>free_unref_page_prepare.part.0 (1 samples, 0.13%)</title><rect x="4.7244%" y="149" width="0.1312%" height="15" fill="rgb(232,36,49)" fg:x="36" fg:w="1"/><text x="4.9744%" y="159.50"></text></g><g><title>mem_cgroup_page_lruvec (1 samples, 0.13%)</title><rect x="4.8556%" y="165" width="0.1312%" height="15" fill="rgb(209,103,24)" fg:x="37" fg:w="1"/><text x="5.1056%" y="175.50"></text></g><g><title>mem_cgroup_uncharge_list (1 samples, 0.13%)</title><rect x="4.9869%" y="165" width="0.1312%" height="15" fill="rgb(229,88,8)" fg:x="38" fg:w="1"/><text x="5.2369%" y="175.50"></text></g><g><title>uncharge_page (1 samples, 0.13%)</title><rect x="4.9869%" y="149" width="0.1312%" height="15" fill="rgb(213,181,19)" fg:x="38" fg:w="1"/><text x="5.2369%" y="159.50"></text></g><g><title>tlb_finish_mmu (33 samples, 4.33%)</title><rect x="0.9186%" y="229" width="4.3307%" height="15" fill="rgb(254,191,54)" fg:x="7" fg:w="33"/><text x="1.1686%" y="239.50">tlb_f..</text></g><g><title>tlb_flush_mmu (33 samples, 4.33%)</title><rect x="0.9186%" y="213" width="4.3307%" height="15" fill="rgb(241,83,37)" fg:x="7" fg:w="33"/><text x="1.1686%" y="223.50">tlb_f..</text></g><g><title>free_pages_and_swap_cache (32 samples, 4.20%)</title><rect x="1.0499%" y="197" width="4.1995%" height="15" fill="rgb(233,36,39)" fg:x="8" fg:w="32"/><text x="1.2999%" y="207.50">free_..</text></g><g><title>release_pages (31 samples, 4.07%)</title><rect x="1.1811%" y="181" width="4.0682%" height="15" fill="rgb(226,3,54)" fg:x="9" fg:w="31"/><text x="1.4311%" y="191.50">rele..</text></g><g><title>mem_cgroup_update_lru_size (1 samples, 0.13%)</title><rect x="5.1181%" y="165" width="0.1312%" height="15" fill="rgb(245,192,40)" fg:x="39" fg:w="1"/><text x="5.3681%" y="175.50"></text></g><g><title>page_remove_rmap (1 samples, 0.13%)</title><rect x="5.2493%" y="181" width="0.1312%" height="15" fill="rgb(238,167,29)" fg:x="40" fg:w="1"/><text x="5.4993%" y="191.50"></text></g><g><title>__tlb_remove_page_size (2 samples, 0.26%)</title><rect x="6.0367%" y="165" width="0.2625%" height="15" fill="rgb(232,182,51)" fg:x="46" fg:w="2"/><text x="6.2867%" y="175.50"></text></g><g><title>page_remove_rmap (2 samples, 0.26%)</title><rect x="6.2992%" y="165" width="0.2625%" height="15" fill="rgb(231,60,39)" fg:x="48" fg:w="2"/><text x="6.5492%" y="175.50"></text></g><g><title>__GI_munmap (45 samples, 5.91%)</title><rect x="0.9186%" y="341" width="5.9055%" height="15" fill="rgb(208,69,12)" fg:x="7" fg:w="45"/><text x="1.1686%" y="351.50">__GI_mun..</text></g><g><title>entry_SYSCALL_64_after_hwframe (45 samples, 5.91%)</title><rect x="0.9186%" y="325" width="5.9055%" height="15" fill="rgb(235,93,37)" fg:x="7" fg:w="45"/><text x="1.1686%" y="335.50">entry_SY..</text></g><g><title>do_syscall_64 (45 samples, 5.91%)</title><rect x="0.9186%" y="309" width="5.9055%" height="15" fill="rgb(213,116,39)" fg:x="7" fg:w="45"/><text x="1.1686%" y="319.50">do_sysca..</text></g><g><title>__x64_sys_munmap (45 samples, 5.91%)</title><rect x="0.9186%" y="293" width="5.9055%" height="15" fill="rgb(222,207,29)" fg:x="7" fg:w="45"/><text x="1.1686%" y="303.50">__x64_sy..</text></g><g><title>__vm_munmap (45 samples, 5.91%)</title><rect x="0.9186%" y="277" width="5.9055%" height="15" fill="rgb(206,96,30)" fg:x="7" fg:w="45"/><text x="1.1686%" y="287.50">__vm_mun..</text></g><g><title>__do_munmap (45 samples, 5.91%)</title><rect x="0.9186%" y="261" width="5.9055%" height="15" fill="rgb(218,138,4)" fg:x="7" fg:w="45"/><text x="1.1686%" y="271.50">__do_mun..</text></g><g><title>unmap_region (45 samples, 5.91%)</title><rect x="0.9186%" y="245" width="5.9055%" height="15" fill="rgb(250,191,14)" fg:x="7" fg:w="45"/><text x="1.1686%" y="255.50">unmap_re..</text></g><g><title>unmap_vmas (12 samples, 1.57%)</title><rect x="5.2493%" y="229" width="1.5748%" height="15" fill="rgb(239,60,40)" fg:x="40" fg:w="12"/><text x="5.4993%" y="239.50"></text></g><g><title>unmap_single_vma (12 samples, 1.57%)</title><rect x="5.2493%" y="213" width="1.5748%" height="15" fill="rgb(206,27,48)" fg:x="40" fg:w="12"/><text x="5.4993%" y="223.50"></text></g><g><title>unmap_page_range (12 samples, 1.57%)</title><rect x="5.2493%" y="197" width="1.5748%" height="15" fill="rgb(225,35,8)" fg:x="40" fg:w="12"/><text x="5.4993%" y="207.50"></text></g><g><title>zap_pte_range.isra.0 (11 samples, 1.44%)</title><rect x="5.3806%" y="181" width="1.4436%" height="15" fill="rgb(250,213,24)" fg:x="41" fg:w="11"/><text x="5.6306%" y="191.50"></text></g><g><title>vm_normal_page (2 samples, 0.26%)</title><rect x="6.5617%" y="165" width="0.2625%" height="15" fill="rgb(247,123,22)" fg:x="50" fg:w="2"/><text x="6.8117%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (48 samples, 6.30%)</title><rect x="0.6562%" y="469" width="6.2992%" height="15" fill="rgb(231,138,38)" fg:x="5" fg:w="48"/><text x="0.9062%" y="479.50">core::pt..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (48 samples, 6.30%)</title><rect x="0.6562%" y="453" width="6.2992%" height="15" fill="rgb(231,145,46)" fg:x="5" fg:w="48"/><text x="0.9062%" y="463.50">&lt;alloc::..</text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;u8&gt;]&gt; (48 samples, 6.30%)</title><rect x="0.6562%" y="437" width="6.2992%" height="15" fill="rgb(251,118,11)" fg:x="5" fg:w="48"/><text x="0.9062%" y="447.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (48 samples, 6.30%)</title><rect x="0.6562%" y="421" width="6.2992%" height="15" fill="rgb(217,147,25)" fg:x="5" fg:w="48"/><text x="0.9062%" y="431.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (48 samples, 6.30%)</title><rect x="0.6562%" y="405" width="6.2992%" height="15" fill="rgb(247,81,37)" fg:x="5" fg:w="48"/><text x="0.9062%" y="415.50">core::pt..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (48 samples, 6.30%)</title><rect x="0.6562%" y="389" width="6.2992%" height="15" fill="rgb(209,12,38)" fg:x="5" fg:w="48"/><text x="0.9062%" y="399.50">&lt;alloc::..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (48 samples, 6.30%)</title><rect x="0.6562%" y="373" width="6.2992%" height="15" fill="rgb(227,1,9)" fg:x="5" fg:w="48"/><text x="0.9062%" y="383.50">&lt;alloc::..</text></g><g><title>alloc::alloc::dealloc (48 samples, 6.30%)</title><rect x="0.6562%" y="357" width="6.2992%" height="15" fill="rgb(248,47,43)" fg:x="5" fg:w="48"/><text x="0.9062%" y="367.50">alloc::a..</text></g><g><title>_int_free (1 samples, 0.13%)</title><rect x="6.8241%" y="341" width="0.1312%" height="15" fill="rgb(221,10,30)" fg:x="52" fg:w="1"/><text x="7.0741%" y="351.50"></text></g><g><title>__x64_sys_brk (1 samples, 0.13%)</title><rect x="7.0866%" y="213" width="0.1312%" height="15" fill="rgb(210,229,1)" fg:x="54" fg:w="1"/><text x="7.3366%" y="223.50"></text></g><g><title>__GI___default_morecore (3 samples, 0.39%)</title><rect x="6.9554%" y="293" width="0.3937%" height="15" fill="rgb(222,148,37)" fg:x="53" fg:w="3"/><text x="7.2054%" y="303.50"></text></g><g><title>__GI___sbrk (3 samples, 0.39%)</title><rect x="6.9554%" y="277" width="0.3937%" height="15" fill="rgb(234,67,33)" fg:x="53" fg:w="3"/><text x="7.2054%" y="287.50"></text></g><g><title>__GI___sbrk (3 samples, 0.39%)</title><rect x="6.9554%" y="261" width="0.3937%" height="15" fill="rgb(247,98,35)" fg:x="53" fg:w="3"/><text x="7.2054%" y="271.50"></text></g><g><title>__brk (3 samples, 0.39%)</title><rect x="6.9554%" y="245" width="0.3937%" height="15" fill="rgb(247,138,52)" fg:x="53" fg:w="3"/><text x="7.2054%" y="255.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (2 samples, 0.26%)</title><rect x="7.0866%" y="229" width="0.2625%" height="15" fill="rgb(213,79,30)" fg:x="54" fg:w="2"/><text x="7.3366%" y="239.50"></text></g><g><title>do_syscall_64 (1 samples, 0.13%)</title><rect x="7.2178%" y="213" width="0.1312%" height="15" fill="rgb(246,177,23)" fg:x="55" fg:w="1"/><text x="7.4678%" y="223.50"></text></g><g><title>__x64_sys_brk (1 samples, 0.13%)</title><rect x="7.2178%" y="197" width="0.1312%" height="15" fill="rgb(230,62,27)" fg:x="55" fg:w="1"/><text x="7.4678%" y="207.50"></text></g><g><title>do_brk_flags (1 samples, 0.13%)</title><rect x="7.2178%" y="181" width="0.1312%" height="15" fill="rgb(216,154,8)" fg:x="55" fg:w="1"/><text x="7.4678%" y="191.50"></text></g><g><title>security_vm_enough_memory_mm (1 samples, 0.13%)</title><rect x="7.2178%" y="165" width="0.1312%" height="15" fill="rgb(244,35,45)" fg:x="55" fg:w="1"/><text x="7.4678%" y="175.50"></text></g><g><title>__x64_sys_mmap (1 samples, 0.13%)</title><rect x="7.3491%" y="245" width="0.1312%" height="15" fill="rgb(251,115,12)" fg:x="56" fg:w="1"/><text x="7.5991%" y="255.50"></text></g><g><title>apparmor_mmap_file (1 samples, 0.13%)</title><rect x="7.6115%" y="181" width="0.1312%" height="15" fill="rgb(240,54,50)" fg:x="58" fg:w="1"/><text x="7.8615%" y="191.50"></text></g><g><title>__GI___mmap64 (4 samples, 0.52%)</title><rect x="7.3491%" y="293" width="0.5249%" height="15" fill="rgb(233,84,52)" fg:x="56" fg:w="4"/><text x="7.5991%" y="303.50"></text></g><g><title>__GI___mmap64 (4 samples, 0.52%)</title><rect x="7.3491%" y="277" width="0.5249%" height="15" fill="rgb(207,117,47)" fg:x="56" fg:w="4"/><text x="7.5991%" y="287.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (4 samples, 0.52%)</title><rect x="7.3491%" y="261" width="0.5249%" height="15" fill="rgb(249,43,39)" fg:x="56" fg:w="4"/><text x="7.5991%" y="271.50"></text></g><g><title>do_syscall_64 (3 samples, 0.39%)</title><rect x="7.4803%" y="245" width="0.3937%" height="15" fill="rgb(209,38,44)" fg:x="57" fg:w="3"/><text x="7.7303%" y="255.50"></text></g><g><title>__x64_sys_mmap (3 samples, 0.39%)</title><rect x="7.4803%" y="229" width="0.3937%" height="15" fill="rgb(236,212,23)" fg:x="57" fg:w="3"/><text x="7.7303%" y="239.50"></text></g><g><title>ksys_mmap_pgoff (3 samples, 0.39%)</title><rect x="7.4803%" y="213" width="0.3937%" height="15" fill="rgb(242,79,21)" fg:x="57" fg:w="3"/><text x="7.7303%" y="223.50"></text></g><g><title>vm_mmap_pgoff (2 samples, 0.26%)</title><rect x="7.6115%" y="197" width="0.2625%" height="15" fill="rgb(211,96,35)" fg:x="58" fg:w="2"/><text x="7.8615%" y="207.50"></text></g><g><title>do_mmap (1 samples, 0.13%)</title><rect x="7.7428%" y="181" width="0.1312%" height="15" fill="rgb(253,215,40)" fg:x="59" fg:w="1"/><text x="7.9928%" y="191.50"></text></g><g><title>mmap_region (1 samples, 0.13%)</title><rect x="7.7428%" y="165" width="0.1312%" height="15" fill="rgb(211,81,21)" fg:x="59" fg:w="1"/><text x="7.9928%" y="175.50"></text></g><g><title>perf_event_mmap (1 samples, 0.13%)</title><rect x="7.7428%" y="149" width="0.1312%" height="15" fill="rgb(208,190,38)" fg:x="59" fg:w="1"/><text x="7.9928%" y="159.50"></text></g><g><title>perf_iterate_sb (1 samples, 0.13%)</title><rect x="7.7428%" y="133" width="0.1312%" height="15" fill="rgb(235,213,38)" fg:x="59" fg:w="1"/><text x="7.9928%" y="143.50"></text></g><g><title>perf_iterate_ctx (1 samples, 0.13%)</title><rect x="7.7428%" y="117" width="0.1312%" height="15" fill="rgb(237,122,38)" fg:x="59" fg:w="1"/><text x="7.9928%" y="127.50"></text></g><g><title>perf_event_mmap_output (1 samples, 0.13%)</title><rect x="7.7428%" y="101" width="0.1312%" height="15" fill="rgb(244,218,35)" fg:x="59" fg:w="1"/><text x="7.9928%" y="111.50"></text></g><g><title>__perf_event_header__init_id.isra.0 (1 samples, 0.13%)</title><rect x="7.7428%" y="85" width="0.1312%" height="15" fill="rgb(240,68,47)" fg:x="59" fg:w="1"/><text x="7.9928%" y="95.50"></text></g><g><title>local_clock (1 samples, 0.13%)</title><rect x="7.7428%" y="69" width="0.1312%" height="15" fill="rgb(210,16,53)" fg:x="59" fg:w="1"/><text x="7.9928%" y="79.50"></text></g><g><title>sched_clock_cpu (1 samples, 0.13%)</title><rect x="7.7428%" y="53" width="0.1312%" height="15" fill="rgb(235,124,12)" fg:x="59" fg:w="1"/><text x="7.9928%" y="63.50"></text></g><g><title>native_sched_clock (1 samples, 0.13%)</title><rect x="7.7428%" y="37" width="0.1312%" height="15" fill="rgb(224,169,11)" fg:x="59" fg:w="1"/><text x="7.9928%" y="47.50"></text></g><g><title>__pte_alloc (1 samples, 0.13%)</title><rect x="7.8740%" y="181" width="0.1312%" height="15" fill="rgb(250,166,2)" fg:x="60" fg:w="1"/><text x="8.1240%" y="191.50"></text></g><g><title>pte_alloc_one (1 samples, 0.13%)</title><rect x="7.8740%" y="165" width="0.1312%" height="15" fill="rgb(242,216,29)" fg:x="60" fg:w="1"/><text x="8.1240%" y="175.50"></text></g><g><title>alloc_pages_current (1 samples, 0.13%)</title><rect x="7.8740%" y="149" width="0.1312%" height="15" fill="rgb(230,116,27)" fg:x="60" fg:w="1"/><text x="8.1240%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (9 samples, 1.18%)</title><rect x="6.9554%" y="437" width="1.1811%" height="15" fill="rgb(228,99,48)" fg:x="53" fg:w="9"/><text x="7.2054%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (9 samples, 1.18%)</title><rect x="6.9554%" y="421" width="1.1811%" height="15" fill="rgb(253,11,6)" fg:x="53" fg:w="9"/><text x="7.2054%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (9 samples, 1.18%)</title><rect x="6.9554%" y="405" width="1.1811%" height="15" fill="rgb(247,143,39)" fg:x="53" fg:w="9"/><text x="7.2054%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9 samples, 1.18%)</title><rect x="6.9554%" y="389" width="1.1811%" height="15" fill="rgb(236,97,10)" fg:x="53" fg:w="9"/><text x="7.2054%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 1.18%)</title><rect x="6.9554%" y="373" width="1.1811%" height="15" fill="rgb(233,208,19)" fg:x="53" fg:w="9"/><text x="7.2054%" y="383.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 1.18%)</title><rect x="6.9554%" y="357" width="1.1811%" height="15" fill="rgb(216,164,2)" fg:x="53" fg:w="9"/><text x="7.2054%" y="367.50"></text></g><g><title>__GI___libc_malloc (9 samples, 1.18%)</title><rect x="6.9554%" y="341" width="1.1811%" height="15" fill="rgb(220,129,5)" fg:x="53" fg:w="9"/><text x="7.2054%" y="351.50"></text></g><g><title>_int_malloc (9 samples, 1.18%)</title><rect x="6.9554%" y="325" width="1.1811%" height="15" fill="rgb(242,17,10)" fg:x="53" fg:w="9"/><text x="7.2054%" y="335.50"></text></g><g><title>sysmalloc (9 samples, 1.18%)</title><rect x="6.9554%" y="309" width="1.1811%" height="15" fill="rgb(242,107,0)" fg:x="53" fg:w="9"/><text x="7.2054%" y="319.50"></text></g><g><title>page_fault (2 samples, 0.26%)</title><rect x="7.8740%" y="293" width="0.2625%" height="15" fill="rgb(251,28,31)" fg:x="60" fg:w="2"/><text x="8.1240%" y="303.50"></text></g><g><title>do_page_fault (2 samples, 0.26%)</title><rect x="7.8740%" y="277" width="0.2625%" height="15" fill="rgb(233,223,10)" fg:x="60" fg:w="2"/><text x="8.1240%" y="287.50"></text></g><g><title>__do_page_fault (2 samples, 0.26%)</title><rect x="7.8740%" y="261" width="0.2625%" height="15" fill="rgb(215,21,27)" fg:x="60" fg:w="2"/><text x="8.1240%" y="271.50"></text></g><g><title>do_user_addr_fault (2 samples, 0.26%)</title><rect x="7.8740%" y="245" width="0.2625%" height="15" fill="rgb(232,23,21)" fg:x="60" fg:w="2"/><text x="8.1240%" y="255.50"></text></g><g><title>handle_mm_fault (2 samples, 0.26%)</title><rect x="7.8740%" y="229" width="0.2625%" height="15" fill="rgb(244,5,23)" fg:x="60" fg:w="2"/><text x="8.1240%" y="239.50"></text></g><g><title>__handle_mm_fault (2 samples, 0.26%)</title><rect x="7.8740%" y="213" width="0.2625%" height="15" fill="rgb(226,81,46)" fg:x="60" fg:w="2"/><text x="8.1240%" y="223.50"></text></g><g><title>do_anonymous_page (2 samples, 0.26%)</title><rect x="7.8740%" y="197" width="0.2625%" height="15" fill="rgb(247,70,30)" fg:x="60" fg:w="2"/><text x="8.1240%" y="207.50"></text></g><g><title>lru_cache_add_active_or_unevictable (1 samples, 0.13%)</title><rect x="8.0052%" y="181" width="0.1312%" height="15" fill="rgb(212,68,19)" fg:x="61" fg:w="1"/><text x="8.2552%" y="191.50"></text></g><g><title>__lru_cache_add (1 samples, 0.13%)</title><rect x="8.0052%" y="165" width="0.1312%" height="15" fill="rgb(240,187,13)" fg:x="61" fg:w="1"/><text x="8.2552%" y="175.50"></text></g><g><title>pagevec_lru_move_fn (1 samples, 0.13%)</title><rect x="8.0052%" y="149" width="0.1312%" height="15" fill="rgb(223,113,26)" fg:x="61" fg:w="1"/><text x="8.2552%" y="159.50"></text></g><g><title>__pagevec_lru_add_fn (1 samples, 0.13%)</title><rect x="8.0052%" y="133" width="0.1312%" height="15" fill="rgb(206,192,2)" fg:x="61" fg:w="1"/><text x="8.2552%" y="143.50"></text></g><g><title>do_page_fault (1 samples, 0.13%)</title><rect x="13.7795%" y="405" width="0.1312%" height="15" fill="rgb(241,108,4)" fg:x="105" fg:w="1"/><text x="14.0295%" y="415.50"></text></g><g><title>error_entry (4 samples, 0.52%)</title><rect x="13.9108%" y="405" width="0.5249%" height="15" fill="rgb(247,173,49)" fg:x="106" fg:w="4"/><text x="14.1608%" y="415.50"></text></g><g><title>_cond_resched (1 samples, 0.13%)</title><rect x="14.5669%" y="357" width="0.1312%" height="15" fill="rgb(224,114,35)" fg:x="111" fg:w="1"/><text x="14.8169%" y="367.50"></text></g><g><title>__count_memcg_events (1 samples, 0.13%)</title><rect x="15.0919%" y="341" width="0.1312%" height="15" fill="rgb(245,159,27)" fg:x="115" fg:w="1"/><text x="15.3419%" y="351.50"></text></g><g><title>_cond_resched (1 samples, 0.13%)</title><rect x="15.2231%" y="341" width="0.1312%" height="15" fill="rgb(245,172,44)" fg:x="116" fg:w="1"/><text x="15.4731%" y="351.50"></text></g><g><title>down_read_trylock (10 samples, 1.31%)</title><rect x="15.3543%" y="341" width="1.3123%" height="15" fill="rgb(236,23,11)" fg:x="117" fg:w="10"/><text x="15.6043%" y="351.50"></text></g><g><title>__count_memcg_events (2 samples, 0.26%)</title><rect x="18.2415%" y="325" width="0.2625%" height="15" fill="rgb(205,117,38)" fg:x="139" fg:w="2"/><text x="18.4915%" y="335.50"></text></g><g><title>_raw_spin_lock (35 samples, 4.59%)</title><rect x="20.2100%" y="309" width="4.5932%" height="15" fill="rgb(237,72,25)" fg:x="154" fg:w="35"/><text x="20.4600%" y="319.50">_raw_..</text></g><g><title>__get_vma_policy (2 samples, 0.26%)</title><rect x="26.1155%" y="293" width="0.2625%" height="15" fill="rgb(244,70,9)" fg:x="199" fg:w="2"/><text x="26.3655%" y="303.50"></text></g><g><title>__lru_cache_add (7 samples, 0.92%)</title><rect x="26.3780%" y="293" width="0.9186%" height="15" fill="rgb(217,125,39)" fg:x="201" fg:w="7"/><text x="26.6280%" y="303.50"></text></g><g><title>_cond_resched (1 samples, 0.13%)</title><rect x="29.0026%" y="261" width="0.1312%" height="15" fill="rgb(235,36,10)" fg:x="221" fg:w="1"/><text x="29.2526%" y="271.50"></text></g><g><title>clear_page_erms (15 samples, 1.97%)</title><rect x="30.4462%" y="245" width="1.9685%" height="15" fill="rgb(251,123,47)" fg:x="232" fg:w="15"/><text x="30.6962%" y="255.50">c..</text></g><g><title>prep_new_page (2 samples, 0.26%)</title><rect x="32.4147%" y="245" width="0.2625%" height="15" fill="rgb(221,13,13)" fg:x="247" fg:w="2"/><text x="32.6647%" y="255.50"></text></g><g><title>get_page_from_freelist (43 samples, 5.64%)</title><rect x="29.1339%" y="261" width="5.6430%" height="15" fill="rgb(238,131,9)" fg:x="222" fg:w="43"/><text x="29.3839%" y="271.50">get_pag..</text></g><g><title>rmqueue (16 samples, 2.10%)</title><rect x="32.6772%" y="245" width="2.0997%" height="15" fill="rgb(211,50,8)" fg:x="249" fg:w="16"/><text x="32.9272%" y="255.50">r..</text></g><g><title>prep_new_page (1 samples, 0.13%)</title><rect x="34.7769%" y="261" width="0.1312%" height="15" fill="rgb(245,182,24)" fg:x="265" fg:w="1"/><text x="35.0269%" y="271.50"></text></g><g><title>__alloc_pages_nodemask (53 samples, 6.96%)</title><rect x="28.0840%" y="277" width="6.9554%" height="15" fill="rgb(242,14,37)" fg:x="214" fg:w="53"/><text x="28.3340%" y="287.50">__alloc_p..</text></g><g><title>rmqueue (1 samples, 0.13%)</title><rect x="34.9081%" y="261" width="0.1312%" height="15" fill="rgb(246,228,12)" fg:x="266" fg:w="1"/><text x="35.1581%" y="271.50"></text></g><g><title>get_vma_policy.part.0 (2 samples, 0.26%)</title><rect x="35.0394%" y="277" width="0.2625%" height="15" fill="rgb(213,55,15)" fg:x="267" fg:w="2"/><text x="35.2894%" y="287.50"></text></g><g><title>get_task_policy.part.0 (2 samples, 0.26%)</title><rect x="35.0394%" y="261" width="0.2625%" height="15" fill="rgb(209,9,3)" fg:x="267" fg:w="2"/><text x="35.2894%" y="271.50"></text></g><g><title>alloc_pages_vma (63 samples, 8.27%)</title><rect x="27.2966%" y="293" width="8.2677%" height="15" fill="rgb(230,59,30)" fg:x="208" fg:w="63"/><text x="27.5466%" y="303.50">alloc_pages_..</text></g><g><title>policy_nodemask (2 samples, 0.26%)</title><rect x="35.3018%" y="277" width="0.2625%" height="15" fill="rgb(209,121,21)" fg:x="269" fg:w="2"/><text x="35.5518%" y="287.50"></text></g><g><title>get_vma_policy.part.0 (1 samples, 0.13%)</title><rect x="35.5643%" y="293" width="0.1312%" height="15" fill="rgb(220,109,13)" fg:x="271" fg:w="1"/><text x="35.8143%" y="303.50"></text></g><g><title>__lock_text_start (1 samples, 0.13%)</title><rect x="36.4829%" y="261" width="0.1312%" height="15" fill="rgb(232,18,1)" fg:x="278" fg:w="1"/><text x="36.7329%" y="271.50"></text></g><g><title>__x86_indirect_thunk_rax (1 samples, 0.13%)</title><rect x="36.6142%" y="261" width="0.1312%" height="15" fill="rgb(215,41,42)" fg:x="279" fg:w="1"/><text x="36.8642%" y="271.50"></text></g><g><title>__mod_memcg_state (2 samples, 0.26%)</title><rect x="39.3701%" y="213" width="0.2625%" height="15" fill="rgb(224,123,36)" fg:x="300" fg:w="2"/><text x="39.6201%" y="223.50"></text></g><g><title>__mod_lruvec_state (6 samples, 0.79%)</title><rect x="38.9764%" y="229" width="0.7874%" height="15" fill="rgb(240,125,3)" fg:x="297" fg:w="6"/><text x="39.2264%" y="239.50"></text></g><g><title>__mod_node_page_state (1 samples, 0.13%)</title><rect x="39.6325%" y="213" width="0.1312%" height="15" fill="rgb(205,98,50)" fg:x="302" fg:w="1"/><text x="39.8825%" y="223.50"></text></g><g><title>__mod_memcg_state (1 samples, 0.13%)</title><rect x="39.7638%" y="229" width="0.1312%" height="15" fill="rgb(205,185,37)" fg:x="303" fg:w="1"/><text x="40.0138%" y="239.50"></text></g><g><title>__mod_node_page_state (1 samples, 0.13%)</title><rect x="39.8950%" y="229" width="0.1312%" height="15" fill="rgb(238,207,15)" fg:x="304" fg:w="1"/><text x="40.1450%" y="239.50"></text></g><g><title>__mod_zone_page_state (1 samples, 0.13%)</title><rect x="40.0262%" y="229" width="0.1312%" height="15" fill="rgb(213,199,42)" fg:x="305" fg:w="1"/><text x="40.2762%" y="239.50"></text></g><g><title>mem_cgroup_update_lru_size (4 samples, 0.52%)</title><rect x="40.1575%" y="229" width="0.5249%" height="15" fill="rgb(235,201,11)" fg:x="306" fg:w="4"/><text x="40.4075%" y="239.50"></text></g><g><title>page_evictable (1 samples, 0.13%)</title><rect x="40.6824%" y="229" width="0.1312%" height="15" fill="rgb(207,46,11)" fg:x="310" fg:w="1"/><text x="40.9324%" y="239.50"></text></g><g><title>page_mapping (1 samples, 0.13%)</title><rect x="40.6824%" y="213" width="0.1312%" height="15" fill="rgb(241,35,35)" fg:x="310" fg:w="1"/><text x="40.9324%" y="223.50"></text></g><g><title>__pagevec_lru_add_fn (30 samples, 3.94%)</title><rect x="37.0079%" y="245" width="3.9370%" height="15" fill="rgb(243,32,47)" fg:x="282" fg:w="30"/><text x="37.2579%" y="255.50">__pa..</text></g><g><title>page_mapping (1 samples, 0.13%)</title><rect x="40.8136%" y="229" width="0.1312%" height="15" fill="rgb(247,202,23)" fg:x="311" fg:w="1"/><text x="41.0636%" y="239.50"></text></g><g><title>lru_cache_add_active_or_unevictable (43 samples, 5.64%)</title><rect x="35.6955%" y="293" width="5.6430%" height="15" fill="rgb(219,102,11)" fg:x="272" fg:w="43"/><text x="35.9455%" y="303.50">lru_cac..</text></g><g><title>__lru_cache_add (37 samples, 4.86%)</title><rect x="36.4829%" y="277" width="4.8556%" height="15" fill="rgb(243,110,44)" fg:x="278" fg:w="37"/><text x="36.7329%" y="287.50">__lru_..</text></g><g><title>pagevec_lru_move_fn (35 samples, 4.59%)</title><rect x="36.7454%" y="261" width="4.5932%" height="15" fill="rgb(222,74,54)" fg:x="280" fg:w="35"/><text x="36.9954%" y="271.50">pagev..</text></g><g><title>release_pages (3 samples, 0.39%)</title><rect x="40.9449%" y="245" width="0.3937%" height="15" fill="rgb(216,99,12)" fg:x="312" fg:w="3"/><text x="41.1949%" y="255.50"></text></g><g><title>mem_cgroup_charge_statistics (1 samples, 0.13%)</title><rect x="41.3386%" y="293" width="0.1312%" height="15" fill="rgb(226,22,26)" fg:x="315" fg:w="1"/><text x="41.5886%" y="303.50"></text></g><g><title>__count_memcg_events (1 samples, 0.13%)</title><rect x="41.9948%" y="277" width="0.1312%" height="15" fill="rgb(217,163,10)" fg:x="320" fg:w="1"/><text x="42.2448%" y="287.50"></text></g><g><title>__mod_memcg_state (1 samples, 0.13%)</title><rect x="42.1260%" y="277" width="0.1312%" height="15" fill="rgb(213,25,53)" fg:x="321" fg:w="1"/><text x="42.3760%" y="287.50"></text></g><g><title>mem_cgroup_commit_charge (9 samples, 1.18%)</title><rect x="41.4698%" y="293" width="1.1811%" height="15" fill="rgb(252,105,26)" fg:x="316" fg:w="9"/><text x="41.7198%" y="303.50"></text></g><g><title>mem_cgroup_charge_statistics (3 samples, 0.39%)</title><rect x="42.2572%" y="277" width="0.3937%" height="15" fill="rgb(220,39,43)" fg:x="322" fg:w="3"/><text x="42.5072%" y="287.50"></text></g><g><title>__mod_memcg_state (1 samples, 0.13%)</title><rect x="42.5197%" y="261" width="0.1312%" height="15" fill="rgb(229,68,48)" fg:x="324" fg:w="1"/><text x="42.7697%" y="271.50"></text></g><g><title>mem_cgroup_throttle_swaprate (1 samples, 0.13%)</title><rect x="42.6509%" y="293" width="0.1312%" height="15" fill="rgb(252,8,32)" fg:x="325" fg:w="1"/><text x="42.9009%" y="303.50"></text></g><g><title>get_mem_cgroup_from_mm (1 samples, 0.13%)</title><rect x="43.3071%" y="277" width="0.1312%" height="15" fill="rgb(223,20,43)" fg:x="330" fg:w="1"/><text x="43.5571%" y="287.50"></text></g><g><title>mem_cgroup_throttle_swaprate (4 samples, 0.52%)</title><rect x="43.4383%" y="277" width="0.5249%" height="15" fill="rgb(229,81,49)" fg:x="331" fg:w="4"/><text x="43.6883%" y="287.50"></text></g><g><title>kthread_blkcg (2 samples, 0.26%)</title><rect x="43.7008%" y="261" width="0.2625%" height="15" fill="rgb(236,28,36)" fg:x="333" fg:w="2"/><text x="43.9508%" y="271.50"></text></g><g><title>get_mem_cgroup_from_mm (17 samples, 2.23%)</title><rect x="44.7507%" y="261" width="2.2310%" height="15" fill="rgb(249,185,26)" fg:x="341" fg:w="17"/><text x="45.0007%" y="271.50">g..</text></g><g><title>apic_timer_interrupt (1 samples, 0.13%)</title><rect x="49.4751%" y="245" width="0.1312%" height="15" fill="rgb(249,174,33)" fg:x="377" fg:w="1"/><text x="49.7251%" y="255.50"></text></g><g><title>smp_apic_timer_interrupt (1 samples, 0.13%)</title><rect x="49.4751%" y="229" width="0.1312%" height="15" fill="rgb(233,201,37)" fg:x="377" fg:w="1"/><text x="49.7251%" y="239.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.13%)</title><rect x="49.4751%" y="213" width="0.1312%" height="15" fill="rgb(221,78,26)" fg:x="377" fg:w="1"/><text x="49.7251%" y="223.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.13%)</title><rect x="49.4751%" y="197" width="0.1312%" height="15" fill="rgb(250,127,30)" fg:x="377" fg:w="1"/><text x="49.7251%" y="207.50"></text></g><g><title>tick_sched_timer (1 samples, 0.13%)</title><rect x="49.4751%" y="181" width="0.1312%" height="15" fill="rgb(230,49,44)" fg:x="377" fg:w="1"/><text x="49.7251%" y="191.50"></text></g><g><title>tick_sched_handle (1 samples, 0.13%)</title><rect x="49.4751%" y="165" width="0.1312%" height="15" fill="rgb(229,67,23)" fg:x="377" fg:w="1"/><text x="49.7251%" y="175.50"></text></g><g><title>update_process_times (1 samples, 0.13%)</title><rect x="49.4751%" y="149" width="0.1312%" height="15" fill="rgb(249,83,47)" fg:x="377" fg:w="1"/><text x="49.7251%" y="159.50"></text></g><g><title>account_process_tick (1 samples, 0.13%)</title><rect x="49.4751%" y="133" width="0.1312%" height="15" fill="rgb(215,43,3)" fg:x="377" fg:w="1"/><text x="49.7251%" y="143.50"></text></g><g><title>account_system_time (1 samples, 0.13%)</title><rect x="49.4751%" y="117" width="0.1312%" height="15" fill="rgb(238,154,13)" fg:x="377" fg:w="1"/><text x="49.7251%" y="127.50"></text></g><g><title>account_system_index_time (1 samples, 0.13%)</title><rect x="49.4751%" y="101" width="0.1312%" height="15" fill="rgb(219,56,2)" fg:x="377" fg:w="1"/><text x="49.7251%" y="111.50"></text></g><g><title>__cgroup_account_cputime_field (1 samples, 0.13%)</title><rect x="49.4751%" y="85" width="0.1312%" height="15" fill="rgb(233,0,4)" fg:x="377" fg:w="1"/><text x="49.7251%" y="95.50"></text></g><g><title>page_counter_try_charge (2 samples, 0.26%)</title><rect x="49.6063%" y="245" width="0.2625%" height="15" fill="rgb(235,30,7)" fg:x="378" fg:w="2"/><text x="49.8563%" y="255.50"></text></g><g><title>mem_cgroup_try_charge (46 samples, 6.04%)</title><rect x="43.9633%" y="277" width="6.0367%" height="15" fill="rgb(250,79,13)" fg:x="335" fg:w="46"/><text x="44.2133%" y="287.50">mem_cgro..</text></g><g><title>try_charge (23 samples, 3.02%)</title><rect x="46.9816%" y="261" width="3.0184%" height="15" fill="rgb(211,146,34)" fg:x="358" fg:w="23"/><text x="47.2316%" y="271.50">try..</text></g><g><title>refill_stock (1 samples, 0.13%)</title><rect x="49.8688%" y="245" width="0.1312%" height="15" fill="rgb(228,22,38)" fg:x="380" fg:w="1"/><text x="50.1188%" y="255.50"></text></g><g><title>mem_cgroup_try_charge_delay (91 samples, 11.94%)</title><rect x="42.7822%" y="293" width="11.9423%" height="15" fill="rgb(235,168,5)" fg:x="326" fg:w="91"/><text x="43.0322%" y="303.50">mem_cgroup_try_cha..</text></g><g><title>try_charge (36 samples, 4.72%)</title><rect x="50.0000%" y="277" width="4.7244%" height="15" fill="rgb(221,155,16)" fg:x="381" fg:w="36"/><text x="50.2500%" y="287.50">try_ch..</text></g><g><title>page_add_new_anon_rmap (3 samples, 0.39%)</title><rect x="54.7244%" y="293" width="0.3937%" height="15" fill="rgb(215,215,53)" fg:x="417" fg:w="3"/><text x="54.9744%" y="303.50"></text></g><g><title>__page_set_anon_rmap (2 samples, 0.26%)</title><rect x="54.8556%" y="277" width="0.2625%" height="15" fill="rgb(223,4,10)" fg:x="418" fg:w="2"/><text x="55.1056%" y="287.50"></text></g><g><title>do_anonymous_page (232 samples, 30.45%)</title><rect x="24.8031%" y="309" width="30.4462%" height="15" fill="rgb(234,103,6)" fg:x="189" fg:w="232"/><text x="25.0531%" y="319.50">do_anonymous_page</text></g><g><title>policy_nodemask (1 samples, 0.13%)</title><rect x="55.1181%" y="293" width="0.1312%" height="15" fill="rgb(227,97,0)" fg:x="420" fg:w="1"/><text x="55.3681%" y="303.50"></text></g><g><title>lru_cache_add_active_or_unevictable (1 samples, 0.13%)</title><rect x="55.2493%" y="309" width="0.1312%" height="15" fill="rgb(234,150,53)" fg:x="421" fg:w="1"/><text x="55.4993%" y="319.50"></text></g><g><title>mem_cgroup_try_charge_delay (1 samples, 0.13%)</title><rect x="55.3806%" y="309" width="0.1312%" height="15" fill="rgb(228,201,54)" fg:x="422" fg:w="1"/><text x="55.6306%" y="319.50"></text></g><g><title>__handle_mm_fault (284 samples, 37.27%)</title><rect x="18.5039%" y="325" width="37.2703%" height="15" fill="rgb(222,22,37)" fg:x="141" fg:w="284"/><text x="18.7539%" y="335.50">__handle_mm_fault</text></g><g><title>pmd_devmap_trans_unstable (2 samples, 0.26%)</title><rect x="55.5118%" y="309" width="0.2625%" height="15" fill="rgb(237,53,32)" fg:x="423" fg:w="2"/><text x="55.7618%" y="319.50"></text></g><g><title>mem_cgroup_from_task (1 samples, 0.13%)</title><rect x="55.7743%" y="325" width="0.1312%" height="15" fill="rgb(233,25,53)" fg:x="425" fg:w="1"/><text x="56.0243%" y="335.50"></text></g><g><title>handle_mm_fault (300 samples, 39.37%)</title><rect x="16.6667%" y="341" width="39.3701%" height="15" fill="rgb(210,40,34)" fg:x="127" fg:w="300"/><text x="16.9167%" y="351.50">handle_mm_fault</text></g><g><title>sync_mm_rss (1 samples, 0.13%)</title><rect x="55.9055%" y="325" width="0.1312%" height="15" fill="rgb(241,220,44)" fg:x="426" fg:w="1"/><text x="56.1555%" y="335.50"></text></g><g><title>mem_cgroup_from_task (1 samples, 0.13%)</title><rect x="56.0367%" y="341" width="0.1312%" height="15" fill="rgb(235,28,35)" fg:x="427" fg:w="1"/><text x="56.2867%" y="351.50"></text></g><g><title>rcu_all_qs (1 samples, 0.13%)</title><rect x="56.1680%" y="341" width="0.1312%" height="15" fill="rgb(210,56,17)" fg:x="428" fg:w="1"/><text x="56.4180%" y="351.50"></text></g><g><title>do_user_addr_fault (318 samples, 41.73%)</title><rect x="14.6982%" y="357" width="41.7323%" height="15" fill="rgb(224,130,29)" fg:x="112" fg:w="318"/><text x="14.9482%" y="367.50">do_user_addr_fault</text></g><g><title>vmacache_find (1 samples, 0.13%)</title><rect x="56.2992%" y="341" width="0.1312%" height="15" fill="rgb(235,212,8)" fg:x="429" fg:w="1"/><text x="56.5492%" y="351.50"></text></g><g><title>down_read_trylock (1 samples, 0.13%)</title><rect x="56.4304%" y="357" width="0.1312%" height="15" fill="rgb(223,33,50)" fg:x="430" fg:w="1"/><text x="56.6804%" y="367.50"></text></g><g><title>page_fault (324 samples, 42.52%)</title><rect x="14.4357%" y="405" width="42.5197%" height="15" fill="rgb(219,149,13)" fg:x="110" fg:w="324"/><text x="14.6857%" y="415.50">page_fault</text></g><g><title>do_page_fault (323 samples, 42.39%)</title><rect x="14.5669%" y="389" width="42.3885%" height="15" fill="rgb(250,156,29)" fg:x="111" fg:w="323"/><text x="14.8169%" y="399.50">do_page_fault</text></g><g><title>__do_page_fault (323 samples, 42.39%)</title><rect x="14.5669%" y="373" width="42.3885%" height="15" fill="rgb(216,193,19)" fg:x="111" fg:w="323"/><text x="14.8169%" y="383.50">__do_page_fault</text></g><g><title>up_read (3 samples, 0.39%)</title><rect x="56.5617%" y="357" width="0.3937%" height="15" fill="rgb(216,135,14)" fg:x="431" fg:w="3"/><text x="56.8117%" y="367.50"></text></g><g><title>retint_user (2 samples, 0.26%)</title><rect x="56.9554%" y="405" width="0.2625%" height="15" fill="rgb(241,47,5)" fg:x="434" fg:w="2"/><text x="57.2054%" y="415.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.39%)</title><rect x="57.2178%" y="405" width="0.3937%" height="15" fill="rgb(233,42,35)" fg:x="436" fg:w="3"/><text x="57.4678%" y="415.50"></text></g><g><title>prepare_exit_to_usermode (1 samples, 0.13%)</title><rect x="57.4803%" y="389" width="0.1312%" height="15" fill="rgb(231,13,6)" fg:x="438" fg:w="1"/><text x="57.7303%" y="399.50"></text></g><g><title>__libc_start_main (489 samples, 64.17%)</title><rect x="0.6562%" y="709" width="64.1732%" height="15" fill="rgb(207,181,40)" fg:x="5" fg:w="489"/><text x="0.9062%" y="719.50">__libc_start_main</text></g><g><title>main (489 samples, 64.17%)</title><rect x="0.6562%" y="693" width="64.1732%" height="15" fill="rgb(254,173,49)" fg:x="5" fg:w="489"/><text x="0.9062%" y="703.50">main</text></g><g><title>std::rt::lang_start_internal (489 samples, 64.17%)</title><rect x="0.6562%" y="677" width="64.1732%" height="15" fill="rgb(221,1,38)" fg:x="5" fg:w="489"/><text x="0.9062%" y="687.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (489 samples, 64.17%)</title><rect x="0.6562%" y="661" width="64.1732%" height="15" fill="rgb(206,124,46)" fg:x="5" fg:w="489"/><text x="0.9062%" y="671.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (489 samples, 64.17%)</title><rect x="0.6562%" y="645" width="64.1732%" height="15" fill="rgb(249,21,11)" fg:x="5" fg:w="489"/><text x="0.9062%" y="655.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (489 samples, 64.17%)</title><rect x="0.6562%" y="629" width="64.1732%" height="15" fill="rgb(222,201,40)" fg:x="5" fg:w="489"/><text x="0.9062%" y="639.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (489 samples, 64.17%)</title><rect x="0.6562%" y="613" width="64.1732%" height="15" fill="rgb(235,61,29)" fg:x="5" fg:w="489"/><text x="0.9062%" y="623.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (489 samples, 64.17%)</title><rect x="0.6562%" y="597" width="64.1732%" height="15" fill="rgb(219,207,3)" fg:x="5" fg:w="489"/><text x="0.9062%" y="607.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (489 samples, 64.17%)</title><rect x="0.6562%" y="581" width="64.1732%" height="15" fill="rgb(222,56,46)" fg:x="5" fg:w="489"/><text x="0.9062%" y="591.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (489 samples, 64.17%)</title><rect x="0.6562%" y="565" width="64.1732%" height="15" fill="rgb(239,76,54)" fg:x="5" fg:w="489"/><text x="0.9062%" y="575.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (489 samples, 64.17%)</title><rect x="0.6562%" y="549" width="64.1732%" height="15" fill="rgb(231,124,27)" fg:x="5" fg:w="489"/><text x="0.9062%" y="559.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (489 samples, 64.17%)</title><rect x="0.6562%" y="533" width="64.1732%" height="15" fill="rgb(249,195,6)" fg:x="5" fg:w="489"/><text x="0.9062%" y="543.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (489 samples, 64.17%)</title><rect x="0.6562%" y="517" width="64.1732%" height="15" fill="rgb(237,174,47)" fg:x="5" fg:w="489"/><text x="0.9062%" y="527.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (489 samples, 64.17%)</title><rect x="0.6562%" y="501" width="64.1732%" height="15" fill="rgb(206,201,31)" fg:x="5" fg:w="489"/><text x="0.9062%" y="511.50">core::ops::function::FnOnce::call_once</text></g><g><title>pourleblog::main (489 samples, 64.17%)</title><rect x="0.6562%" y="485" width="64.1732%" height="15" fill="rgb(231,57,52)" fg:x="5" fg:w="489"/><text x="0.9062%" y="495.50">pourleblog::main</text></g><g><title>pourleblog::deserialize1 (441 samples, 57.87%)</title><rect x="6.9554%" y="469" width="57.8740%" height="15" fill="rgb(248,177,22)" fg:x="53" fg:w="441"/><text x="7.2054%" y="479.50">pourleblog::deserialize1</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::split_off (441 samples, 57.87%)</title><rect x="6.9554%" y="453" width="57.8740%" height="15" fill="rgb(215,211,37)" fg:x="53" fg:w="441"/><text x="7.2054%" y="463.50">alloc::vec::Vec&lt;T,A&gt;::split_off</text></g><g><title>core::intrinsics::copy_nonoverlapping (432 samples, 56.69%)</title><rect x="8.1365%" y="437" width="56.6929%" height="15" fill="rgb(241,128,51)" fg:x="62" fg:w="432"/><text x="8.3865%" y="447.50">core::intrinsics::copy_nonoverlapping</text></g><g><title>__memmove_avx_unaligned_erms (432 samples, 56.69%)</title><rect x="8.1365%" y="421" width="56.6929%" height="15" fill="rgb(227,165,31)" fg:x="62" fg:w="432"/><text x="8.3865%" y="431.50">__memmove_avx_unaligned_erms</text></g><g><title>sync_regs (55 samples, 7.22%)</title><rect x="57.6115%" y="405" width="7.2178%" height="15" fill="rgb(228,167,24)" fg:x="439" fg:w="55"/><text x="57.8615%" y="415.50">sync_regs</text></g><g><title>_start (490 samples, 64.30%)</title><rect x="0.6562%" y="725" width="64.3045%" height="15" fill="rgb(228,143,12)" fg:x="5" fg:w="490"/><text x="0.9062%" y="735.50">_start</text></g><g><title>_dl_start (1 samples, 0.13%)</title><rect x="64.8294%" y="709" width="0.1312%" height="15" fill="rgb(249,149,8)" fg:x="494" fg:w="1"/><text x="65.0794%" y="719.50"></text></g><g><title>_dl_start_final (1 samples, 0.13%)</title><rect x="64.8294%" y="693" width="0.1312%" height="15" fill="rgb(243,35,44)" fg:x="494" fg:w="1"/><text x="65.0794%" y="703.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.13%)</title><rect x="64.8294%" y="677" width="0.1312%" height="15" fill="rgb(246,89,9)" fg:x="494" fg:w="1"/><text x="65.0794%" y="687.50"></text></g><g><title>dl_main (1 samples, 0.13%)</title><rect x="64.8294%" y="661" width="0.1312%" height="15" fill="rgb(233,213,13)" fg:x="494" fg:w="1"/><text x="65.0794%" y="671.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.13%)</title><rect x="64.8294%" y="645" width="0.1312%" height="15" fill="rgb(233,141,41)" fg:x="494" fg:w="1"/><text x="65.0794%" y="655.50"></text></g><g><title>_dl_protect_relro (1 samples, 0.13%)</title><rect x="64.8294%" y="629" width="0.1312%" height="15" fill="rgb(239,167,4)" fg:x="494" fg:w="1"/><text x="65.0794%" y="639.50"></text></g><g><title>__mprotect (1 samples, 0.13%)</title><rect x="64.8294%" y="613" width="0.1312%" height="15" fill="rgb(209,217,16)" fg:x="494" fg:w="1"/><text x="65.0794%" y="623.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.13%)</title><rect x="64.8294%" y="597" width="0.1312%" height="15" fill="rgb(219,88,35)" fg:x="494" fg:w="1"/><text x="65.0794%" y="607.50"></text></g><g><title>do_syscall_64 (1 samples, 0.13%)</title><rect x="64.8294%" y="581" width="0.1312%" height="15" fill="rgb(220,193,23)" fg:x="494" fg:w="1"/><text x="65.0794%" y="591.50"></text></g><g><title>__x64_sys_mprotect (1 samples, 0.13%)</title><rect x="64.8294%" y="565" width="0.1312%" height="15" fill="rgb(230,90,52)" fg:x="494" fg:w="1"/><text x="65.0794%" y="575.50"></text></g><g><title>do_mprotect_pkey (1 samples, 0.13%)</title><rect x="64.8294%" y="549" width="0.1312%" height="15" fill="rgb(252,106,19)" fg:x="494" fg:w="1"/><text x="65.0794%" y="559.50"></text></g><g><title>mprotect_fixup (1 samples, 0.13%)</title><rect x="64.8294%" y="533" width="0.1312%" height="15" fill="rgb(206,74,20)" fg:x="494" fg:w="1"/><text x="65.0794%" y="543.50"></text></g><g><title>split_vma (1 samples, 0.13%)</title><rect x="64.8294%" y="517" width="0.1312%" height="15" fill="rgb(230,138,44)" fg:x="494" fg:w="1"/><text x="65.0794%" y="527.50"></text></g><g><title>__split_vma (1 samples, 0.13%)</title><rect x="64.8294%" y="501" width="0.1312%" height="15" fill="rgb(235,182,43)" fg:x="494" fg:w="1"/><text x="65.0794%" y="511.50"></text></g><g><title>vm_area_dup (1 samples, 0.13%)</title><rect x="64.8294%" y="485" width="0.1312%" height="15" fill="rgb(242,16,51)" fg:x="494" fg:w="1"/><text x="65.0794%" y="495.50"></text></g><g><title>kmem_cache_alloc (1 samples, 0.13%)</title><rect x="64.8294%" y="469" width="0.1312%" height="15" fill="rgb(248,9,4)" fg:x="494" fg:w="1"/><text x="65.0794%" y="479.50"></text></g><g><title>__slab_alloc (1 samples, 0.13%)</title><rect x="64.8294%" y="453" width="0.1312%" height="15" fill="rgb(210,31,22)" fg:x="494" fg:w="1"/><text x="65.0794%" y="463.50"></text></g><g><title>___slab_alloc (1 samples, 0.13%)</title><rect x="64.8294%" y="437" width="0.1312%" height="15" fill="rgb(239,54,39)" fg:x="494" fg:w="1"/><text x="65.0794%" y="447.50"></text></g><g><title>__x64_sys_execve (1 samples, 0.13%)</title><rect x="64.9606%" y="693" width="0.1312%" height="15" fill="rgb(230,99,41)" fg:x="495" fg:w="1"/><text x="65.2106%" y="703.50"></text></g><g><title>__do_execve_file.isra.0 (1 samples, 0.13%)</title><rect x="64.9606%" y="677" width="0.1312%" height="15" fill="rgb(253,106,12)" fg:x="495" fg:w="1"/><text x="65.2106%" y="687.50"></text></g><g><title>search_binary_handler (1 samples, 0.13%)</title><rect x="64.9606%" y="661" width="0.1312%" height="15" fill="rgb(213,46,41)" fg:x="495" fg:w="1"/><text x="65.2106%" y="671.50"></text></g><g><title>load_elf_binary (1 samples, 0.13%)</title><rect x="64.9606%" y="645" width="0.1312%" height="15" fill="rgb(215,133,35)" fg:x="495" fg:w="1"/><text x="65.2106%" y="655.50"></text></g><g><title>setup_arg_pages (1 samples, 0.13%)</title><rect x="64.9606%" y="629" width="0.1312%" height="15" fill="rgb(213,28,5)" fg:x="495" fg:w="1"/><text x="65.2106%" y="639.50"></text></g><g><title>shift_arg_pages (1 samples, 0.13%)</title><rect x="64.9606%" y="613" width="0.1312%" height="15" fill="rgb(215,77,49)" fg:x="495" fg:w="1"/><text x="65.2106%" y="623.50"></text></g><g><title>move_page_tables (1 samples, 0.13%)</title><rect x="64.9606%" y="597" width="0.1312%" height="15" fill="rgb(248,100,22)" fg:x="495" fg:w="1"/><text x="65.2106%" y="607.50"></text></g><g><title>page_remove_rmap (1 samples, 0.13%)</title><rect x="65.3543%" y="549" width="0.1312%" height="15" fill="rgb(208,67,9)" fg:x="498" fg:w="1"/><text x="65.6043%" y="559.50"></text></g><g><title>free_unref_page_list (4 samples, 0.52%)</title><rect x="65.8793%" y="501" width="0.5249%" height="15" fill="rgb(219,133,21)" fg:x="502" fg:w="4"/><text x="66.1293%" y="511.50"></text></g><g><title>free_unref_page_commit (3 samples, 0.39%)</title><rect x="66.0105%" y="485" width="0.3937%" height="15" fill="rgb(246,46,29)" fg:x="503" fg:w="3"/><text x="66.2605%" y="495.50"></text></g><g><title>free_pcppages_bulk (3 samples, 0.39%)</title><rect x="66.0105%" y="469" width="0.3937%" height="15" fill="rgb(246,185,52)" fg:x="503" fg:w="3"/><text x="66.2605%" y="479.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (12 samples, 1.57%)</title><rect x="64.9606%" y="725" width="1.5748%" height="15" fill="rgb(252,136,11)" fg:x="495" fg:w="12"/><text x="65.2106%" y="735.50"></text></g><g><title>do_syscall_64 (12 samples, 1.57%)</title><rect x="64.9606%" y="709" width="1.5748%" height="15" fill="rgb(219,138,53)" fg:x="495" fg:w="12"/><text x="65.2106%" y="719.50"></text></g><g><title>__x64_sys_exit_group (11 samples, 1.44%)</title><rect x="65.0919%" y="693" width="1.4436%" height="15" fill="rgb(211,51,23)" fg:x="496" fg:w="11"/><text x="65.3419%" y="703.50"></text></g><g><title>do_group_exit (11 samples, 1.44%)</title><rect x="65.0919%" y="677" width="1.4436%" height="15" fill="rgb(247,221,28)" fg:x="496" fg:w="11"/><text x="65.3419%" y="687.50"></text></g><g><title>do_exit (11 samples, 1.44%)</title><rect x="65.0919%" y="661" width="1.4436%" height="15" fill="rgb(251,222,45)" fg:x="496" fg:w="11"/><text x="65.3419%" y="671.50"></text></g><g><title>mmput (11 samples, 1.44%)</title><rect x="65.0919%" y="645" width="1.4436%" height="15" fill="rgb(217,162,53)" fg:x="496" fg:w="11"/><text x="65.3419%" y="655.50"></text></g><g><title>exit_mmap (11 samples, 1.44%)</title><rect x="65.0919%" y="629" width="1.4436%" height="15" fill="rgb(229,93,14)" fg:x="496" fg:w="11"/><text x="65.3419%" y="639.50"></text></g><g><title>unmap_vmas (11 samples, 1.44%)</title><rect x="65.0919%" y="613" width="1.4436%" height="15" fill="rgb(209,67,49)" fg:x="496" fg:w="11"/><text x="65.3419%" y="623.50"></text></g><g><title>unmap_single_vma (11 samples, 1.44%)</title><rect x="65.0919%" y="597" width="1.4436%" height="15" fill="rgb(213,87,29)" fg:x="496" fg:w="11"/><text x="65.3419%" y="607.50"></text></g><g><title>unmap_page_range (11 samples, 1.44%)</title><rect x="65.0919%" y="581" width="1.4436%" height="15" fill="rgb(205,151,52)" fg:x="496" fg:w="11"/><text x="65.3419%" y="591.50"></text></g><g><title>zap_pte_range.isra.0 (11 samples, 1.44%)</title><rect x="65.0919%" y="565" width="1.4436%" height="15" fill="rgb(253,215,39)" fg:x="496" fg:w="11"/><text x="65.3419%" y="575.50"></text></g><g><title>tlb_flush_mmu (8 samples, 1.05%)</title><rect x="65.4856%" y="549" width="1.0499%" height="15" fill="rgb(221,220,41)" fg:x="499" fg:w="8"/><text x="65.7356%" y="559.50"></text></g><g><title>free_pages_and_swap_cache (8 samples, 1.05%)</title><rect x="65.4856%" y="533" width="1.0499%" height="15" fill="rgb(218,133,21)" fg:x="499" fg:w="8"/><text x="65.7356%" y="543.50"></text></g><g><title>release_pages (7 samples, 0.92%)</title><rect x="65.6168%" y="517" width="0.9186%" height="15" fill="rgb(221,193,43)" fg:x="500" fg:w="7"/><text x="65.8668%" y="527.50"></text></g><g><title>uncharge_page (1 samples, 0.13%)</title><rect x="66.4042%" y="501" width="0.1312%" height="15" fill="rgb(240,128,52)" fg:x="506" fg:w="1"/><text x="66.6542%" y="511.50"></text></g><g><title>all (762 samples, 100%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(253,114,12)" fg:x="0" fg:w="762"/><text x="0.2500%" y="767.50"></text></g><g><title>pourleblog (757 samples, 99.34%)</title><rect x="0.6562%" y="741" width="99.3438%" height="15" fill="rgb(215,223,47)" fg:x="5" fg:w="757"/><text x="0.9062%" y="751.50">pourleblog</text></g><g><title>page_fault (255 samples, 33.46%)</title><rect x="66.5354%" y="725" width="33.4646%" height="15" fill="rgb(248,225,23)" fg:x="507" fg:w="255"/><text x="66.7854%" y="735.50">page_fault</text></g></svg></svg>