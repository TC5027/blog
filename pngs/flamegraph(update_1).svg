<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1030" onload="init(evt)" viewBox="0 0 1200 1030" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1030" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1013.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1013.00"> </text><svg id="frames" x="10" width="1180" total_samples="1536"><g><title>perf-exec (5 samples, 0.33%)</title><rect x="0.0000%" y="965" width="0.3255%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="5"/><text x="0.2500%" y="975.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 0.33%)</title><rect x="0.0000%" y="949" width="0.3255%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="5"/><text x="0.2500%" y="959.50"></text></g><g><title>do_syscall_64 (5 samples, 0.33%)</title><rect x="0.0000%" y="933" width="0.3255%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="5"/><text x="0.2500%" y="943.50"></text></g><g><title>__x64_sys_execve (5 samples, 0.33%)</title><rect x="0.0000%" y="917" width="0.3255%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="5"/><text x="0.2500%" y="927.50"></text></g><g><title>do_execveat_common.isra.0 (5 samples, 0.33%)</title><rect x="0.0000%" y="901" width="0.3255%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="5"/><text x="0.2500%" y="911.50"></text></g><g><title>bprm_execve (5 samples, 0.33%)</title><rect x="0.0000%" y="885" width="0.3255%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="5"/><text x="0.2500%" y="895.50"></text></g><g><title>bprm_execve.part.0 (5 samples, 0.33%)</title><rect x="0.0000%" y="869" width="0.3255%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="5"/><text x="0.2500%" y="879.50"></text></g><g><title>exec_binprm (5 samples, 0.33%)</title><rect x="0.0000%" y="853" width="0.3255%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="5"/><text x="0.2500%" y="863.50"></text></g><g><title>search_binary_handler (5 samples, 0.33%)</title><rect x="0.0000%" y="837" width="0.3255%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="5"/><text x="0.2500%" y="847.50"></text></g><g><title>load_elf_binary (5 samples, 0.33%)</title><rect x="0.0000%" y="821" width="0.3255%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="5"/><text x="0.2500%" y="831.50"></text></g><g><title>begin_new_exec (5 samples, 0.33%)</title><rect x="0.0000%" y="805" width="0.3255%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="5"/><text x="0.2500%" y="815.50"></text></g><g><title>perf_event_exec (5 samples, 0.33%)</title><rect x="0.0000%" y="789" width="0.3255%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="5"/><text x="0.2500%" y="799.50"></text></g><g><title>ctx_resched (5 samples, 0.33%)</title><rect x="0.0000%" y="773" width="0.3255%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="5"/><text x="0.2500%" y="783.50"></text></g><g><title>x86_pmu_enable (5 samples, 0.33%)</title><rect x="0.0000%" y="757" width="0.3255%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="5"/><text x="0.2500%" y="767.50"></text></g><g><title>intel_pmu_enable_all (5 samples, 0.33%)</title><rect x="0.0000%" y="741" width="0.3255%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="5"/><text x="0.2500%" y="751.50"></text></g><g><title>native_write_msr (5 samples, 0.33%)</title><rect x="0.0000%" y="725" width="0.3255%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="5"/><text x="0.2500%" y="735.50"></text></g><g><title>__GI___libc_free (17 samples, 1.11%)</title><rect x="0.3255%" y="933" width="1.1068%" height="15" fill="rgb(225,20,46)" fg:x="5" fg:w="17"/><text x="0.5755%" y="943.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.46%)</title><rect x="1.4323%" y="933" width="0.4557%" height="15" fill="rgb(210,31,41)" fg:x="22" fg:w="7"/><text x="1.6823%" y="943.50"></text></g><g><title>_int_free (26 samples, 1.69%)</title><rect x="1.8880%" y="933" width="1.6927%" height="15" fill="rgb(221,200,47)" fg:x="29" fg:w="26"/><text x="2.1380%" y="943.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (8 samples, 0.52%)</title><rect x="3.5807%" y="933" width="0.5208%" height="15" fill="rgb(226,26,5)" fg:x="55" fg:w="8"/><text x="3.8307%" y="943.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.20%)</title><rect x="3.9063%" y="917" width="0.1953%" height="15" fill="rgb(249,33,26)" fg:x="60" fg:w="3"/><text x="4.1562%" y="927.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (3 samples, 0.20%)</title><rect x="3.9063%" y="901" width="0.1953%" height="15" fill="rgb(235,183,28)" fg:x="60" fg:w="3"/><text x="4.1562%" y="911.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (3 samples, 0.20%)</title><rect x="3.9063%" y="885" width="0.1953%" height="15" fill="rgb(221,5,38)" fg:x="60" fg:w="3"/><text x="4.1562%" y="895.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.07%)</title><rect x="4.1016%" y="933" width="0.0651%" height="15" fill="rgb(247,18,42)" fg:x="63" fg:w="1"/><text x="4.3516%" y="943.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.07%)</title><rect x="4.1016%" y="917" width="0.0651%" height="15" fill="rgb(241,131,45)" fg:x="63" fg:w="1"/><text x="4.3516%" y="927.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.07%)</title><rect x="4.1016%" y="901" width="0.0651%" height="15" fill="rgb(249,31,29)" fg:x="63" fg:w="1"/><text x="4.3516%" y="911.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.07%)</title><rect x="4.1016%" y="885" width="0.0651%" height="15" fill="rgb(225,111,53)" fg:x="63" fg:w="1"/><text x="4.3516%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;test_mmmh::Product&gt;&gt; (5 samples, 0.33%)</title><rect x="4.1667%" y="901" width="0.3255%" height="15" fill="rgb(238,160,17)" fg:x="64" fg:w="5"/><text x="4.4167%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.33%)</title><rect x="4.1667%" y="885" width="0.3255%" height="15" fill="rgb(214,148,48)" fg:x="64" fg:w="5"/><text x="4.4167%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;[test_mmmh::Product]&gt; (5 samples, 0.33%)</title><rect x="4.1667%" y="869" width="0.3255%" height="15" fill="rgb(232,36,49)" fg:x="64" fg:w="5"/><text x="4.4167%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;test_mmmh::Product&gt; (5 samples, 0.33%)</title><rect x="4.1667%" y="853" width="0.3255%" height="15" fill="rgb(209,103,24)" fg:x="64" fg:w="5"/><text x="4.4167%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (5 samples, 0.33%)</title><rect x="4.1667%" y="837" width="0.3255%" height="15" fill="rgb(229,88,8)" fg:x="64" fg:w="5"/><text x="4.4167%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (5 samples, 0.33%)</title><rect x="4.1667%" y="821" width="0.3255%" height="15" fill="rgb(213,181,19)" fg:x="64" fg:w="5"/><text x="4.4167%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (5 samples, 0.33%)</title><rect x="4.1667%" y="805" width="0.3255%" height="15" fill="rgb(254,191,54)" fg:x="64" fg:w="5"/><text x="4.4167%" y="815.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.33%)</title><rect x="4.1667%" y="789" width="0.3255%" height="15" fill="rgb(241,83,37)" fg:x="64" fg:w="5"/><text x="4.4167%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.33%)</title><rect x="4.1667%" y="773" width="0.3255%" height="15" fill="rgb(233,36,39)" fg:x="64" fg:w="5"/><text x="4.4167%" y="783.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.33%)</title><rect x="4.1667%" y="757" width="0.3255%" height="15" fill="rgb(226,3,54)" fg:x="64" fg:w="5"/><text x="4.4167%" y="767.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (2 samples, 0.13%)</title><rect x="4.4922%" y="869" width="0.1302%" height="15" fill="rgb(245,192,40)" fg:x="69" fg:w="2"/><text x="4.7422%" y="879.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (2 samples, 0.13%)</title><rect x="4.4922%" y="853" width="0.1302%" height="15" fill="rgb(238,167,29)" fg:x="69" fg:w="2"/><text x="4.7422%" y="863.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (2 samples, 0.13%)</title><rect x="4.4922%" y="837" width="0.1302%" height="15" fill="rgb(232,182,51)" fg:x="69" fg:w="2"/><text x="4.7422%" y="847.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2 samples, 0.13%)</title><rect x="4.4922%" y="821" width="0.1302%" height="15" fill="rgb(231,60,39)" fg:x="69" fg:w="2"/><text x="4.7422%" y="831.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.13%)</title><rect x="4.4922%" y="805" width="0.1302%" height="15" fill="rgb(208,69,12)" fg:x="69" fg:w="2"/><text x="4.7422%" y="815.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.13%)</title><rect x="4.4922%" y="789" width="0.1302%" height="15" fill="rgb(235,93,37)" fg:x="69" fg:w="2"/><text x="4.7422%" y="799.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.13%)</title><rect x="4.4922%" y="773" width="0.1302%" height="15" fill="rgb(213,116,39)" fg:x="69" fg:w="2"/><text x="4.7422%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.13%)</title><rect x="4.4922%" y="757" width="0.1302%" height="15" fill="rgb(222,207,29)" fg:x="69" fg:w="2"/><text x="4.7422%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.13%)</title><rect x="4.4922%" y="741" width="0.1302%" height="15" fill="rgb(206,96,30)" fg:x="69" fg:w="2"/><text x="4.7422%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.13%)</title><rect x="4.4922%" y="725" width="0.1302%" height="15" fill="rgb(218,138,4)" fg:x="69" fg:w="2"/><text x="4.7422%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.13%)</title><rect x="4.4922%" y="709" width="0.1302%" height="15" fill="rgb(250,191,14)" fg:x="69" fg:w="2"/><text x="4.7422%" y="719.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.13%)</title><rect x="4.4922%" y="693" width="0.1302%" height="15" fill="rgb(239,60,40)" fg:x="69" fg:w="2"/><text x="4.7422%" y="703.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.13%)</title><rect x="4.4922%" y="677" width="0.1302%" height="15" fill="rgb(206,27,48)" fg:x="69" fg:w="2"/><text x="4.7422%" y="687.50"></text></g><g><title>[[heap]] (70 samples, 4.56%)</title><rect x="0.3255%" y="949" width="4.5573%" height="15" fill="rgb(225,35,8)" fg:x="5" fg:w="70"/><text x="0.5755%" y="959.50">[[hea..</text></g><g><title>test_mmmh::main (11 samples, 0.72%)</title><rect x="4.1667%" y="933" width="0.7161%" height="15" fill="rgb(250,213,24)" fg:x="64" fg:w="11"/><text x="4.4167%" y="943.50"></text></g><g><title>test_mmmh::update_1 (11 samples, 0.72%)</title><rect x="4.1667%" y="917" width="0.7161%" height="15" fill="rgb(247,123,22)" fg:x="64" fg:w="11"/><text x="4.4167%" y="927.50"></text></g><g><title>test_mmmh::Product::update_product (6 samples, 0.39%)</title><rect x="4.4922%" y="901" width="0.3906%" height="15" fill="rgb(231,138,38)" fg:x="69" fg:w="6"/><text x="4.7422%" y="911.50"></text></g><g><title>test_mmmh::process_production_site (6 samples, 0.39%)</title><rect x="4.4922%" y="885" width="0.3906%" height="15" fill="rgb(231,145,46)" fg:x="69" fg:w="6"/><text x="4.7422%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (4 samples, 0.26%)</title><rect x="4.6224%" y="869" width="0.2604%" height="15" fill="rgb(251,118,11)" fg:x="71" fg:w="4"/><text x="4.8724%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (4 samples, 0.26%)</title><rect x="4.6224%" y="853" width="0.2604%" height="15" fill="rgb(217,147,25)" fg:x="71" fg:w="4"/><text x="4.8724%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (4 samples, 0.26%)</title><rect x="4.6224%" y="837" width="0.2604%" height="15" fill="rgb(247,81,37)" fg:x="71" fg:w="4"/><text x="4.8724%" y="847.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.26%)</title><rect x="4.6224%" y="821" width="0.2604%" height="15" fill="rgb(209,12,38)" fg:x="71" fg:w="4"/><text x="4.8724%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.26%)</title><rect x="4.6224%" y="805" width="0.2604%" height="15" fill="rgb(227,1,9)" fg:x="71" fg:w="4"/><text x="4.8724%" y="815.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.26%)</title><rect x="4.6224%" y="789" width="0.2604%" height="15" fill="rgb(248,47,43)" fg:x="71" fg:w="4"/><text x="4.8724%" y="799.50"></text></g><g><title>[libc.so.6] (3 samples, 0.20%)</title><rect x="4.8828%" y="933" width="0.1953%" height="15" fill="rgb(221,10,30)" fg:x="75" fg:w="3"/><text x="5.1328%" y="943.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.46%)</title><rect x="5.0781%" y="933" width="0.4557%" height="15" fill="rgb(210,229,1)" fg:x="78" fg:w="7"/><text x="5.3281%" y="943.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.13%)</title><rect x="5.5339%" y="933" width="0.1302%" height="15" fill="rgb(222,148,37)" fg:x="85" fg:w="2"/><text x="5.7839%" y="943.50"></text></g><g><title>__rdl_realloc (1 samples, 0.07%)</title><rect x="5.6641%" y="933" width="0.0651%" height="15" fill="rgb(234,67,33)" fg:x="87" fg:w="1"/><text x="5.9141%" y="943.50"></text></g><g><title>[[stack]] (17 samples, 1.11%)</title><rect x="4.8828%" y="949" width="1.1068%" height="15" fill="rgb(247,98,35)" fg:x="75" fg:w="17"/><text x="5.1328%" y="959.50"></text></g><g><title>_int_realloc (4 samples, 0.26%)</title><rect x="5.7292%" y="933" width="0.2604%" height="15" fill="rgb(247,138,52)" fg:x="88" fg:w="4"/><text x="5.9792%" y="943.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.20%)</title><rect x="5.9896%" y="933" width="0.1953%" height="15" fill="rgb(213,79,30)" fg:x="92" fg:w="3"/><text x="6.2396%" y="943.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.20%)</title><rect x="5.9896%" y="917" width="0.1953%" height="15" fill="rgb(246,177,23)" fg:x="92" fg:w="3"/><text x="6.2396%" y="927.50"></text></g><g><title>[anon] (7 samples, 0.46%)</title><rect x="5.9896%" y="949" width="0.4557%" height="15" fill="rgb(230,62,27)" fg:x="92" fg:w="7"/><text x="6.2396%" y="959.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.26%)</title><rect x="6.1849%" y="933" width="0.2604%" height="15" fill="rgb(216,154,8)" fg:x="95" fg:w="4"/><text x="6.4349%" y="943.50"></text></g><g><title>[libc.so.6] (29 samples, 1.89%)</title><rect x="6.4453%" y="949" width="1.8880%" height="15" fill="rgb(244,35,45)" fg:x="99" fg:w="29"/><text x="6.6953%" y="959.50">[..</text></g><g><title>_int_malloc (29 samples, 1.89%)</title><rect x="6.4453%" y="933" width="1.8880%" height="15" fill="rgb(251,115,12)" fg:x="99" fg:w="29"/><text x="6.6953%" y="943.50">_..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (9 samples, 0.59%)</title><rect x="8.3333%" y="757" width="0.5859%" height="15" fill="rgb(240,54,50)" fg:x="128" fg:w="9"/><text x="8.5833%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (9 samples, 0.59%)</title><rect x="8.3333%" y="741" width="0.5859%" height="15" fill="rgb(233,84,52)" fg:x="128" fg:w="9"/><text x="8.5833%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (9 samples, 0.59%)</title><rect x="8.3333%" y="725" width="0.5859%" height="15" fill="rgb(207,117,47)" fg:x="128" fg:w="9"/><text x="8.5833%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9 samples, 0.59%)</title><rect x="8.3333%" y="709" width="0.5859%" height="15" fill="rgb(249,43,39)" fg:x="128" fg:w="9"/><text x="8.5833%" y="719.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 0.59%)</title><rect x="8.3333%" y="693" width="0.5859%" height="15" fill="rgb(209,38,44)" fg:x="128" fg:w="9"/><text x="8.5833%" y="703.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 0.59%)</title><rect x="8.3333%" y="677" width="0.5859%" height="15" fill="rgb(236,212,23)" fg:x="128" fg:w="9"/><text x="8.5833%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (20 samples, 1.30%)</title><rect x="8.3333%" y="933" width="1.3021%" height="15" fill="rgb(242,79,21)" fg:x="128" fg:w="20"/><text x="8.5833%" y="943.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (20 samples, 1.30%)</title><rect x="8.3333%" y="917" width="1.3021%" height="15" fill="rgb(211,96,35)" fg:x="128" fg:w="20"/><text x="8.5833%" y="927.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (20 samples, 1.30%)</title><rect x="8.3333%" y="901" width="1.3021%" height="15" fill="rgb(253,215,40)" fg:x="128" fg:w="20"/><text x="8.5833%" y="911.50"></text></g><g><title>test_mmmh::main::{{closure}} (20 samples, 1.30%)</title><rect x="8.3333%" y="885" width="1.3021%" height="15" fill="rgb(211,81,21)" fg:x="128" fg:w="20"/><text x="8.5833%" y="895.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (20 samples, 1.30%)</title><rect x="8.3333%" y="869" width="1.3021%" height="15" fill="rgb(208,190,38)" fg:x="128" fg:w="20"/><text x="8.5833%" y="879.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (20 samples, 1.30%)</title><rect x="8.3333%" y="853" width="1.3021%" height="15" fill="rgb(235,213,38)" fg:x="128" fg:w="20"/><text x="8.5833%" y="863.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (20 samples, 1.30%)</title><rect x="8.3333%" y="837" width="1.3021%" height="15" fill="rgb(237,122,38)" fg:x="128" fg:w="20"/><text x="8.5833%" y="847.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (20 samples, 1.30%)</title><rect x="8.3333%" y="821" width="1.3021%" height="15" fill="rgb(244,218,35)" fg:x="128" fg:w="20"/><text x="8.5833%" y="831.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (20 samples, 1.30%)</title><rect x="8.3333%" y="805" width="1.3021%" height="15" fill="rgb(240,68,47)" fg:x="128" fg:w="20"/><text x="8.5833%" y="815.50"></text></g><g><title>alloc::slice::hack::to_vec (20 samples, 1.30%)</title><rect x="8.3333%" y="789" width="1.3021%" height="15" fill="rgb(210,16,53)" fg:x="128" fg:w="20"/><text x="8.5833%" y="799.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (20 samples, 1.30%)</title><rect x="8.3333%" y="773" width="1.3021%" height="15" fill="rgb(235,124,12)" fg:x="128" fg:w="20"/><text x="8.5833%" y="783.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (11 samples, 0.72%)</title><rect x="8.9193%" y="757" width="0.7161%" height="15" fill="rgb(224,169,11)" fg:x="137" fg:w="11"/><text x="9.1693%" y="767.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (11 samples, 0.72%)</title><rect x="8.9193%" y="741" width="0.7161%" height="15" fill="rgb(250,166,2)" fg:x="137" fg:w="11"/><text x="9.1693%" y="751.50"></text></g><g><title>[libc.so.6] (7 samples, 0.46%)</title><rect x="9.6354%" y="933" width="0.4557%" height="15" fill="rgb(242,216,29)" fg:x="148" fg:w="7"/><text x="9.8854%" y="943.50"></text></g><g><title>__GI___libc_free (12 samples, 0.78%)</title><rect x="10.0911%" y="933" width="0.7812%" height="15" fill="rgb(230,116,27)" fg:x="155" fg:w="12"/><text x="10.3411%" y="943.50"></text></g><g><title>__GI___libc_malloc (19 samples, 1.24%)</title><rect x="10.8724%" y="933" width="1.2370%" height="15" fill="rgb(228,99,48)" fg:x="167" fg:w="19"/><text x="11.1224%" y="943.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.13%)</title><rect x="12.1094%" y="933" width="0.1302%" height="15" fill="rgb(253,11,6)" fg:x="186" fg:w="2"/><text x="12.3594%" y="943.50"></text></g><g><title>__rdl_realloc (3 samples, 0.20%)</title><rect x="12.2396%" y="933" width="0.1953%" height="15" fill="rgb(247,143,39)" fg:x="188" fg:w="3"/><text x="12.4896%" y="943.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (3 samples, 0.20%)</title><rect x="12.2396%" y="917" width="0.1953%" height="15" fill="rgb(236,97,10)" fg:x="188" fg:w="3"/><text x="12.4896%" y="927.50"></text></g><g><title>_int_free (5 samples, 0.33%)</title><rect x="12.4349%" y="933" width="0.3255%" height="15" fill="rgb(233,208,19)" fg:x="191" fg:w="5"/><text x="12.6849%" y="943.50"></text></g><g><title>_int_malloc (7 samples, 0.46%)</title><rect x="12.7604%" y="933" width="0.4557%" height="15" fill="rgb(216,164,2)" fg:x="196" fg:w="7"/><text x="13.0104%" y="943.50"></text></g><g><title>[unknown] (81 samples, 5.27%)</title><rect x="8.3333%" y="949" width="5.2734%" height="15" fill="rgb(220,129,5)" fg:x="128" fg:w="81"/><text x="8.5833%" y="959.50">[unkno..</text></g><g><title>_int_realloc (6 samples, 0.39%)</title><rect x="13.2161%" y="933" width="0.3906%" height="15" fill="rgb(242,17,10)" fg:x="203" fg:w="6"/><text x="13.4661%" y="943.50"></text></g><g><title>down_read_trylock (2 samples, 0.13%)</title><rect x="16.0807%" y="437" width="0.1302%" height="15" fill="rgb(242,107,0)" fg:x="247" fg:w="2"/><text x="16.3307%" y="447.50"></text></g><g><title>find_vma (2 samples, 0.13%)</title><rect x="16.2109%" y="437" width="0.1302%" height="15" fill="rgb(251,28,31)" fg:x="249" fg:w="2"/><text x="16.4609%" y="447.50"></text></g><g><title>vmacache_find (2 samples, 0.13%)</title><rect x="16.2109%" y="421" width="0.1302%" height="15" fill="rgb(233,223,10)" fg:x="249" fg:w="2"/><text x="16.4609%" y="431.50"></text></g><g><title>__count_memcg_events (2 samples, 0.13%)</title><rect x="16.4714%" y="421" width="0.1302%" height="15" fill="rgb(215,21,27)" fg:x="253" fg:w="2"/><text x="16.7214%" y="431.50"></text></g><g><title>cgroup_rstat_updated (1 samples, 0.07%)</title><rect x="16.5365%" y="405" width="0.0651%" height="15" fill="rgb(232,23,21)" fg:x="254" fg:w="1"/><text x="16.7865%" y="415.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.07%)</title><rect x="17.0573%" y="389" width="0.0651%" height="15" fill="rgb(244,5,23)" fg:x="262" fg:w="1"/><text x="17.3073%" y="399.50"></text></g><g><title>__cgroup_throttle_swaprate (2 samples, 0.13%)</title><rect x="17.2526%" y="373" width="0.1302%" height="15" fill="rgb(226,81,46)" fg:x="265" fg:w="2"/><text x="17.5026%" y="383.50"></text></g><g><title>arch_local_irq_enable (1 samples, 0.07%)</title><rect x="18.6849%" y="341" width="0.0651%" height="15" fill="rgb(247,70,30)" fg:x="287" fg:w="1"/><text x="18.9349%" y="351.50"></text></g><g><title>mem_cgroup_charge_statistics.constprop.0 (5 samples, 0.33%)</title><rect x="18.7500%" y="341" width="0.3255%" height="15" fill="rgb(212,68,19)" fg:x="288" fg:w="5"/><text x="19.0000%" y="351.50"></text></g><g><title>cgroup_rstat_updated (2 samples, 0.13%)</title><rect x="18.9453%" y="325" width="0.1302%" height="15" fill="rgb(240,187,13)" fg:x="291" fg:w="2"/><text x="19.1953%" y="335.50"></text></g><g><title>memcg_check_events (1 samples, 0.07%)</title><rect x="19.0755%" y="341" width="0.0651%" height="15" fill="rgb(223,113,26)" fg:x="293" fg:w="1"/><text x="19.3255%" y="351.50"></text></g><g><title>__mem_cgroup_threshold (1 samples, 0.07%)</title><rect x="19.0755%" y="325" width="0.0651%" height="15" fill="rgb(206,192,2)" fg:x="293" fg:w="1"/><text x="19.3255%" y="335.50"></text></g><g><title>charge_memcg (37 samples, 2.41%)</title><rect x="17.3828%" y="357" width="2.4089%" height="15" fill="rgb(241,108,4)" fg:x="267" fg:w="37"/><text x="17.6328%" y="367.50">ch..</text></g><g><title>try_charge_memcg (10 samples, 0.65%)</title><rect x="19.1406%" y="341" width="0.6510%" height="15" fill="rgb(247,173,49)" fg:x="294" fg:w="10"/><text x="19.3906%" y="351.50"></text></g><g><title>page_counter_try_charge (1 samples, 0.07%)</title><rect x="19.7266%" y="325" width="0.0651%" height="15" fill="rgb(224,114,35)" fg:x="303" fg:w="1"/><text x="19.9766%" y="335.50"></text></g><g><title>__mem_cgroup_charge (40 samples, 2.60%)</title><rect x="17.3828%" y="373" width="2.6042%" height="15" fill="rgb(245,159,27)" fg:x="267" fg:w="40"/><text x="17.6328%" y="383.50">__..</text></g><g><title>get_mem_cgroup_from_mm (3 samples, 0.20%)</title><rect x="19.7917%" y="357" width="0.1953%" height="15" fill="rgb(245,172,44)" fg:x="304" fg:w="3"/><text x="20.0417%" y="367.50"></text></g><g><title>clear_page_erms (7 samples, 0.46%)</title><rect x="20.4427%" y="325" width="0.4557%" height="15" fill="rgb(236,23,11)" fg:x="314" fg:w="7"/><text x="20.6927%" y="335.50"></text></g><g><title>get_page_from_freelist (14 samples, 0.91%)</title><rect x="20.3125%" y="341" width="0.9115%" height="15" fill="rgb(205,117,38)" fg:x="312" fg:w="14"/><text x="20.5625%" y="351.50"></text></g><g><title>rmqueue (5 samples, 0.33%)</title><rect x="20.8984%" y="325" width="0.3255%" height="15" fill="rgb(237,72,25)" fg:x="321" fg:w="5"/><text x="21.1484%" y="335.50"></text></g><g><title>rmqueue_bulk (1 samples, 0.07%)</title><rect x="21.1589%" y="309" width="0.0651%" height="15" fill="rgb(244,70,9)" fg:x="325" fg:w="1"/><text x="21.4089%" y="319.50"></text></g><g><title>__alloc_pages (19 samples, 1.24%)</title><rect x="20.1172%" y="357" width="1.2370%" height="15" fill="rgb(217,125,39)" fg:x="309" fg:w="19"/><text x="20.3672%" y="367.50"></text></g><g><title>kernel_init_free_pages.part.0 (2 samples, 0.13%)</title><rect x="21.2240%" y="341" width="0.1302%" height="15" fill="rgb(235,36,10)" fg:x="326" fg:w="2"/><text x="21.4740%" y="351.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.07%)</title><rect x="21.3542%" y="357" width="0.0651%" height="15" fill="rgb(251,123,47)" fg:x="328" fg:w="1"/><text x="21.6042%" y="367.50"></text></g><g><title>alloc_pages_vma (23 samples, 1.50%)</title><rect x="19.9870%" y="373" width="1.4974%" height="15" fill="rgb(221,13,13)" fg:x="307" fg:w="23"/><text x="20.2370%" y="383.50"></text></g><g><title>policy_nodemask (1 samples, 0.07%)</title><rect x="21.4193%" y="357" width="0.0651%" height="15" fill="rgb(238,131,9)" fg:x="329" fg:w="1"/><text x="21.6693%" y="367.50"></text></g><g><title>__mod_memcg_lruvec_state (2 samples, 0.13%)</title><rect x="21.5495%" y="293" width="0.1302%" height="15" fill="rgb(211,50,8)" fg:x="331" fg:w="2"/><text x="21.7995%" y="303.50"></text></g><g><title>__mod_lruvec_state (3 samples, 0.20%)</title><rect x="21.5495%" y="309" width="0.1953%" height="15" fill="rgb(245,182,24)" fg:x="331" fg:w="3"/><text x="21.7995%" y="319.50"></text></g><g><title>__mod_node_page_state (1 samples, 0.07%)</title><rect x="21.6797%" y="293" width="0.0651%" height="15" fill="rgb(242,14,37)" fg:x="333" fg:w="1"/><text x="21.9297%" y="303.50"></text></g><g><title>__mod_memcg_lruvec_state (1 samples, 0.07%)</title><rect x="21.7448%" y="309" width="0.0651%" height="15" fill="rgb(246,228,12)" fg:x="334" fg:w="1"/><text x="21.9948%" y="319.50"></text></g><g><title>page_mapping (2 samples, 0.13%)</title><rect x="21.8099%" y="309" width="0.1302%" height="15" fill="rgb(213,55,15)" fg:x="335" fg:w="2"/><text x="22.0599%" y="319.50"></text></g><g><title>__pagevec_lru_add_fn (7 samples, 0.46%)</title><rect x="21.5495%" y="325" width="0.4557%" height="15" fill="rgb(209,9,3)" fg:x="331" fg:w="7"/><text x="21.7995%" y="335.50"></text></g><g><title>rcu_read_unlock_strict (1 samples, 0.07%)</title><rect x="21.9401%" y="309" width="0.0651%" height="15" fill="rgb(230,59,30)" fg:x="337" fg:w="1"/><text x="22.1901%" y="319.50"></text></g><g><title>lock_page_lruvec_irqsave (1 samples, 0.07%)</title><rect x="22.0052%" y="325" width="0.0651%" height="15" fill="rgb(209,121,21)" fg:x="338" fg:w="1"/><text x="22.2552%" y="335.50"></text></g><g><title>_raw_spin_lock_irqsave (1 samples, 0.07%)</title><rect x="22.0052%" y="309" width="0.0651%" height="15" fill="rgb(220,109,13)" fg:x="338" fg:w="1"/><text x="22.2552%" y="319.50"></text></g><g><title>lru_cache_add_inactive_or_unevictable (11 samples, 0.72%)</title><rect x="21.4844%" y="373" width="0.7161%" height="15" fill="rgb(232,18,1)" fg:x="330" fg:w="11"/><text x="21.7344%" y="383.50"></text></g><g><title>lru_cache_add (10 samples, 0.65%)</title><rect x="21.5495%" y="357" width="0.6510%" height="15" fill="rgb(215,41,42)" fg:x="331" fg:w="10"/><text x="21.7995%" y="367.50"></text></g><g><title>__pagevec_lru_add (10 samples, 0.65%)</title><rect x="21.5495%" y="341" width="0.6510%" height="15" fill="rgb(224,123,36)" fg:x="331" fg:w="10"/><text x="21.7995%" y="351.50"></text></g><g><title>release_pages (2 samples, 0.13%)</title><rect x="22.0703%" y="325" width="0.1302%" height="15" fill="rgb(240,125,3)" fg:x="339" fg:w="2"/><text x="22.3203%" y="335.50"></text></g><g><title>native_set_pte (1 samples, 0.07%)</title><rect x="22.2005%" y="373" width="0.0651%" height="15" fill="rgb(205,98,50)" fg:x="341" fg:w="1"/><text x="22.4505%" y="383.50"></text></g><g><title>__mod_lruvec_page_state (2 samples, 0.13%)</title><rect x="22.2656%" y="357" width="0.1302%" height="15" fill="rgb(205,185,37)" fg:x="342" fg:w="2"/><text x="22.5156%" y="367.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.07%)</title><rect x="22.3307%" y="341" width="0.0651%" height="15" fill="rgb(238,207,15)" fg:x="343" fg:w="1"/><text x="22.5807%" y="351.50"></text></g><g><title>__mod_memcg_lruvec_state (1 samples, 0.07%)</title><rect x="22.3307%" y="325" width="0.0651%" height="15" fill="rgb(213,199,42)" fg:x="343" fg:w="1"/><text x="22.5807%" y="335.50"></text></g><g><title>do_anonymous_page (82 samples, 5.34%)</title><rect x="17.1224%" y="389" width="5.3385%" height="15" fill="rgb(235,201,11)" fg:x="263" fg:w="82"/><text x="17.3724%" y="399.50">do_anon..</text></g><g><title>page_add_new_anon_rmap (3 samples, 0.20%)</title><rect x="22.2656%" y="373" width="0.1953%" height="15" fill="rgb(207,46,11)" fg:x="342" fg:w="3"/><text x="22.5156%" y="383.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.07%)</title><rect x="22.3958%" y="357" width="0.0651%" height="15" fill="rgb(241,35,35)" fg:x="344" fg:w="1"/><text x="22.6458%" y="367.50"></text></g><g><title>handle_pte_fault (86 samples, 5.60%)</title><rect x="16.9271%" y="405" width="5.5990%" height="15" fill="rgb(243,32,47)" fg:x="260" fg:w="86"/><text x="17.1771%" y="415.50">handle_..</text></g><g><title>pmd_page_vaddr (1 samples, 0.07%)</title><rect x="22.4609%" y="389" width="0.0651%" height="15" fill="rgb(247,202,23)" fg:x="345" fg:w="1"/><text x="22.7109%" y="399.50"></text></g><g><title>do_user_addr_fault (102 samples, 6.64%)</title><rect x="15.9505%" y="453" width="6.6406%" height="15" fill="rgb(219,102,11)" fg:x="245" fg:w="102"/><text x="16.2005%" y="463.50">do_user_a..</text></g><g><title>handle_mm_fault (96 samples, 6.25%)</title><rect x="16.3411%" y="437" width="6.2500%" height="15" fill="rgb(243,110,44)" fg:x="251" fg:w="96"/><text x="16.5911%" y="447.50">handle_m..</text></g><g><title>__handle_mm_fault (92 samples, 5.99%)</title><rect x="16.6016%" y="421" width="5.9896%" height="15" fill="rgb(222,74,54)" fg:x="255" fg:w="92"/><text x="16.8516%" y="431.50">__handle..</text></g><g><title>pud_val (1 samples, 0.07%)</title><rect x="22.5260%" y="405" width="0.0651%" height="15" fill="rgb(216,99,12)" fg:x="346" fg:w="1"/><text x="22.7760%" y="415.50"></text></g><g><title>down_read_trylock (1 samples, 0.07%)</title><rect x="22.5911%" y="453" width="0.0651%" height="15" fill="rgb(226,22,26)" fg:x="347" fg:w="1"/><text x="22.8411%" y="463.50"></text></g><g><title>exit_to_user_mode_prepare (1 samples, 0.07%)</title><rect x="22.6562%" y="437" width="0.0651%" height="15" fill="rgb(217,163,10)" fg:x="348" fg:w="1"/><text x="22.9062%" y="447.50"></text></g><g><title>irqentry_exit (2 samples, 0.13%)</title><rect x="22.6562%" y="453" width="0.1302%" height="15" fill="rgb(213,25,53)" fg:x="348" fg:w="2"/><text x="22.9062%" y="463.50"></text></g><g><title>irqentry_exit_to_user_mode (1 samples, 0.07%)</title><rect x="22.7214%" y="437" width="0.0651%" height="15" fill="rgb(252,105,26)" fg:x="349" fg:w="1"/><text x="22.9714%" y="447.50"></text></g><g><title>exit_to_user_mode_prepare (1 samples, 0.07%)</title><rect x="22.7214%" y="421" width="0.0651%" height="15" fill="rgb(220,39,43)" fg:x="349" fg:w="1"/><text x="22.9714%" y="431.50"></text></g><g><title>asm_exc_page_fault (111 samples, 7.23%)</title><rect x="15.8203%" y="485" width="7.2266%" height="15" fill="rgb(229,68,48)" fg:x="243" fg:w="111"/><text x="16.0703%" y="495.50">asm_exc_pa..</text></g><g><title>exc_page_fault (110 samples, 7.16%)</title><rect x="15.8854%" y="469" width="7.1615%" height="15" fill="rgb(252,8,32)" fg:x="244" fg:w="110"/><text x="16.1354%" y="479.50">exc_page_f..</text></g><g><title>up_read (4 samples, 0.26%)</title><rect x="22.7865%" y="453" width="0.2604%" height="15" fill="rgb(223,20,43)" fg:x="350" fg:w="4"/><text x="23.0365%" y="463.50"></text></g><g><title>error_entry (2 samples, 0.13%)</title><rect x="23.0469%" y="485" width="0.1302%" height="15" fill="rgb(229,81,49)" fg:x="354" fg:w="2"/><text x="23.2969%" y="495.50"></text></g><g><title>error_return (1 samples, 0.07%)</title><rect x="23.1771%" y="485" width="0.0651%" height="15" fill="rgb(236,28,36)" fg:x="356" fg:w="1"/><text x="23.4271%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (172 samples, 11.20%)</title><rect x="13.6068%" y="533" width="11.1979%" height="15" fill="rgb(249,185,26)" fg:x="209" fg:w="172"/><text x="13.8568%" y="543.50">core::iter::trai..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend::{{closure}} (172 samples, 11.20%)</title><rect x="13.6068%" y="517" width="11.1979%" height="15" fill="rgb(249,174,33)" fg:x="209" fg:w="172"/><text x="13.8568%" y="527.50">&lt;alloc::vec::Vec..</text></g><g><title>core::ptr::write (172 samples, 11.20%)</title><rect x="13.6068%" y="501" width="11.1979%" height="15" fill="rgb(233,201,37)" fg:x="209" fg:w="172"/><text x="13.8568%" y="511.50">core::ptr::write</text></g><g><title>sync_regs (24 samples, 1.56%)</title><rect x="23.2422%" y="485" width="1.5625%" height="15" fill="rgb(221,78,26)" fg:x="357" fg:w="24"/><text x="23.4922%" y="495.50"></text></g><g><title>alloc_perturb (8 samples, 0.52%)</title><rect x="50.2604%" y="277" width="0.5208%" height="15" fill="rgb(250,127,30)" fg:x="772" fg:w="8"/><text x="50.5104%" y="287.50"></text></g><g><title>__cond_resched (1 samples, 0.07%)</title><rect x="50.8464%" y="245" width="0.0651%" height="15" fill="rgb(230,49,44)" fg:x="781" fg:w="1"/><text x="51.0964%" y="255.50"></text></g><g><title>down_read_trylock (2 samples, 0.13%)</title><rect x="51.1068%" y="229" width="0.1302%" height="15" fill="rgb(229,67,23)" fg:x="785" fg:w="2"/><text x="51.3568%" y="239.50"></text></g><g><title>find_vma (1 samples, 0.07%)</title><rect x="51.2370%" y="229" width="0.0651%" height="15" fill="rgb(249,83,47)" fg:x="787" fg:w="1"/><text x="51.4870%" y="239.50"></text></g><g><title>vmacache_find (1 samples, 0.07%)</title><rect x="51.2370%" y="213" width="0.0651%" height="15" fill="rgb(215,43,3)" fg:x="787" fg:w="1"/><text x="51.4870%" y="223.50"></text></g><g><title>__count_memcg_events (1 samples, 0.07%)</title><rect x="51.5625%" y="213" width="0.0651%" height="15" fill="rgb(238,154,13)" fg:x="792" fg:w="1"/><text x="51.8125%" y="223.50"></text></g><g><title>_raw_spin_lock (2 samples, 0.13%)</title><rect x="52.3438%" y="181" width="0.1302%" height="15" fill="rgb(219,56,2)" fg:x="804" fg:w="2"/><text x="52.5938%" y="191.50"></text></g><g><title>__cgroup_throttle_swaprate (4 samples, 0.26%)</title><rect x="52.9948%" y="165" width="0.2604%" height="15" fill="rgb(233,0,4)" fg:x="814" fg:w="4"/><text x="53.2448%" y="175.50"></text></g><g><title>arch_local_irq_enable (2 samples, 0.13%)</title><rect x="54.3620%" y="133" width="0.1302%" height="15" fill="rgb(235,30,7)" fg:x="835" fg:w="2"/><text x="54.6120%" y="143.50"></text></g><g><title>mem_cgroup_charge_statistics.constprop.0 (7 samples, 0.46%)</title><rect x="54.4922%" y="133" width="0.4557%" height="15" fill="rgb(250,79,13)" fg:x="837" fg:w="7"/><text x="54.7422%" y="143.50"></text></g><g><title>cgroup_rstat_updated (3 samples, 0.20%)</title><rect x="54.7526%" y="117" width="0.1953%" height="15" fill="rgb(211,146,34)" fg:x="841" fg:w="3"/><text x="55.0026%" y="127.50"></text></g><g><title>charge_memcg (36 samples, 2.34%)</title><rect x="53.3203%" y="149" width="2.3438%" height="15" fill="rgb(228,22,38)" fg:x="819" fg:w="36"/><text x="53.5703%" y="159.50">c..</text></g><g><title>try_charge_memcg (11 samples, 0.72%)</title><rect x="54.9479%" y="133" width="0.7161%" height="15" fill="rgb(235,168,5)" fg:x="844" fg:w="11"/><text x="55.1979%" y="143.50"></text></g><g><title>arch_local_irq_enable (1 samples, 0.07%)</title><rect x="55.5990%" y="117" width="0.0651%" height="15" fill="rgb(221,155,16)" fg:x="854" fg:w="1"/><text x="55.8490%" y="127.50"></text></g><g><title>get_mem_cgroup_from_mm (3 samples, 0.20%)</title><rect x="55.6641%" y="149" width="0.1953%" height="15" fill="rgb(215,215,53)" fg:x="855" fg:w="3"/><text x="55.9141%" y="159.50"></text></g><g><title>rcu_read_unlock_strict (1 samples, 0.07%)</title><rect x="55.7943%" y="133" width="0.0651%" height="15" fill="rgb(223,4,10)" fg:x="857" fg:w="1"/><text x="56.0443%" y="143.50"></text></g><g><title>__mem_cgroup_charge (41 samples, 2.67%)</title><rect x="53.2552%" y="165" width="2.6693%" height="15" fill="rgb(234,103,6)" fg:x="818" fg:w="41"/><text x="53.5052%" y="175.50">__..</text></g><g><title>try_charge_memcg (1 samples, 0.07%)</title><rect x="55.8594%" y="149" width="0.0651%" height="15" fill="rgb(227,97,0)" fg:x="858" fg:w="1"/><text x="56.1094%" y="159.50"></text></g><g><title>_find_first_bit (1 samples, 0.07%)</title><rect x="55.9245%" y="165" width="0.0651%" height="15" fill="rgb(234,150,53)" fg:x="859" fg:w="1"/><text x="56.1745%" y="175.50"></text></g><g><title>add_mm_counter_fast (2 samples, 0.13%)</title><rect x="55.9896%" y="165" width="0.1302%" height="15" fill="rgb(228,201,54)" fg:x="860" fg:w="2"/><text x="56.2396%" y="175.50"></text></g><g><title>__next_zones_zonelist (2 samples, 0.13%)</title><rect x="56.4453%" y="133" width="0.1302%" height="15" fill="rgb(222,22,37)" fg:x="867" fg:w="2"/><text x="56.6953%" y="143.50"></text></g><g><title>__zone_watermark_ok (3 samples, 0.20%)</title><rect x="56.6406%" y="117" width="0.1953%" height="15" fill="rgb(237,53,32)" fg:x="870" fg:w="3"/><text x="56.8906%" y="127.50"></text></g><g><title>clear_page_erms (11 samples, 0.72%)</title><rect x="56.8359%" y="117" width="0.7161%" height="15" fill="rgb(233,25,53)" fg:x="873" fg:w="11"/><text x="57.0859%" y="127.50"></text></g><g><title>kernel_init_free_pages.part.0 (3 samples, 0.20%)</title><rect x="57.5521%" y="117" width="0.1953%" height="15" fill="rgb(210,40,34)" fg:x="884" fg:w="3"/><text x="57.8021%" y="127.50"></text></g><g><title>alloc_pages_vma (34 samples, 2.21%)</title><rect x="56.1198%" y="165" width="2.2135%" height="15" fill="rgb(241,220,44)" fg:x="862" fg:w="34"/><text x="56.3698%" y="175.50">a..</text></g><g><title>__alloc_pages (32 samples, 2.08%)</title><rect x="56.2500%" y="149" width="2.0833%" height="15" fill="rgb(235,28,35)" fg:x="864" fg:w="32"/><text x="56.5000%" y="159.50">_..</text></g><g><title>get_page_from_freelist (27 samples, 1.76%)</title><rect x="56.5755%" y="133" width="1.7578%" height="15" fill="rgb(210,56,17)" fg:x="869" fg:w="27"/><text x="56.8255%" y="143.50"></text></g><g><title>rmqueue (9 samples, 0.59%)</title><rect x="57.7474%" y="117" width="0.5859%" height="15" fill="rgb(224,130,29)" fg:x="887" fg:w="9"/><text x="57.9974%" y="127.50"></text></g><g><title>rmqueue_bulk (4 samples, 0.26%)</title><rect x="58.0729%" y="101" width="0.2604%" height="15" fill="rgb(235,212,8)" fg:x="892" fg:w="4"/><text x="58.3229%" y="111.50"></text></g><g><title>kthread_blkcg (2 samples, 0.13%)</title><rect x="58.3333%" y="165" width="0.1302%" height="15" fill="rgb(223,33,50)" fg:x="896" fg:w="2"/><text x="58.5833%" y="175.50"></text></g><g><title>__lock_text_start (1 samples, 0.07%)</title><rect x="58.8542%" y="117" width="0.0651%" height="15" fill="rgb(219,149,13)" fg:x="904" fg:w="1"/><text x="59.1042%" y="127.50"></text></g><g><title>asm_common_interrupt (1 samples, 0.07%)</title><rect x="58.8542%" y="101" width="0.0651%" height="15" fill="rgb(250,156,29)" fg:x="904" fg:w="1"/><text x="59.1042%" y="111.50"></text></g><g><title>common_interrupt (1 samples, 0.07%)</title><rect x="58.8542%" y="85" width="0.0651%" height="15" fill="rgb(216,193,19)" fg:x="904" fg:w="1"/><text x="59.1042%" y="95.50"></text></g><g><title>__common_interrupt (1 samples, 0.07%)</title><rect x="58.8542%" y="69" width="0.0651%" height="15" fill="rgb(216,135,14)" fg:x="904" fg:w="1"/><text x="59.1042%" y="79.50"></text></g><g><title>handle_fasteoi_irq (1 samples, 0.07%)</title><rect x="58.8542%" y="53" width="0.0651%" height="15" fill="rgb(241,47,5)" fg:x="904" fg:w="1"/><text x="59.1042%" y="63.50"></text></g><g><title>mask_ioapic_irq (1 samples, 0.07%)</title><rect x="58.8542%" y="37" width="0.0651%" height="15" fill="rgb(233,42,35)" fg:x="904" fg:w="1"/><text x="59.1042%" y="47.50"></text></g><g><title>__pagevec_lru_add_fn (12 samples, 0.78%)</title><rect x="58.9193%" y="117" width="0.7812%" height="15" fill="rgb(231,13,6)" fg:x="905" fg:w="12"/><text x="59.1693%" y="127.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.07%)</title><rect x="59.6354%" y="101" width="0.0651%" height="15" fill="rgb(207,181,40)" fg:x="916" fg:w="1"/><text x="59.8854%" y="111.50"></text></g><g><title>__mod_memcg_lruvec_state (1 samples, 0.07%)</title><rect x="59.6354%" y="85" width="0.0651%" height="15" fill="rgb(254,173,49)" fg:x="916" fg:w="1"/><text x="59.8854%" y="95.50"></text></g><g><title>cgroup_rstat_updated (1 samples, 0.07%)</title><rect x="59.6354%" y="69" width="0.0651%" height="15" fill="rgb(221,1,38)" fg:x="916" fg:w="1"/><text x="59.8854%" y="79.50"></text></g><g><title>lru_cache_add_inactive_or_unevictable (21 samples, 1.37%)</title><rect x="58.4635%" y="165" width="1.3672%" height="15" fill="rgb(206,124,46)" fg:x="898" fg:w="21"/><text x="58.7135%" y="175.50"></text></g><g><title>lru_cache_add (20 samples, 1.30%)</title><rect x="58.5286%" y="149" width="1.3021%" height="15" fill="rgb(249,21,11)" fg:x="899" fg:w="20"/><text x="58.7786%" y="159.50"></text></g><g><title>__pagevec_lru_add (18 samples, 1.17%)</title><rect x="58.6589%" y="133" width="1.1719%" height="15" fill="rgb(222,201,40)" fg:x="901" fg:w="18"/><text x="58.9089%" y="143.50"></text></g><g><title>release_pages (2 samples, 0.13%)</title><rect x="59.7005%" y="117" width="0.1302%" height="15" fill="rgb(235,61,29)" fg:x="917" fg:w="2"/><text x="59.9505%" y="127.50"></text></g><g><title>__mod_memcg_lruvec_state (3 samples, 0.20%)</title><rect x="59.9609%" y="117" width="0.1953%" height="15" fill="rgb(219,207,3)" fg:x="921" fg:w="3"/><text x="60.2109%" y="127.50"></text></g><g><title>__mod_lruvec_page_state (7 samples, 0.46%)</title><rect x="59.8307%" y="149" width="0.4557%" height="15" fill="rgb(222,56,46)" fg:x="919" fg:w="7"/><text x="60.0807%" y="159.50"></text></g><g><title>__mod_lruvec_state (7 samples, 0.46%)</title><rect x="59.8307%" y="133" width="0.4557%" height="15" fill="rgb(239,76,54)" fg:x="919" fg:w="7"/><text x="60.0807%" y="143.50"></text></g><g><title>__mod_node_page_state (2 samples, 0.13%)</title><rect x="60.1563%" y="117" width="0.1302%" height="15" fill="rgb(231,124,27)" fg:x="924" fg:w="2"/><text x="60.4063%" y="127.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.07%)</title><rect x="60.2865%" y="149" width="0.0651%" height="15" fill="rgb(249,195,6)" fg:x="926" fg:w="1"/><text x="60.5365%" y="159.50"></text></g><g><title>page_add_new_anon_rmap (9 samples, 0.59%)</title><rect x="59.8307%" y="165" width="0.5859%" height="15" fill="rgb(237,174,47)" fg:x="919" fg:w="9"/><text x="60.0807%" y="175.50"></text></g><g><title>__page_set_anon_rmap (1 samples, 0.07%)</title><rect x="60.3516%" y="149" width="0.0651%" height="15" fill="rgb(206,201,31)" fg:x="927" fg:w="1"/><text x="60.6016%" y="159.50"></text></g><g><title>pmd_val (1 samples, 0.07%)</title><rect x="60.4167%" y="165" width="0.0651%" height="15" fill="rgb(231,57,52)" fg:x="928" fg:w="1"/><text x="60.6667%" y="175.50"></text></g><g><title>do_anonymous_page (124 samples, 8.07%)</title><rect x="52.4740%" y="181" width="8.0729%" height="15" fill="rgb(248,177,22)" fg:x="806" fg:w="124"/><text x="52.7240%" y="191.50">do_anonymou..</text></g><g><title>queued_spin_unlock (1 samples, 0.07%)</title><rect x="60.4818%" y="165" width="0.0651%" height="15" fill="rgb(215,211,37)" fg:x="929" fg:w="1"/><text x="60.7318%" y="175.50"></text></g><g><title>handle_pte_fault (131 samples, 8.53%)</title><rect x="52.2135%" y="197" width="8.5286%" height="15" fill="rgb(241,128,51)" fg:x="802" fg:w="131"/><text x="52.4635%" y="207.50">handle_pte_f..</text></g><g><title>pmd_page_vaddr (3 samples, 0.20%)</title><rect x="60.5469%" y="181" width="0.1953%" height="15" fill="rgb(227,165,31)" fg:x="930" fg:w="3"/><text x="60.7969%" y="191.50"></text></g><g><title>__handle_mm_fault (141 samples, 9.18%)</title><rect x="51.6276%" y="213" width="9.1797%" height="15" fill="rgb(228,167,24)" fg:x="793" fg:w="141"/><text x="51.8776%" y="223.50">__handle_mm_f..</text></g><g><title>pud_val (1 samples, 0.07%)</title><rect x="60.7422%" y="197" width="0.0651%" height="15" fill="rgb(228,143,12)" fg:x="933" fg:w="1"/><text x="60.9922%" y="207.50"></text></g><g><title>do_user_addr_fault (153 samples, 9.96%)</title><rect x="50.9115%" y="245" width="9.9609%" height="15" fill="rgb(249,149,8)" fg:x="782" fg:w="153"/><text x="51.1615%" y="255.50">do_user_addr_f..</text></g><g><title>handle_mm_fault (147 samples, 9.57%)</title><rect x="51.3021%" y="229" width="9.5703%" height="15" fill="rgb(243,35,44)" fg:x="788" fg:w="147"/><text x="51.5521%" y="239.50">handle_mm_fault</text></g><g><title>pmd_val (1 samples, 0.07%)</title><rect x="60.8073%" y="213" width="0.0651%" height="15" fill="rgb(246,89,9)" fg:x="934" fg:w="1"/><text x="61.0573%" y="223.50"></text></g><g><title>irqentry_exit (1 samples, 0.07%)</title><rect x="60.8724%" y="245" width="0.0651%" height="15" fill="rgb(233,213,13)" fg:x="935" fg:w="1"/><text x="61.1224%" y="255.50"></text></g><g><title>irqentry_exit_to_user_mode (1 samples, 0.07%)</title><rect x="60.8724%" y="229" width="0.0651%" height="15" fill="rgb(233,141,41)" fg:x="935" fg:w="1"/><text x="61.1224%" y="239.50"></text></g><g><title>exit_to_user_mode_prepare (1 samples, 0.07%)</title><rect x="60.8724%" y="213" width="0.0651%" height="15" fill="rgb(239,167,4)" fg:x="935" fg:w="1"/><text x="61.1224%" y="223.50"></text></g><g><title>asm_exc_page_fault (158 samples, 10.29%)</title><rect x="50.7813%" y="277" width="10.2865%" height="15" fill="rgb(209,217,16)" fg:x="780" fg:w="158"/><text x="51.0313%" y="287.50">asm_exc_page_fa..</text></g><g><title>exc_page_fault (157 samples, 10.22%)</title><rect x="50.8464%" y="261" width="10.2214%" height="15" fill="rgb(219,88,35)" fg:x="781" fg:w="157"/><text x="51.0964%" y="271.50">exc_page_fault</text></g><g><title>up_read (2 samples, 0.13%)</title><rect x="60.9375%" y="245" width="0.1302%" height="15" fill="rgb(220,193,23)" fg:x="936" fg:w="2"/><text x="61.1875%" y="255.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.07%)</title><rect x="61.0677%" y="245" width="0.0651%" height="15" fill="rgb(230,90,52)" fg:x="938" fg:w="1"/><text x="61.3177%" y="255.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.07%)</title><rect x="61.0677%" y="229" width="0.0651%" height="15" fill="rgb(252,106,19)" fg:x="938" fg:w="1"/><text x="61.3177%" y="239.50"></text></g><g><title>tick_program_event (1 samples, 0.07%)</title><rect x="61.0677%" y="213" width="0.0651%" height="15" fill="rgb(206,74,20)" fg:x="938" fg:w="1"/><text x="61.3177%" y="223.50"></text></g><g><title>clockevents_program_event (1 samples, 0.07%)</title><rect x="61.0677%" y="197" width="0.0651%" height="15" fill="rgb(230,138,44)" fg:x="938" fg:w="1"/><text x="61.3177%" y="207.50"></text></g><g><title>lapic_next_deadline (1 samples, 0.07%)</title><rect x="61.0677%" y="181" width="0.0651%" height="15" fill="rgb(235,182,43)" fg:x="938" fg:w="1"/><text x="61.3177%" y="191.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (6 samples, 0.39%)</title><rect x="61.0677%" y="277" width="0.3906%" height="15" fill="rgb(242,16,51)" fg:x="938" fg:w="6"/><text x="61.3177%" y="287.50"></text></g><g><title>sysvec_apic_timer_interrupt (6 samples, 0.39%)</title><rect x="61.0677%" y="261" width="0.3906%" height="15" fill="rgb(248,9,4)" fg:x="938" fg:w="6"/><text x="61.3177%" y="271.50"></text></g><g><title>irqentry_exit (5 samples, 0.33%)</title><rect x="61.1328%" y="245" width="0.3255%" height="15" fill="rgb(210,31,22)" fg:x="939" fg:w="5"/><text x="61.3828%" y="255.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.33%)</title><rect x="61.1328%" y="229" width="0.3255%" height="15" fill="rgb(239,54,39)" fg:x="939" fg:w="5"/><text x="61.3828%" y="239.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.33%)</title><rect x="61.1328%" y="213" width="0.3255%" height="15" fill="rgb(230,99,41)" fg:x="939" fg:w="5"/><text x="61.3828%" y="223.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.33%)</title><rect x="61.1328%" y="197" width="0.3255%" height="15" fill="rgb(253,106,12)" fg:x="939" fg:w="5"/><text x="61.3828%" y="207.50"></text></g><g><title>schedule (5 samples, 0.33%)</title><rect x="61.1328%" y="181" width="0.3255%" height="15" fill="rgb(213,46,41)" fg:x="939" fg:w="5"/><text x="61.3828%" y="191.50"></text></g><g><title>__schedule (5 samples, 0.33%)</title><rect x="61.1328%" y="165" width="0.3255%" height="15" fill="rgb(215,133,35)" fg:x="939" fg:w="5"/><text x="61.3828%" y="175.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.33%)</title><rect x="61.1328%" y="149" width="0.3255%" height="15" fill="rgb(213,28,5)" fg:x="939" fg:w="5"/><text x="61.3828%" y="159.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.33%)</title><rect x="61.1328%" y="133" width="0.3255%" height="15" fill="rgb(215,77,49)" fg:x="939" fg:w="5"/><text x="61.3828%" y="143.50"></text></g><g><title>x86_pmu_enable (5 samples, 0.33%)</title><rect x="61.1328%" y="117" width="0.3255%" height="15" fill="rgb(248,100,22)" fg:x="939" fg:w="5"/><text x="61.3828%" y="127.50"></text></g><g><title>intel_pmu_enable_all (5 samples, 0.33%)</title><rect x="61.1328%" y="101" width="0.3255%" height="15" fill="rgb(208,67,9)" fg:x="939" fg:w="5"/><text x="61.3828%" y="111.50"></text></g><g><title>native_write_msr (5 samples, 0.33%)</title><rect x="61.1328%" y="85" width="0.3255%" height="15" fill="rgb(219,133,21)" fg:x="939" fg:w="5"/><text x="61.3828%" y="95.50"></text></g><g><title>checked_request2size (9 samples, 0.59%)</title><rect x="61.4583%" y="277" width="0.5859%" height="15" fill="rgb(246,46,29)" fg:x="944" fg:w="9"/><text x="61.7083%" y="287.50"></text></g><g><title>sync_regs (20 samples, 1.30%)</title><rect x="62.0443%" y="277" width="1.3021%" height="15" fill="rgb(246,185,52)" fg:x="953" fg:w="20"/><text x="62.2943%" y="287.50"></text></g><g><title>get_unmapped_area (1 samples, 0.07%)</title><rect x="63.4115%" y="117" width="0.0651%" height="15" fill="rgb(252,136,11)" fg:x="974" fg:w="1"/><text x="63.6615%" y="127.50"></text></g><g><title>cap_mmap_addr (1 samples, 0.07%)</title><rect x="63.4115%" y="101" width="0.0651%" height="15" fill="rgb(219,138,53)" fg:x="974" fg:w="1"/><text x="63.6615%" y="111.50"></text></g><g><title>perf_event_mmap (1 samples, 0.07%)</title><rect x="63.4766%" y="117" width="0.0651%" height="15" fill="rgb(211,51,23)" fg:x="975" fg:w="1"/><text x="63.7266%" y="127.50"></text></g><g><title>perf_event_mmap_event (1 samples, 0.07%)</title><rect x="63.4766%" y="101" width="0.0651%" height="15" fill="rgb(247,221,28)" fg:x="975" fg:w="1"/><text x="63.7266%" y="111.50"></text></g><g><title>perf_iterate_sb (1 samples, 0.07%)</title><rect x="63.4766%" y="85" width="0.0651%" height="15" fill="rgb(251,222,45)" fg:x="975" fg:w="1"/><text x="63.7266%" y="95.50"></text></g><g><title>perf_iterate_ctx (1 samples, 0.07%)</title><rect x="63.4766%" y="69" width="0.0651%" height="15" fill="rgb(217,162,53)" fg:x="975" fg:w="1"/><text x="63.7266%" y="79.50"></text></g><g><title>perf_event_mmap_output (1 samples, 0.07%)</title><rect x="63.4766%" y="53" width="0.0651%" height="15" fill="rgb(229,93,14)" fg:x="975" fg:w="1"/><text x="63.7266%" y="63.50"></text></g><g><title>perf_output_begin (1 samples, 0.07%)</title><rect x="63.4766%" y="37" width="0.0651%" height="15" fill="rgb(209,67,49)" fg:x="975" fg:w="1"/><text x="63.7266%" y="47.50"></text></g><g><title>do_brk_flags (3 samples, 0.20%)</title><rect x="63.4115%" y="133" width="0.1953%" height="15" fill="rgb(213,87,29)" fg:x="974" fg:w="3"/><text x="63.6615%" y="143.50"></text></g><g><title>vma_merge (1 samples, 0.07%)</title><rect x="63.5417%" y="117" width="0.0651%" height="15" fill="rgb(205,151,52)" fg:x="976" fg:w="1"/><text x="63.7917%" y="127.50"></text></g><g><title>__vma_adjust (1 samples, 0.07%)</title><rect x="63.5417%" y="101" width="0.0651%" height="15" fill="rgb(253,215,39)" fg:x="976" fg:w="1"/><text x="63.7917%" y="111.50"></text></g><g><title>anon_vma_interval_tree_insert (1 samples, 0.07%)</title><rect x="63.5417%" y="85" width="0.0651%" height="15" fill="rgb(221,220,41)" fg:x="976" fg:w="1"/><text x="63.7917%" y="95.50"></text></g><g><title>__glibc_morecore (4 samples, 0.26%)</title><rect x="63.4115%" y="261" width="0.2604%" height="15" fill="rgb(218,133,21)" fg:x="974" fg:w="4"/><text x="63.6615%" y="271.50"></text></g><g><title>__GI___sbrk (4 samples, 0.26%)</title><rect x="63.4115%" y="245" width="0.2604%" height="15" fill="rgb(221,193,43)" fg:x="974" fg:w="4"/><text x="63.6615%" y="255.50"></text></g><g><title>__GI___sbrk (4 samples, 0.26%)</title><rect x="63.4115%" y="229" width="0.2604%" height="15" fill="rgb(240,128,52)" fg:x="974" fg:w="4"/><text x="63.6615%" y="239.50"></text></g><g><title>__brk (4 samples, 0.26%)</title><rect x="63.4115%" y="213" width="0.2604%" height="15" fill="rgb(253,114,12)" fg:x="974" fg:w="4"/><text x="63.6615%" y="223.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (4 samples, 0.26%)</title><rect x="63.4115%" y="197" width="0.2604%" height="15" fill="rgb(215,223,47)" fg:x="974" fg:w="4"/><text x="63.6615%" y="207.50"></text></g><g><title>do_syscall_64 (4 samples, 0.26%)</title><rect x="63.4115%" y="181" width="0.2604%" height="15" fill="rgb(248,225,23)" fg:x="974" fg:w="4"/><text x="63.6615%" y="191.50"></text></g><g><title>__x64_sys_brk (4 samples, 0.26%)</title><rect x="63.4115%" y="165" width="0.2604%" height="15" fill="rgb(250,108,0)" fg:x="974" fg:w="4"/><text x="63.6615%" y="175.50"></text></g><g><title>__do_sys_brk (4 samples, 0.26%)</title><rect x="63.4115%" y="149" width="0.2604%" height="15" fill="rgb(228,208,7)" fg:x="974" fg:w="4"/><text x="63.6615%" y="159.50"></text></g><g><title>find_vma (1 samples, 0.07%)</title><rect x="63.6068%" y="133" width="0.0651%" height="15" fill="rgb(244,45,10)" fg:x="977" fg:w="1"/><text x="63.8568%" y="143.50"></text></g><g><title>vmacache_find (1 samples, 0.07%)</title><rect x="63.6068%" y="117" width="0.0651%" height="15" fill="rgb(207,125,25)" fg:x="977" fg:w="1"/><text x="63.8568%" y="127.50"></text></g><g><title>_int_malloc (476 samples, 30.99%)</title><rect x="32.8125%" y="293" width="30.9896%" height="15" fill="rgb(210,195,18)" fg:x="504" fg:w="476"/><text x="33.0625%" y="303.50">_int_malloc</text></g><g><title>sysmalloc (7 samples, 0.46%)</title><rect x="63.3464%" y="277" width="0.4557%" height="15" fill="rgb(249,80,12)" fg:x="973" fg:w="7"/><text x="63.5964%" y="287.50"></text></g><g><title>asm_exc_page_fault (2 samples, 0.13%)</title><rect x="63.6719%" y="261" width="0.1302%" height="15" fill="rgb(221,65,9)" fg:x="978" fg:w="2"/><text x="63.9219%" y="271.50"></text></g><g><title>exc_page_fault (2 samples, 0.13%)</title><rect x="63.6719%" y="245" width="0.1302%" height="15" fill="rgb(235,49,36)" fg:x="978" fg:w="2"/><text x="63.9219%" y="255.50"></text></g><g><title>do_user_addr_fault (2 samples, 0.13%)</title><rect x="63.6719%" y="229" width="0.1302%" height="15" fill="rgb(225,32,20)" fg:x="978" fg:w="2"/><text x="63.9219%" y="239.50"></text></g><g><title>handle_mm_fault (2 samples, 0.13%)</title><rect x="63.6719%" y="213" width="0.1302%" height="15" fill="rgb(215,141,46)" fg:x="978" fg:w="2"/><text x="63.9219%" y="223.50"></text></g><g><title>__handle_mm_fault (2 samples, 0.13%)</title><rect x="63.6719%" y="197" width="0.1302%" height="15" fill="rgb(250,160,47)" fg:x="978" fg:w="2"/><text x="63.9219%" y="207.50"></text></g><g><title>handle_pte_fault (1 samples, 0.07%)</title><rect x="63.7370%" y="181" width="0.0651%" height="15" fill="rgb(216,222,40)" fg:x="979" fg:w="1"/><text x="63.9870%" y="191.50"></text></g><g><title>do_anonymous_page (1 samples, 0.07%)</title><rect x="63.7370%" y="165" width="0.0651%" height="15" fill="rgb(234,217,39)" fg:x="979" fg:w="1"/><text x="63.9870%" y="175.50"></text></g><g><title>__mem_cgroup_charge (1 samples, 0.07%)</title><rect x="63.7370%" y="149" width="0.0651%" height="15" fill="rgb(207,178,40)" fg:x="979" fg:w="1"/><text x="63.9870%" y="159.50"></text></g><g><title>get_mem_cgroup_from_mm (1 samples, 0.07%)</title><rect x="63.7370%" y="133" width="0.0651%" height="15" fill="rgb(221,136,13)" fg:x="979" fg:w="1"/><text x="63.9870%" y="143.50"></text></g><g><title>arena_for_chunk (8 samples, 0.52%)</title><rect x="63.8021%" y="293" width="0.5208%" height="15" fill="rgb(249,199,10)" fg:x="980" fg:w="8"/><text x="64.0521%" y="303.50"></text></g><g><title>__GI___libc_malloc (562 samples, 36.59%)</title><rect x="28.1901%" y="309" width="36.5885%" height="15" fill="rgb(249,222,13)" fg:x="433" fg:w="562"/><text x="28.4401%" y="319.50">__GI___libc_malloc</text></g><g><title>checked_request2size (7 samples, 0.46%)</title><rect x="64.3229%" y="293" width="0.4557%" height="15" fill="rgb(244,185,38)" fg:x="988" fg:w="7"/><text x="64.5729%" y="303.50"></text></g><g><title>__rdl_alloc (26 samples, 1.69%)</title><rect x="64.7786%" y="309" width="1.6927%" height="15" fill="rgb(236,202,9)" fg:x="995" fg:w="26"/><text x="65.0286%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (26 samples, 1.69%)</title><rect x="64.7786%" y="293" width="1.6927%" height="15" fill="rgb(250,229,37)" fg:x="995" fg:w="26"/><text x="65.0286%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (607 samples, 39.52%)</title><rect x="27.4089%" y="405" width="39.5182%" height="15" fill="rgb(206,174,23)" fg:x="421" fg:w="607"/><text x="27.6589%" y="415.50">alloc::vec::Vec&lt;T,A&gt;::with_capacity_in</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (607 samples, 39.52%)</title><rect x="27.4089%" y="389" width="39.5182%" height="15" fill="rgb(211,33,43)" fg:x="421" fg:w="607"/><text x="27.6589%" y="399.50">alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (607 samples, 39.52%)</title><rect x="27.4089%" y="373" width="39.5182%" height="15" fill="rgb(245,58,50)" fg:x="421" fg:w="607"/><text x="27.6589%" y="383.50">alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (605 samples, 39.39%)</title><rect x="27.5391%" y="357" width="39.3880%" height="15" fill="rgb(244,68,36)" fg:x="423" fg:w="605"/><text x="27.7891%" y="367.50">&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate</text></g><g><title>alloc::alloc::Global::alloc_impl (605 samples, 39.39%)</title><rect x="27.5391%" y="341" width="39.3880%" height="15" fill="rgb(232,229,15)" fg:x="423" fg:w="605"/><text x="27.7891%" y="351.50">alloc::alloc::Global::alloc_impl</text></g><g><title>alloc::alloc::alloc (596 samples, 38.80%)</title><rect x="28.1250%" y="325" width="38.8021%" height="15" fill="rgb(254,30,23)" fg:x="432" fg:w="596"/><text x="28.3750%" y="335.50">alloc::alloc::alloc</text></g><g><title>__rust_alloc (7 samples, 0.46%)</title><rect x="66.4714%" y="309" width="0.4557%" height="15" fill="rgb(235,160,14)" fg:x="1021" fg:w="7"/><text x="66.7214%" y="319.50"></text></g><g><title>[libc.so.6] (27 samples, 1.76%)</title><rect x="67.5781%" y="373" width="1.7578%" height="15" fill="rgb(212,155,44)" fg:x="1038" fg:w="27"/><text x="67.8281%" y="383.50"></text></g><g><title>asm_exc_page_fault (2 samples, 0.13%)</title><rect x="69.3359%" y="341" width="0.1302%" height="15" fill="rgb(226,2,50)" fg:x="1065" fg:w="2"/><text x="69.5859%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (648 samples, 42.19%)</title><rect x="27.4089%" y="517" width="42.1875%" height="15" fill="rgb(234,177,6)" fg:x="421" fg:w="648"/><text x="27.6589%" y="527.50">&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from</text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (648 samples, 42.19%)</title><rect x="27.4089%" y="501" width="42.1875%" height="15" fill="rgb(217,24,9)" fg:x="421" fg:w="648"/><text x="27.6589%" y="511.50">alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned</text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (648 samples, 42.19%)</title><rect x="27.4089%" y="485" width="42.1875%" height="15" fill="rgb(220,13,46)" fg:x="421" fg:w="648"/><text x="27.6589%" y="495.50">alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (648 samples, 42.19%)</title><rect x="27.4089%" y="469" width="42.1875%" height="15" fill="rgb(239,221,27)" fg:x="421" fg:w="648"/><text x="27.6589%" y="479.50">alloc::slice::&lt;impl [T]&gt;::to_vec</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (648 samples, 42.19%)</title><rect x="27.4089%" y="453" width="42.1875%" height="15" fill="rgb(222,198,25)" fg:x="421" fg:w="648"/><text x="27.6589%" y="463.50">alloc::slice::&lt;impl [T]&gt;::to_vec_in</text></g><g><title>alloc::slice::hack::to_vec (648 samples, 42.19%)</title><rect x="27.4089%" y="437" width="42.1875%" height="15" fill="rgb(211,99,13)" fg:x="421" fg:w="648"/><text x="27.6589%" y="447.50">alloc::slice::hack::to_vec</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (648 samples, 42.19%)</title><rect x="27.4089%" y="421" width="42.1875%" height="15" fill="rgb(232,111,31)" fg:x="421" fg:w="648"/><text x="27.6589%" y="431.50">&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (41 samples, 2.67%)</title><rect x="66.9271%" y="405" width="2.6693%" height="15" fill="rgb(245,82,37)" fg:x="1028" fg:w="41"/><text x="67.1771%" y="415.50">co..</text></g><g><title>core::intrinsics::copy_nonoverlapping (41 samples, 2.67%)</title><rect x="66.9271%" y="389" width="2.6693%" height="15" fill="rgb(227,149,46)" fg:x="1028" fg:w="41"/><text x="67.1771%" y="399.50">co..</text></g><g><title>__GI___libc_malloc (4 samples, 0.26%)</title><rect x="69.3359%" y="373" width="0.2604%" height="15" fill="rgb(218,36,50)" fg:x="1065" fg:w="4"/><text x="69.5859%" y="383.50"></text></g><g><title>_int_malloc (4 samples, 0.26%)</title><rect x="69.3359%" y="357" width="0.2604%" height="15" fill="rgb(226,80,48)" fg:x="1065" fg:w="4"/><text x="69.5859%" y="367.50"></text></g><g><title>error_entry (2 samples, 0.13%)</title><rect x="69.4661%" y="341" width="0.1302%" height="15" fill="rgb(238,224,15)" fg:x="1067" fg:w="2"/><text x="69.7161%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3 samples, 0.20%)</title><rect x="69.5964%" y="517" width="0.1953%" height="15" fill="rgb(241,136,10)" fg:x="1069" fg:w="3"/><text x="69.8464%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.20%)</title><rect x="69.5964%" y="501" width="0.1953%" height="15" fill="rgb(208,32,45)" fg:x="1069" fg:w="3"/><text x="69.8464%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (3 samples, 0.20%)</title><rect x="69.5964%" y="485" width="0.1953%" height="15" fill="rgb(207,135,9)" fg:x="1069" fg:w="3"/><text x="69.8464%" y="495.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (864 samples, 56.25%)</title><rect x="13.6068%" y="549" width="56.2500%" height="15" fill="rgb(206,86,44)" fg:x="209" fg:w="864"/><text x="13.8568%" y="559.50">core::iter::adapters::map::map_fold::{{closure}}</text></g><g><title>test_mmmh::main::{{closure}} (692 samples, 45.05%)</title><rect x="24.8047%" y="533" width="45.0521%" height="15" fill="rgb(245,177,15)" fg:x="381" fg:w="692"/><text x="25.0547%" y="543.50">test_mmmh::main::{{closure}}</text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.07%)</title><rect x="69.7917%" y="517" width="0.0651%" height="15" fill="rgb(206,64,50)" fg:x="1072" fg:w="1"/><text x="70.0417%" y="527.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.07%)</title><rect x="69.7917%" y="501" width="0.0651%" height="15" fill="rgb(234,36,40)" fg:x="1072" fg:w="1"/><text x="70.0417%" y="511.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.07%)</title><rect x="69.7917%" y="485" width="0.0651%" height="15" fill="rgb(213,64,8)" fg:x="1072" fg:w="1"/><text x="70.0417%" y="495.50"></text></g><g><title>run_timer_softirq (1 samples, 0.07%)</title><rect x="69.7917%" y="469" width="0.0651%" height="15" fill="rgb(210,75,36)" fg:x="1072" fg:w="1"/><text x="70.0417%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (866 samples, 56.38%)</title><rect x="13.6068%" y="677" width="56.3802%" height="15" fill="rgb(229,88,21)" fg:x="209" fg:w="866"/><text x="13.8568%" y="687.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (866 samples, 56.38%)</title><rect x="13.6068%" y="661" width="56.3802%" height="15" fill="rgb(252,204,47)" fg:x="209" fg:w="866"/><text x="13.8568%" y="671.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (866 samples, 56.38%)</title><rect x="13.6068%" y="645" width="56.3802%" height="15" fill="rgb(208,77,27)" fg:x="209" fg:w="866"/><text x="13.8568%" y="655.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (866 samples, 56.38%)</title><rect x="13.6068%" y="629" width="56.3802%" height="15" fill="rgb(221,76,26)" fg:x="209" fg:w="866"/><text x="13.8568%" y="639.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (866 samples, 56.38%)</title><rect x="13.6068%" y="613" width="56.3802%" height="15" fill="rgb(225,139,18)" fg:x="209" fg:w="866"/><text x="13.8568%" y="623.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (866 samples, 56.38%)</title><rect x="13.6068%" y="597" width="56.3802%" height="15" fill="rgb(230,137,11)" fg:x="209" fg:w="866"/><text x="13.8568%" y="607.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (866 samples, 56.38%)</title><rect x="13.6068%" y="581" width="56.3802%" height="15" fill="rgb(212,28,1)" fg:x="209" fg:w="866"/><text x="13.8568%" y="591.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::traits::iterator::Iterator::fold (866 samples, 56.38%)</title><rect x="13.6068%" y="565" width="56.3802%" height="15" fill="rgb(248,164,17)" fg:x="209" fg:w="866"/><text x="13.8568%" y="575.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2 samples, 0.13%)</title><rect x="69.8568%" y="549" width="0.1302%" height="15" fill="rgb(222,171,42)" fg:x="1073" fg:w="2"/><text x="70.1068%" y="559.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2 samples, 0.13%)</title><rect x="69.8568%" y="533" width="0.1302%" height="15" fill="rgb(243,84,45)" fg:x="1073" fg:w="2"/><text x="70.1068%" y="543.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (2 samples, 0.13%)</title><rect x="69.8568%" y="517" width="0.1302%" height="15" fill="rgb(252,49,23)" fg:x="1073" fg:w="2"/><text x="70.1068%" y="527.50"></text></g><g><title>_int_free (122 samples, 7.94%)</title><rect x="72.3958%" y="485" width="7.9427%" height="15" fill="rgb(215,19,7)" fg:x="1112" fg:w="122"/><text x="72.6458%" y="495.50">_int_free</text></g><g><title>__GI___libc_free (146 samples, 9.51%)</title><rect x="70.9635%" y="501" width="9.5052%" height="15" fill="rgb(238,81,41)" fg:x="1090" fg:w="146"/><text x="71.2135%" y="511.50">__GI___libc_fr..</text></g><g><title>arena_for_chunk (2 samples, 0.13%)</title><rect x="80.3385%" y="485" width="0.1302%" height="15" fill="rgb(210,199,37)" fg:x="1234" fg:w="2"/><text x="80.5885%" y="495.50"></text></g><g><title>__rdl_dealloc (6 samples, 0.39%)</title><rect x="80.4688%" y="501" width="0.3906%" height="15" fill="rgb(244,192,49)" fg:x="1236" fg:w="6"/><text x="80.7188%" y="511.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (6 samples, 0.39%)</title><rect x="80.4688%" y="485" width="0.3906%" height="15" fill="rgb(226,211,11)" fg:x="1236" fg:w="6"/><text x="80.7188%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (166 samples, 10.81%)</title><rect x="70.3125%" y="533" width="10.8073%" height="15" fill="rgb(236,162,54)" fg:x="1080" fg:w="166"/><text x="70.5625%" y="543.50">&lt;alloc::alloc::G..</text></g><g><title>alloc::alloc::dealloc (166 samples, 10.81%)</title><rect x="70.3125%" y="517" width="10.8073%" height="15" fill="rgb(220,229,9)" fg:x="1080" fg:w="166"/><text x="70.5625%" y="527.50">alloc::alloc::de..</text></g><g><title>__rust_dealloc (4 samples, 0.26%)</title><rect x="80.8594%" y="501" width="0.2604%" height="15" fill="rgb(250,87,22)" fg:x="1242" fg:w="4"/><text x="81.1094%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (172 samples, 11.20%)</title><rect x="69.9870%" y="645" width="11.1979%" height="15" fill="rgb(239,43,17)" fg:x="1075" fg:w="172"/><text x="70.2370%" y="655.50">&lt;alloc::vec::Vec..</text></g><g><title>core::ptr::drop_in_place&lt;[test_mmmh::Product]&gt; (172 samples, 11.20%)</title><rect x="69.9870%" y="629" width="11.1979%" height="15" fill="rgb(231,177,25)" fg:x="1075" fg:w="172"/><text x="70.2370%" y="639.50">core::ptr::drop_..</text></g><g><title>core::ptr::drop_in_place&lt;test_mmmh::Product&gt; (172 samples, 11.20%)</title><rect x="69.9870%" y="613" width="11.1979%" height="15" fill="rgb(219,179,1)" fg:x="1075" fg:w="172"/><text x="70.2370%" y="623.50">core::ptr::drop_..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (172 samples, 11.20%)</title><rect x="69.9870%" y="597" width="11.1979%" height="15" fill="rgb(238,219,53)" fg:x="1075" fg:w="172"/><text x="70.2370%" y="607.50">core::ptr::drop_..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (172 samples, 11.20%)</title><rect x="69.9870%" y="581" width="11.1979%" height="15" fill="rgb(232,167,36)" fg:x="1075" fg:w="172"/><text x="70.2370%" y="591.50">core::ptr::drop_..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (172 samples, 11.20%)</title><rect x="69.9870%" y="565" width="11.1979%" height="15" fill="rgb(244,19,51)" fg:x="1075" fg:w="172"/><text x="70.2370%" y="575.50">core::ptr::drop_..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (172 samples, 11.20%)</title><rect x="69.9870%" y="549" width="11.1979%" height="15" fill="rgb(224,6,22)" fg:x="1075" fg:w="172"/><text x="70.2370%" y="559.50">&lt;alloc::raw_vec:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.07%)</title><rect x="81.1198%" y="533" width="0.0651%" height="15" fill="rgb(224,145,5)" fg:x="1246" fg:w="1"/><text x="81.3698%" y="543.50"></text></g><g><title>page_remove_rmap (1 samples, 0.07%)</title><rect x="81.1849%" y="389" width="0.0651%" height="15" fill="rgb(234,130,49)" fg:x="1247" fg:w="1"/><text x="81.4349%" y="399.50"></text></g><g><title>__mod_lruvec_page_state (1 samples, 0.07%)</title><rect x="81.3151%" y="357" width="0.0651%" height="15" fill="rgb(254,6,2)" fg:x="1249" fg:w="1"/><text x="81.5651%" y="367.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.07%)</title><rect x="81.3151%" y="341" width="0.0651%" height="15" fill="rgb(208,96,46)" fg:x="1249" fg:w="1"/><text x="81.5651%" y="351.50"></text></g><g><title>__mod_memcg_lruvec_state (1 samples, 0.07%)</title><rect x="81.3151%" y="325" width="0.0651%" height="15" fill="rgb(239,3,39)" fg:x="1249" fg:w="1"/><text x="81.5651%" y="335.50"></text></g><g><title>page_remove_rmap (2 samples, 0.13%)</title><rect x="81.3151%" y="373" width="0.1302%" height="15" fill="rgb(233,210,1)" fg:x="1249" fg:w="2"/><text x="81.5651%" y="383.50"></text></g><g><title>lock_page_memcg (1 samples, 0.07%)</title><rect x="81.3802%" y="357" width="0.0651%" height="15" fill="rgb(244,137,37)" fg:x="1250" fg:w="1"/><text x="81.6302%" y="367.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.07%)</title><rect x="81.7057%" y="325" width="0.0651%" height="15" fill="rgb(240,136,2)" fg:x="1255" fg:w="1"/><text x="81.9557%" y="335.50"></text></g><g><title>cgroup_rstat_updated (1 samples, 0.07%)</title><rect x="81.7057%" y="309" width="0.0651%" height="15" fill="rgb(239,18,37)" fg:x="1255" fg:w="1"/><text x="81.9557%" y="319.50"></text></g><g><title>__mod_zone_page_state (1 samples, 0.07%)</title><rect x="81.7708%" y="325" width="0.0651%" height="15" fill="rgb(218,185,22)" fg:x="1256" fg:w="1"/><text x="82.0208%" y="335.50"></text></g><g><title>free_unref_page_commit.constprop.0 (1 samples, 0.07%)</title><rect x="81.8359%" y="325" width="0.0651%" height="15" fill="rgb(225,218,4)" fg:x="1257" fg:w="1"/><text x="82.0859%" y="335.50"></text></g><g><title>free_unref_page_list (7 samples, 0.46%)</title><rect x="81.9010%" y="325" width="0.4557%" height="15" fill="rgb(230,182,32)" fg:x="1258" fg:w="7"/><text x="82.1510%" y="335.50"></text></g><g><title>free_unref_page_commit.constprop.0 (7 samples, 0.46%)</title><rect x="81.9010%" y="309" width="0.4557%" height="15" fill="rgb(242,56,43)" fg:x="1258" fg:w="7"/><text x="82.1510%" y="319.50"></text></g><g><title>free_pcppages_bulk (3 samples, 0.20%)</title><rect x="82.1615%" y="293" width="0.1953%" height="15" fill="rgb(233,99,24)" fg:x="1262" fg:w="3"/><text x="82.4115%" y="303.50"></text></g><g><title>__free_one_page (2 samples, 0.13%)</title><rect x="82.2266%" y="277" width="0.1302%" height="15" fill="rgb(234,209,42)" fg:x="1263" fg:w="2"/><text x="82.4766%" y="287.50"></text></g><g><title>__mod_zone_page_state (1 samples, 0.07%)</title><rect x="82.2917%" y="261" width="0.0651%" height="15" fill="rgb(227,7,12)" fg:x="1264" fg:w="1"/><text x="82.5417%" y="271.50"></text></g><g><title>free_pages_and_swap_cache (15 samples, 0.98%)</title><rect x="81.4453%" y="357" width="0.9766%" height="15" fill="rgb(245,203,43)" fg:x="1251" fg:w="15"/><text x="81.6953%" y="367.50"></text></g><g><title>release_pages (15 samples, 0.98%)</title><rect x="81.4453%" y="341" width="0.9766%" height="15" fill="rgb(238,205,33)" fg:x="1251" fg:w="15"/><text x="81.6953%" y="351.50"></text></g><g><title>uncharge_page (1 samples, 0.07%)</title><rect x="82.3568%" y="325" width="0.0651%" height="15" fill="rgb(231,56,7)" fg:x="1265" fg:w="1"/><text x="82.6068%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;test_mmmh::Product&gt;&gt; (194 samples, 12.63%)</title><rect x="69.9870%" y="661" width="12.6302%" height="15" fill="rgb(244,186,29)" fg:x="1075" fg:w="194"/><text x="70.2370%" y="671.50">core::ptr::drop_in_..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;test_mmmh::Product&gt;&gt; (22 samples, 1.43%)</title><rect x="81.1849%" y="645" width="1.4323%" height="15" fill="rgb(234,111,31)" fg:x="1247" fg:w="22"/><text x="81.4349%" y="655.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 1.43%)</title><rect x="81.1849%" y="629" width="1.4323%" height="15" fill="rgb(241,149,10)" fg:x="1247" fg:w="22"/><text x="81.4349%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (22 samples, 1.43%)</title><rect x="81.1849%" y="613" width="1.4323%" height="15" fill="rgb(249,206,44)" fg:x="1247" fg:w="22"/><text x="81.4349%" y="623.50"></text></g><g><title>alloc::alloc::dealloc (22 samples, 1.43%)</title><rect x="81.1849%" y="597" width="1.4323%" height="15" fill="rgb(251,153,30)" fg:x="1247" fg:w="22"/><text x="81.4349%" y="607.50"></text></g><g><title>__GI___libc_free (22 samples, 1.43%)</title><rect x="81.1849%" y="581" width="1.4323%" height="15" fill="rgb(239,152,38)" fg:x="1247" fg:w="22"/><text x="81.4349%" y="591.50"></text></g><g><title>__GI___munmap (22 samples, 1.43%)</title><rect x="81.1849%" y="565" width="1.4323%" height="15" fill="rgb(249,139,47)" fg:x="1247" fg:w="22"/><text x="81.4349%" y="575.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (22 samples, 1.43%)</title><rect x="81.1849%" y="549" width="1.4323%" height="15" fill="rgb(244,64,35)" fg:x="1247" fg:w="22"/><text x="81.4349%" y="559.50"></text></g><g><title>do_syscall_64 (22 samples, 1.43%)</title><rect x="81.1849%" y="533" width="1.4323%" height="15" fill="rgb(216,46,15)" fg:x="1247" fg:w="22"/><text x="81.4349%" y="543.50"></text></g><g><title>__x64_sys_munmap (22 samples, 1.43%)</title><rect x="81.1849%" y="517" width="1.4323%" height="15" fill="rgb(250,74,19)" fg:x="1247" fg:w="22"/><text x="81.4349%" y="527.50"></text></g><g><title>__vm_munmap (22 samples, 1.43%)</title><rect x="81.1849%" y="501" width="1.4323%" height="15" fill="rgb(249,42,33)" fg:x="1247" fg:w="22"/><text x="81.4349%" y="511.50"></text></g><g><title>__do_munmap (22 samples, 1.43%)</title><rect x="81.1849%" y="485" width="1.4323%" height="15" fill="rgb(242,149,17)" fg:x="1247" fg:w="22"/><text x="81.4349%" y="495.50"></text></g><g><title>unmap_region (22 samples, 1.43%)</title><rect x="81.1849%" y="469" width="1.4323%" height="15" fill="rgb(244,29,21)" fg:x="1247" fg:w="22"/><text x="81.4349%" y="479.50"></text></g><g><title>unmap_vmas (22 samples, 1.43%)</title><rect x="81.1849%" y="453" width="1.4323%" height="15" fill="rgb(220,130,37)" fg:x="1247" fg:w="22"/><text x="81.4349%" y="463.50"></text></g><g><title>unmap_single_vma (22 samples, 1.43%)</title><rect x="81.1849%" y="437" width="1.4323%" height="15" fill="rgb(211,67,2)" fg:x="1247" fg:w="22"/><text x="81.4349%" y="447.50"></text></g><g><title>unmap_page_range (22 samples, 1.43%)</title><rect x="81.1849%" y="421" width="1.4323%" height="15" fill="rgb(235,68,52)" fg:x="1247" fg:w="22"/><text x="81.4349%" y="431.50"></text></g><g><title>zap_pmd_range.isra.0 (22 samples, 1.43%)</title><rect x="81.1849%" y="405" width="1.4323%" height="15" fill="rgb(246,142,3)" fg:x="1247" fg:w="22"/><text x="81.4349%" y="415.50"></text></g><g><title>zap_pte_range (21 samples, 1.37%)</title><rect x="81.2500%" y="389" width="1.3672%" height="15" fill="rgb(241,25,7)" fg:x="1248" fg:w="21"/><text x="81.5000%" y="399.50"></text></g><g><title>tlb_flush_mmu (18 samples, 1.17%)</title><rect x="81.4453%" y="373" width="1.1719%" height="15" fill="rgb(242,119,39)" fg:x="1251" fg:w="18"/><text x="81.6953%" y="383.50"></text></g><g><title>free_swap_cache (3 samples, 0.20%)</title><rect x="82.4219%" y="357" width="0.1953%" height="15" fill="rgb(241,98,45)" fg:x="1266" fg:w="3"/><text x="82.6719%" y="367.50"></text></g><g><title>test_mmmh::process_name (15 samples, 0.98%)</title><rect x="82.6172%" y="645" width="0.9766%" height="15" fill="rgb(254,28,30)" fg:x="1269" fg:w="15"/><text x="82.8672%" y="655.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;mut A&gt;::eq (13 samples, 0.85%)</title><rect x="82.7474%" y="629" width="0.8464%" height="15" fill="rgb(241,142,54)" fg:x="1271" fg:w="13"/><text x="82.9974%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&lt;str&gt;&gt;::eq (13 samples, 0.85%)</title><rect x="82.7474%" y="613" width="0.8464%" height="15" fill="rgb(222,85,15)" fg:x="1271" fg:w="13"/><text x="82.9974%" y="623.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (13 samples, 0.85%)</title><rect x="82.7474%" y="597" width="0.8464%" height="15" fill="rgb(210,85,47)" fg:x="1271" fg:w="13"/><text x="82.9974%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (13 samples, 0.85%)</title><rect x="82.7474%" y="581" width="0.8464%" height="15" fill="rgb(224,206,25)" fg:x="1271" fg:w="13"/><text x="82.9974%" y="591.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (13 samples, 0.85%)</title><rect x="82.7474%" y="565" width="0.8464%" height="15" fill="rgb(243,201,19)" fg:x="1271" fg:w="13"/><text x="82.9974%" y="575.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (13 samples, 0.85%)</title><rect x="82.7474%" y="549" width="0.8464%" height="15" fill="rgb(236,59,4)" fg:x="1271" fg:w="13"/><text x="82.9974%" y="559.50"></text></g><g><title>test_mmmh::process_price (4 samples, 0.26%)</title><rect x="83.5938%" y="645" width="0.2604%" height="15" fill="rgb(254,179,45)" fg:x="1284" fg:w="4"/><text x="83.8438%" y="655.50"></text></g><g><title>checked_request2size (4 samples, 0.26%)</title><rect x="84.5052%" y="405" width="0.2604%" height="15" fill="rgb(226,14,10)" fg:x="1298" fg:w="4"/><text x="84.7552%" y="415.50"></text></g><g><title>__GI___libc_malloc (21 samples, 1.37%)</title><rect x="83.9193%" y="421" width="1.3672%" height="15" fill="rgb(244,27,41)" fg:x="1289" fg:w="21"/><text x="84.1693%" y="431.50"></text></g><g><title>tcache_get (8 samples, 0.52%)</title><rect x="84.7656%" y="405" width="0.5208%" height="15" fill="rgb(235,35,32)" fg:x="1302" fg:w="8"/><text x="85.0156%" y="415.50"></text></g><g><title>__rdl_alloc (4 samples, 0.26%)</title><rect x="85.2865%" y="421" width="0.2604%" height="15" fill="rgb(218,68,31)" fg:x="1310" fg:w="4"/><text x="85.5365%" y="431.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4 samples, 0.26%)</title><rect x="85.2865%" y="405" width="0.2604%" height="15" fill="rgb(207,120,37)" fg:x="1310" fg:w="4"/><text x="85.5365%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (26 samples, 1.69%)</title><rect x="83.9193%" y="517" width="1.6927%" height="15" fill="rgb(227,98,0)" fg:x="1289" fg:w="26"/><text x="84.1693%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (26 samples, 1.69%)</title><rect x="83.9193%" y="501" width="1.6927%" height="15" fill="rgb(207,7,3)" fg:x="1289" fg:w="26"/><text x="84.1693%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (26 samples, 1.69%)</title><rect x="83.9193%" y="485" width="1.6927%" height="15" fill="rgb(206,98,19)" fg:x="1289" fg:w="26"/><text x="84.1693%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (26 samples, 1.69%)</title><rect x="83.9193%" y="469" width="1.6927%" height="15" fill="rgb(217,5,26)" fg:x="1289" fg:w="26"/><text x="84.1693%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (26 samples, 1.69%)</title><rect x="83.9193%" y="453" width="1.6927%" height="15" fill="rgb(235,190,38)" fg:x="1289" fg:w="26"/><text x="84.1693%" y="463.50"></text></g><g><title>alloc::alloc::alloc (26 samples, 1.69%)</title><rect x="83.9193%" y="437" width="1.6927%" height="15" fill="rgb(247,86,24)" fg:x="1289" fg:w="26"/><text x="84.1693%" y="447.50"></text></g><g><title>__rust_alloc (1 samples, 0.07%)</title><rect x="85.5469%" y="421" width="0.0651%" height="15" fill="rgb(205,101,16)" fg:x="1314" fg:w="1"/><text x="85.7969%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (27 samples, 1.76%)</title><rect x="83.9193%" y="629" width="1.7578%" height="15" fill="rgb(246,168,33)" fg:x="1289" fg:w="27"/><text x="84.1693%" y="639.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (27 samples, 1.76%)</title><rect x="83.9193%" y="613" width="1.7578%" height="15" fill="rgb(231,114,1)" fg:x="1289" fg:w="27"/><text x="84.1693%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (27 samples, 1.76%)</title><rect x="83.9193%" y="597" width="1.7578%" height="15" fill="rgb(207,184,53)" fg:x="1289" fg:w="27"/><text x="84.1693%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (27 samples, 1.76%)</title><rect x="83.9193%" y="581" width="1.7578%" height="15" fill="rgb(224,95,51)" fg:x="1289" fg:w="27"/><text x="84.1693%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (27 samples, 1.76%)</title><rect x="83.9193%" y="565" width="1.7578%" height="15" fill="rgb(212,188,45)" fg:x="1289" fg:w="27"/><text x="84.1693%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (27 samples, 1.76%)</title><rect x="83.9193%" y="549" width="1.7578%" height="15" fill="rgb(223,154,38)" fg:x="1289" fg:w="27"/><text x="84.1693%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (27 samples, 1.76%)</title><rect x="83.9193%" y="533" width="1.7578%" height="15" fill="rgb(251,22,52)" fg:x="1289" fg:w="27"/><text x="84.1693%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.07%)</title><rect x="85.6120%" y="517" width="0.0651%" height="15" fill="rgb(229,209,22)" fg:x="1315" fg:w="1"/><text x="85.8620%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.07%)</title><rect x="85.6120%" y="501" width="0.0651%" height="15" fill="rgb(234,138,34)" fg:x="1315" fg:w="1"/><text x="85.8620%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::ops::index::Index&lt;core::ops::range::RangeFull&gt;&gt;::index (1 samples, 0.07%)</title><rect x="85.6771%" y="597" width="0.0651%" height="15" fill="rgb(212,95,11)" fg:x="1316" fg:w="1"/><text x="85.9271%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.07%)</title><rect x="85.6771%" y="581" width="0.0651%" height="15" fill="rgb(240,179,47)" fg:x="1316" fg:w="1"/><text x="85.9271%" y="591.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;mut A&gt;::eq (4 samples, 0.26%)</title><rect x="85.6771%" y="629" width="0.2604%" height="15" fill="rgb(240,163,11)" fg:x="1316" fg:w="4"/><text x="85.9271%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&lt;str&gt;&gt;::eq (4 samples, 0.26%)</title><rect x="85.6771%" y="613" width="0.2604%" height="15" fill="rgb(236,37,12)" fg:x="1316" fg:w="4"/><text x="85.9271%" y="623.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (3 samples, 0.20%)</title><rect x="85.7422%" y="597" width="0.1953%" height="15" fill="rgb(232,164,16)" fg:x="1317" fg:w="3"/><text x="85.9922%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (3 samples, 0.20%)</title><rect x="85.7422%" y="581" width="0.1953%" height="15" fill="rgb(244,205,15)" fg:x="1317" fg:w="3"/><text x="85.9922%" y="591.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (3 samples, 0.20%)</title><rect x="85.7422%" y="565" width="0.1953%" height="15" fill="rgb(223,117,47)" fg:x="1317" fg:w="3"/><text x="85.9922%" y="575.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (3 samples, 0.20%)</title><rect x="85.7422%" y="549" width="0.1953%" height="15" fill="rgb(244,107,35)" fg:x="1317" fg:w="3"/><text x="85.9922%" y="559.50"></text></g><g><title>_int_free (21 samples, 1.37%)</title><rect x="86.5885%" y="517" width="1.3672%" height="15" fill="rgb(205,140,8)" fg:x="1330" fg:w="21"/><text x="86.8385%" y="527.50"></text></g><g><title>tcache_put (2 samples, 0.13%)</title><rect x="87.8255%" y="501" width="0.1302%" height="15" fill="rgb(228,84,46)" fg:x="1349" fg:w="2"/><text x="88.0755%" y="511.50"></text></g><g><title>__GI___libc_free (32 samples, 2.08%)</title><rect x="86.0677%" y="533" width="2.0833%" height="15" fill="rgb(254,188,9)" fg:x="1322" fg:w="32"/><text x="86.3177%" y="543.50">_..</text></g><g><title>arena_for_chunk (3 samples, 0.20%)</title><rect x="87.9557%" y="517" width="0.1953%" height="15" fill="rgb(206,112,54)" fg:x="1351" fg:w="3"/><text x="88.2057%" y="527.50"></text></g><g><title>__rdl_dealloc (4 samples, 0.26%)</title><rect x="88.1510%" y="533" width="0.2604%" height="15" fill="rgb(216,84,49)" fg:x="1354" fg:w="4"/><text x="88.4010%" y="543.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (4 samples, 0.26%)</title><rect x="88.1510%" y="517" width="0.2604%" height="15" fill="rgb(214,194,35)" fg:x="1354" fg:w="4"/><text x="88.4010%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (40 samples, 2.60%)</title><rect x="85.9375%" y="565" width="2.6042%" height="15" fill="rgb(249,28,3)" fg:x="1320" fg:w="40"/><text x="86.1875%" y="575.50">&lt;a..</text></g><g><title>alloc::alloc::dealloc (40 samples, 2.60%)</title><rect x="85.9375%" y="549" width="2.6042%" height="15" fill="rgb(222,56,52)" fg:x="1320" fg:w="40"/><text x="86.1875%" y="559.50">al..</text></g><g><title>__rust_dealloc (2 samples, 0.13%)</title><rect x="88.4115%" y="533" width="0.1302%" height="15" fill="rgb(245,217,50)" fg:x="1358" fg:w="2"/><text x="88.6615%" y="543.50"></text></g><g><title>test_mmmh::process_production_site (73 samples, 4.75%)</title><rect x="83.8542%" y="645" width="4.7526%" height="15" fill="rgb(213,201,24)" fg:x="1288" fg:w="73"/><text x="84.1042%" y="655.50">test_m..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (41 samples, 2.67%)</title><rect x="85.9375%" y="629" width="2.6693%" height="15" fill="rgb(248,116,28)" fg:x="1320" fg:w="41"/><text x="86.1875%" y="639.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (41 samples, 2.67%)</title><rect x="85.9375%" y="613" width="2.6693%" height="15" fill="rgb(219,72,43)" fg:x="1320" fg:w="41"/><text x="86.1875%" y="623.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (41 samples, 2.67%)</title><rect x="85.9375%" y="597" width="2.6693%" height="15" fill="rgb(209,138,14)" fg:x="1320" fg:w="41"/><text x="86.1875%" y="607.50">co..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (41 samples, 2.67%)</title><rect x="85.9375%" y="581" width="2.6693%" height="15" fill="rgb(222,18,33)" fg:x="1320" fg:w="41"/><text x="86.1875%" y="591.50">&lt;a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.07%)</title><rect x="88.5417%" y="565" width="0.0651%" height="15" fill="rgb(213,199,7)" fg:x="1360" fg:w="1"/><text x="88.7917%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (2 samples, 0.13%)</title><rect x="88.8021%" y="565" width="0.1302%" height="15" fill="rgb(250,110,10)" fg:x="1364" fg:w="2"/><text x="89.0521%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.07%)</title><rect x="89.4531%" y="501" width="0.0651%" height="15" fill="rgb(248,123,6)" fg:x="1374" fg:w="1"/><text x="89.7031%" y="511.50"></text></g><g><title>_int_realloc (15 samples, 0.98%)</title><rect x="91.3411%" y="421" width="0.9766%" height="15" fill="rgb(206,91,31)" fg:x="1403" fg:w="15"/><text x="91.5911%" y="431.50"></text></g><g><title>arena_for_chunk (2 samples, 0.13%)</title><rect x="92.3177%" y="421" width="0.1302%" height="15" fill="rgb(211,154,13)" fg:x="1418" fg:w="2"/><text x="92.5677%" y="431.50"></text></g><g><title>__GI___libc_realloc (39 samples, 2.54%)</title><rect x="90.1693%" y="437" width="2.5391%" height="15" fill="rgb(225,148,7)" fg:x="1385" fg:w="39"/><text x="90.4193%" y="447.50">__..</text></g><g><title>checked_request2size (4 samples, 0.26%)</title><rect x="92.4479%" y="421" width="0.2604%" height="15" fill="rgb(220,160,43)" fg:x="1420" fg:w="4"/><text x="92.6979%" y="431.50"></text></g><g><title>__rdl_realloc (5 samples, 0.33%)</title><rect x="92.7083%" y="437" width="0.3255%" height="15" fill="rgb(213,52,39)" fg:x="1424" fg:w="5"/><text x="92.9583%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (4 samples, 0.26%)</title><rect x="92.7734%" y="421" width="0.2604%" height="15" fill="rgb(243,137,7)" fg:x="1425" fg:w="4"/><text x="93.0234%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (64 samples, 4.17%)</title><rect x="88.9323%" y="565" width="4.1667%" height="15" fill="rgb(230,79,13)" fg:x="1366" fg:w="64"/><text x="89.1823%" y="575.50">alloc..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (64 samples, 4.17%)</title><rect x="88.9323%" y="549" width="4.1667%" height="15" fill="rgb(247,105,23)" fg:x="1366" fg:w="64"/><text x="89.1823%" y="559.50">alloc..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (63 samples, 4.10%)</title><rect x="88.9974%" y="533" width="4.1016%" height="15" fill="rgb(223,179,41)" fg:x="1367" fg:w="63"/><text x="89.2474%" y="543.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (63 samples, 4.10%)</title><rect x="88.9974%" y="517" width="4.1016%" height="15" fill="rgb(218,9,34)" fg:x="1367" fg:w="63"/><text x="89.2474%" y="527.50">allo..</text></g><g><title>alloc::raw_vec::finish_grow (55 samples, 3.58%)</title><rect x="89.5182%" y="501" width="3.5807%" height="15" fill="rgb(222,106,8)" fg:x="1375" fg:w="55"/><text x="89.7682%" y="511.50">allo..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (50 samples, 3.26%)</title><rect x="89.8438%" y="485" width="3.2552%" height="15" fill="rgb(211,220,0)" fg:x="1380" fg:w="50"/><text x="90.0938%" y="495.50">&lt;al..</text></g><g><title>alloc::alloc::Global::grow_impl (50 samples, 3.26%)</title><rect x="89.8438%" y="469" width="3.2552%" height="15" fill="rgb(229,52,16)" fg:x="1380" fg:w="50"/><text x="90.0938%" y="479.50">all..</text></g><g><title>alloc::alloc::realloc (50 samples, 3.26%)</title><rect x="89.8438%" y="453" width="3.2552%" height="15" fill="rgb(212,155,18)" fg:x="1380" fg:w="50"/><text x="90.0938%" y="463.50">all..</text></g><g><title>__rust_realloc (1 samples, 0.07%)</title><rect x="93.0339%" y="437" width="0.0651%" height="15" fill="rgb(242,21,14)" fg:x="1429" fg:w="1"/><text x="93.2839%" y="447.50"></text></g><g><title>alloc::string::String::push_str (71 samples, 4.62%)</title><rect x="88.6719%" y="629" width="4.6224%" height="15" fill="rgb(222,19,48)" fg:x="1362" fg:w="71"/><text x="88.9219%" y="639.50">alloc..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (71 samples, 4.62%)</title><rect x="88.6719%" y="613" width="4.6224%" height="15" fill="rgb(232,45,27)" fg:x="1362" fg:w="71"/><text x="88.9219%" y="623.50">alloc..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (71 samples, 4.62%)</title><rect x="88.6719%" y="597" width="4.6224%" height="15" fill="rgb(249,103,42)" fg:x="1362" fg:w="71"/><text x="88.9219%" y="607.50">&lt;allo..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (71 samples, 4.62%)</title><rect x="88.6719%" y="581" width="4.6224%" height="15" fill="rgb(246,81,33)" fg:x="1362" fg:w="71"/><text x="88.9219%" y="591.50">alloc..</text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.20%)</title><rect x="93.0990%" y="565" width="0.1953%" height="15" fill="rgb(252,33,42)" fg:x="1430" fg:w="3"/><text x="93.3490%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::ops::index::Index&lt;core::ops::range::RangeFull&gt;&gt;::index (5 samples, 0.33%)</title><rect x="93.2943%" y="597" width="0.3255%" height="15" fill="rgb(209,212,41)" fg:x="1433" fg:w="5"/><text x="93.5443%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (5 samples, 0.33%)</title><rect x="93.2943%" y="581" width="0.3255%" height="15" fill="rgb(207,154,6)" fg:x="1433" fg:w="5"/><text x="93.5443%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (3 samples, 0.20%)</title><rect x="93.4245%" y="565" width="0.1953%" height="15" fill="rgb(223,64,47)" fg:x="1435" fg:w="3"/><text x="93.6745%" y="575.50"></text></g><g><title>std::panic::catch_unwind (1,233 samples, 80.27%)</title><rect x="13.6068%" y="805" width="80.2734%" height="15" fill="rgb(211,161,38)" fg:x="209" fg:w="1233"/><text x="13.8568%" y="815.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,233 samples, 80.27%)</title><rect x="13.6068%" y="789" width="80.2734%" height="15" fill="rgb(219,138,40)" fg:x="209" fg:w="1233"/><text x="13.8568%" y="799.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,233 samples, 80.27%)</title><rect x="13.6068%" y="773" width="80.2734%" height="15" fill="rgb(241,228,46)" fg:x="209" fg:w="1233"/><text x="13.8568%" y="783.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,233 samples, 80.27%)</title><rect x="13.6068%" y="757" width="80.2734%" height="15" fill="rgb(223,209,38)" fg:x="209" fg:w="1233"/><text x="13.8568%" y="767.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,233 samples, 80.27%)</title><rect x="13.6068%" y="741" width="80.2734%" height="15" fill="rgb(236,164,45)" fg:x="209" fg:w="1233"/><text x="13.8568%" y="751.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,233 samples, 80.27%)</title><rect x="13.6068%" y="725" width="80.2734%" height="15" fill="rgb(231,15,5)" fg:x="209" fg:w="1233"/><text x="13.8568%" y="735.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (1,233 samples, 80.27%)</title><rect x="13.6068%" y="709" width="80.2734%" height="15" fill="rgb(252,35,15)" fg:x="209" fg:w="1233"/><text x="13.8568%" y="719.50">core::ops::function::FnOnce::call_once</text></g><g><title>test_mmmh::main (1,233 samples, 80.27%)</title><rect x="13.6068%" y="693" width="80.2734%" height="15" fill="rgb(248,181,18)" fg:x="209" fg:w="1233"/><text x="13.8568%" y="703.50">test_mmmh::main</text></g><g><title>test_mmmh::update_1 (367 samples, 23.89%)</title><rect x="69.9870%" y="677" width="23.8932%" height="15" fill="rgb(233,39,42)" fg:x="1075" fg:w="367"/><text x="70.2370%" y="687.50">test_mmmh::update_1</text></g><g><title>test_mmmh::Product::update_product (173 samples, 11.26%)</title><rect x="82.6172%" y="661" width="11.2630%" height="15" fill="rgb(238,110,33)" fg:x="1269" fg:w="173"/><text x="82.8672%" y="671.50">test_mmmh::Produc..</text></g><g><title>test_mmmh::process_vendor (81 samples, 5.27%)</title><rect x="88.6068%" y="645" width="5.2734%" height="15" fill="rgb(233,195,10)" fg:x="1361" fg:w="81"/><text x="88.8568%" y="655.50">test_m..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;mut A&gt;::ne (9 samples, 0.59%)</title><rect x="93.2943%" y="629" width="0.5859%" height="15" fill="rgb(254,105,3)" fg:x="1433" fg:w="9"/><text x="93.5443%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&lt;str&gt;&gt;::ne (9 samples, 0.59%)</title><rect x="93.2943%" y="613" width="0.5859%" height="15" fill="rgb(221,225,9)" fg:x="1433" fg:w="9"/><text x="93.5443%" y="623.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::ne (4 samples, 0.26%)</title><rect x="93.6198%" y="597" width="0.2604%" height="15" fill="rgb(224,227,45)" fg:x="1438" fg:w="4"/><text x="93.8698%" y="607.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (4 samples, 0.26%)</title><rect x="93.6198%" y="581" width="0.2604%" height="15" fill="rgb(229,198,43)" fg:x="1438" fg:w="4"/><text x="93.8698%" y="591.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (4 samples, 0.26%)</title><rect x="93.6198%" y="565" width="0.2604%" height="15" fill="rgb(206,209,35)" fg:x="1438" fg:w="4"/><text x="93.8698%" y="575.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (4 samples, 0.26%)</title><rect x="93.6198%" y="549" width="0.2604%" height="15" fill="rgb(245,195,53)" fg:x="1438" fg:w="4"/><text x="93.8698%" y="559.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (4 samples, 0.26%)</title><rect x="93.6198%" y="533" width="0.2604%" height="15" fill="rgb(240,92,26)" fg:x="1438" fg:w="4"/><text x="93.8698%" y="543.50"></text></g><g><title>_start (1,234 samples, 80.34%)</title><rect x="13.6068%" y="949" width="80.3385%" height="15" fill="rgb(207,40,23)" fg:x="209" fg:w="1234"/><text x="13.8568%" y="959.50">_start</text></g><g><title>__libc_start_main_impl (1,234 samples, 80.34%)</title><rect x="13.6068%" y="933" width="80.3385%" height="15" fill="rgb(223,111,35)" fg:x="209" fg:w="1234"/><text x="13.8568%" y="943.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (1,234 samples, 80.34%)</title><rect x="13.6068%" y="917" width="80.3385%" height="15" fill="rgb(229,147,28)" fg:x="209" fg:w="1234"/><text x="13.8568%" y="927.50">__libc_start_call_main</text></g><g><title>main (1,234 samples, 80.34%)</title><rect x="13.6068%" y="901" width="80.3385%" height="15" fill="rgb(211,29,28)" fg:x="209" fg:w="1234"/><text x="13.8568%" y="911.50">main</text></g><g><title>std::rt::lang_start_internal (1,234 samples, 80.34%)</title><rect x="13.6068%" y="885" width="80.3385%" height="15" fill="rgb(228,72,33)" fg:x="209" fg:w="1234"/><text x="13.8568%" y="895.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,234 samples, 80.34%)</title><rect x="13.6068%" y="869" width="80.3385%" height="15" fill="rgb(205,214,31)" fg:x="209" fg:w="1234"/><text x="13.8568%" y="879.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,234 samples, 80.34%)</title><rect x="13.6068%" y="853" width="80.3385%" height="15" fill="rgb(224,111,15)" fg:x="209" fg:w="1234"/><text x="13.8568%" y="863.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,234 samples, 80.34%)</title><rect x="13.6068%" y="837" width="80.3385%" height="15" fill="rgb(253,21,26)" fg:x="209" fg:w="1234"/><text x="13.8568%" y="847.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,234 samples, 80.34%)</title><rect x="13.6068%" y="821" width="80.3385%" height="15" fill="rgb(245,139,43)" fg:x="209" fg:w="1234"/><text x="13.8568%" y="831.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::rt::init (1 samples, 0.07%)</title><rect x="93.8802%" y="805" width="0.0651%" height="15" fill="rgb(252,170,7)" fg:x="1442" fg:w="1"/><text x="94.1302%" y="815.50"></text></g><g><title>std::sys::unix::thread::guard::init (1 samples, 0.07%)</title><rect x="93.8802%" y="789" width="0.0651%" height="15" fill="rgb(231,118,14)" fg:x="1442" fg:w="1"/><text x="94.1302%" y="799.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start_aligned (1 samples, 0.07%)</title><rect x="93.8802%" y="773" width="0.0651%" height="15" fill="rgb(238,83,0)" fg:x="1442" fg:w="1"/><text x="94.1302%" y="783.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start (1 samples, 0.07%)</title><rect x="93.8802%" y="757" width="0.0651%" height="15" fill="rgb(221,39,39)" fg:x="1442" fg:w="1"/><text x="94.1302%" y="767.50"></text></g><g><title>__pthread_getattr_np (1 samples, 0.07%)</title><rect x="93.8802%" y="741" width="0.0651%" height="15" fill="rgb(222,119,46)" fg:x="1442" fg:w="1"/><text x="94.1302%" y="751.50"></text></g><g><title>__GI___getdelim (1 samples, 0.07%)</title><rect x="93.8802%" y="725" width="0.0651%" height="15" fill="rgb(222,165,49)" fg:x="1442" fg:w="1"/><text x="94.1302%" y="735.50"></text></g><g><title>_IO_new_file_underflow (1 samples, 0.07%)</title><rect x="93.8802%" y="709" width="0.0651%" height="15" fill="rgb(219,113,52)" fg:x="1442" fg:w="1"/><text x="94.1302%" y="719.50"></text></g><g><title>__GI___read_nocancel (1 samples, 0.07%)</title><rect x="93.8802%" y="693" width="0.0651%" height="15" fill="rgb(214,7,15)" fg:x="1442" fg:w="1"/><text x="94.1302%" y="703.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.07%)</title><rect x="93.8802%" y="677" width="0.0651%" height="15" fill="rgb(235,32,4)" fg:x="1442" fg:w="1"/><text x="94.1302%" y="687.50"></text></g><g><title>do_syscall_64 (1 samples, 0.07%)</title><rect x="93.8802%" y="661" width="0.0651%" height="15" fill="rgb(238,90,54)" fg:x="1442" fg:w="1"/><text x="94.1302%" y="671.50"></text></g><g><title>__x64_sys_read (1 samples, 0.07%)</title><rect x="93.8802%" y="645" width="0.0651%" height="15" fill="rgb(213,208,19)" fg:x="1442" fg:w="1"/><text x="94.1302%" y="655.50"></text></g><g><title>ksys_read (1 samples, 0.07%)</title><rect x="93.8802%" y="629" width="0.0651%" height="15" fill="rgb(233,156,4)" fg:x="1442" fg:w="1"/><text x="94.1302%" y="639.50"></text></g><g><title>vfs_read (1 samples, 0.07%)</title><rect x="93.8802%" y="613" width="0.0651%" height="15" fill="rgb(207,194,5)" fg:x="1442" fg:w="1"/><text x="94.1302%" y="623.50"></text></g><g><title>seq_read (1 samples, 0.07%)</title><rect x="93.8802%" y="597" width="0.0651%" height="15" fill="rgb(206,111,30)" fg:x="1442" fg:w="1"/><text x="94.1302%" y="607.50"></text></g><g><title>seq_read_iter (1 samples, 0.07%)</title><rect x="93.8802%" y="581" width="0.0651%" height="15" fill="rgb(243,70,54)" fg:x="1442" fg:w="1"/><text x="94.1302%" y="591.50"></text></g><g><title>get_gate_vma (1 samples, 0.07%)</title><rect x="93.8802%" y="565" width="0.0651%" height="15" fill="rgb(242,28,8)" fg:x="1442" fg:w="1"/><text x="94.1302%" y="575.50"></text></g><g><title>asm_exc_page_fault (66 samples, 4.30%)</title><rect x="93.9453%" y="949" width="4.2969%" height="15" fill="rgb(219,106,18)" fg:x="1443" fg:w="66"/><text x="94.1953%" y="959.50">asm_e..</text></g><g><title>__x64_sys_execve (1 samples, 0.07%)</title><rect x="98.2422%" y="917" width="0.0651%" height="15" fill="rgb(244,222,10)" fg:x="1509" fg:w="1"/><text x="98.4922%" y="927.50"></text></g><g><title>do_execveat_common.isra.0 (1 samples, 0.07%)</title><rect x="98.2422%" y="901" width="0.0651%" height="15" fill="rgb(236,179,52)" fg:x="1509" fg:w="1"/><text x="98.4922%" y="911.50"></text></g><g><title>bprm_execve (1 samples, 0.07%)</title><rect x="98.2422%" y="885" width="0.0651%" height="15" fill="rgb(213,23,39)" fg:x="1509" fg:w="1"/><text x="98.4922%" y="895.50"></text></g><g><title>bprm_execve.part.0 (1 samples, 0.07%)</title><rect x="98.2422%" y="869" width="0.0651%" height="15" fill="rgb(238,48,10)" fg:x="1509" fg:w="1"/><text x="98.4922%" y="879.50"></text></g><g><title>exec_binprm (1 samples, 0.07%)</title><rect x="98.2422%" y="853" width="0.0651%" height="15" fill="rgb(251,196,23)" fg:x="1509" fg:w="1"/><text x="98.4922%" y="863.50"></text></g><g><title>search_binary_handler (1 samples, 0.07%)</title><rect x="98.2422%" y="837" width="0.0651%" height="15" fill="rgb(250,152,24)" fg:x="1509" fg:w="1"/><text x="98.4922%" y="847.50"></text></g><g><title>load_elf_binary (1 samples, 0.07%)</title><rect x="98.2422%" y="821" width="0.0651%" height="15" fill="rgb(209,150,17)" fg:x="1509" fg:w="1"/><text x="98.4922%" y="831.50"></text></g><g><title>setup_arg_pages (1 samples, 0.07%)</title><rect x="98.2422%" y="805" width="0.0651%" height="15" fill="rgb(234,202,34)" fg:x="1509" fg:w="1"/><text x="98.4922%" y="815.50"></text></g><g><title>shift_arg_pages (1 samples, 0.07%)</title><rect x="98.2422%" y="789" width="0.0651%" height="15" fill="rgb(253,148,53)" fg:x="1509" fg:w="1"/><text x="98.4922%" y="799.50"></text></g><g><title>move_page_tables (1 samples, 0.07%)</title><rect x="98.2422%" y="773" width="0.0651%" height="15" fill="rgb(218,129,16)" fg:x="1509" fg:w="1"/><text x="98.4922%" y="783.50"></text></g><g><title>move_page_tables.part.0 (1 samples, 0.07%)</title><rect x="98.2422%" y="757" width="0.0651%" height="15" fill="rgb(216,85,19)" fg:x="1509" fg:w="1"/><text x="98.4922%" y="767.50"></text></g><g><title>__pmd_alloc (1 samples, 0.07%)</title><rect x="98.2422%" y="741" width="0.0651%" height="15" fill="rgb(235,228,7)" fg:x="1509" fg:w="1"/><text x="98.4922%" y="751.50"></text></g><g><title>alloc_pages (1 samples, 0.07%)</title><rect x="98.2422%" y="725" width="0.0651%" height="15" fill="rgb(245,175,0)" fg:x="1509" fg:w="1"/><text x="98.4922%" y="735.50"></text></g><g><title>__alloc_pages (1 samples, 0.07%)</title><rect x="98.2422%" y="709" width="0.0651%" height="15" fill="rgb(208,168,36)" fg:x="1509" fg:w="1"/><text x="98.4922%" y="719.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.07%)</title><rect x="98.2422%" y="693" width="0.0651%" height="15" fill="rgb(246,171,24)" fg:x="1509" fg:w="1"/><text x="98.4922%" y="703.50"></text></g><g><title>rmqueue (1 samples, 0.07%)</title><rect x="98.2422%" y="677" width="0.0651%" height="15" fill="rgb(215,142,24)" fg:x="1509" fg:w="1"/><text x="98.4922%" y="687.50"></text></g><g><title>__mod_lruvec_page_state (2 samples, 0.13%)</title><rect x="98.4375%" y="725" width="0.1302%" height="15" fill="rgb(250,187,7)" fg:x="1512" fg:w="2"/><text x="98.6875%" y="735.50"></text></g><g><title>rcu_read_unlock_strict (2 samples, 0.13%)</title><rect x="98.4375%" y="709" width="0.1302%" height="15" fill="rgb(228,66,33)" fg:x="1512" fg:w="2"/><text x="98.6875%" y="719.50"></text></g><g><title>page_remove_rmap (4 samples, 0.26%)</title><rect x="98.3724%" y="741" width="0.2604%" height="15" fill="rgb(234,215,21)" fg:x="1511" fg:w="4"/><text x="98.6224%" y="751.50"></text></g><g><title>lock_page_memcg (1 samples, 0.07%)</title><rect x="98.5677%" y="725" width="0.0651%" height="15" fill="rgb(222,191,20)" fg:x="1514" fg:w="1"/><text x="98.8177%" y="735.50"></text></g><g><title>free_pages_and_swap_cache (19 samples, 1.24%)</title><rect x="98.6328%" y="725" width="1.2370%" height="15" fill="rgb(245,79,54)" fg:x="1515" fg:w="19"/><text x="98.8828%" y="735.50"></text></g><g><title>release_pages (19 samples, 1.24%)</title><rect x="98.6328%" y="709" width="1.2370%" height="15" fill="rgb(240,10,37)" fg:x="1515" fg:w="19"/><text x="98.8828%" y="719.50"></text></g><g><title>free_unref_page_list (15 samples, 0.98%)</title><rect x="98.8932%" y="693" width="0.9766%" height="15" fill="rgb(214,192,32)" fg:x="1519" fg:w="15"/><text x="99.1432%" y="703.50"></text></g><g><title>free_unref_page_commit.constprop.0 (12 samples, 0.78%)</title><rect x="99.0885%" y="677" width="0.7812%" height="15" fill="rgb(209,36,54)" fg:x="1522" fg:w="12"/><text x="99.3385%" y="687.50"></text></g><g><title>free_pcppages_bulk (7 samples, 0.46%)</title><rect x="99.4141%" y="661" width="0.4557%" height="15" fill="rgb(220,10,11)" fg:x="1527" fg:w="7"/><text x="99.6641%" y="671.50"></text></g><g><title>__free_one_page (5 samples, 0.33%)</title><rect x="99.5443%" y="645" width="0.3255%" height="15" fill="rgb(221,106,17)" fg:x="1529" fg:w="5"/><text x="99.7943%" y="655.50"></text></g><g><title>tlb_flush_mmu (20 samples, 1.30%)</title><rect x="98.6328%" y="741" width="1.3021%" height="15" fill="rgb(251,142,44)" fg:x="1515" fg:w="20"/><text x="98.8828%" y="751.50"></text></g><g><title>free_swap_cache (1 samples, 0.07%)</title><rect x="99.8698%" y="725" width="0.0651%" height="15" fill="rgb(238,13,15)" fg:x="1534" fg:w="1"/><text x="100.1198%" y="735.50"></text></g><g><title>all (1,536 samples, 100%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(208,107,27)" fg:x="0" fg:w="1536"/><text x="0.2500%" y="991.50"></text></g><g><title>test_mmmh (1,531 samples, 99.67%)</title><rect x="0.3255%" y="965" width="99.6745%" height="15" fill="rgb(205,136,37)" fg:x="5" fg:w="1531"/><text x="0.5755%" y="975.50">test_mmmh</text></g><g><title>entry_SYSCALL_64_after_hwframe (27 samples, 1.76%)</title><rect x="98.2422%" y="949" width="1.7578%" height="15" fill="rgb(250,205,27)" fg:x="1509" fg:w="27"/><text x="98.4922%" y="959.50"></text></g><g><title>do_syscall_64 (27 samples, 1.76%)</title><rect x="98.2422%" y="933" width="1.7578%" height="15" fill="rgb(210,80,43)" fg:x="1509" fg:w="27"/><text x="98.4922%" y="943.50"></text></g><g><title>__x64_sys_exit_group (26 samples, 1.69%)</title><rect x="98.3073%" y="917" width="1.6927%" height="15" fill="rgb(247,160,36)" fg:x="1510" fg:w="26"/><text x="98.5573%" y="927.50"></text></g><g><title>do_group_exit (26 samples, 1.69%)</title><rect x="98.3073%" y="901" width="1.6927%" height="15" fill="rgb(234,13,49)" fg:x="1510" fg:w="26"/><text x="98.5573%" y="911.50"></text></g><g><title>do_exit (26 samples, 1.69%)</title><rect x="98.3073%" y="885" width="1.6927%" height="15" fill="rgb(234,122,0)" fg:x="1510" fg:w="26"/><text x="98.5573%" y="895.50"></text></g><g><title>exit_mm (26 samples, 1.69%)</title><rect x="98.3073%" y="869" width="1.6927%" height="15" fill="rgb(207,146,38)" fg:x="1510" fg:w="26"/><text x="98.5573%" y="879.50"></text></g><g><title>mmput (26 samples, 1.69%)</title><rect x="98.3073%" y="853" width="1.6927%" height="15" fill="rgb(207,177,25)" fg:x="1510" fg:w="26"/><text x="98.5573%" y="863.50"></text></g><g><title>exit_mmap (26 samples, 1.69%)</title><rect x="98.3073%" y="837" width="1.6927%" height="15" fill="rgb(211,178,42)" fg:x="1510" fg:w="26"/><text x="98.5573%" y="847.50"></text></g><g><title>unmap_vmas (26 samples, 1.69%)</title><rect x="98.3073%" y="821" width="1.6927%" height="15" fill="rgb(230,69,54)" fg:x="1510" fg:w="26"/><text x="98.5573%" y="831.50"></text></g><g><title>unmap_single_vma (26 samples, 1.69%)</title><rect x="98.3073%" y="805" width="1.6927%" height="15" fill="rgb(214,135,41)" fg:x="1510" fg:w="26"/><text x="98.5573%" y="815.50"></text></g><g><title>unmap_page_range (26 samples, 1.69%)</title><rect x="98.3073%" y="789" width="1.6927%" height="15" fill="rgb(237,67,25)" fg:x="1510" fg:w="26"/><text x="98.5573%" y="799.50"></text></g><g><title>zap_pmd_range.isra.0 (26 samples, 1.69%)</title><rect x="98.3073%" y="773" width="1.6927%" height="15" fill="rgb(222,189,50)" fg:x="1510" fg:w="26"/><text x="98.5573%" y="783.50"></text></g><g><title>zap_pte_range (25 samples, 1.63%)</title><rect x="98.3724%" y="757" width="1.6276%" height="15" fill="rgb(245,148,34)" fg:x="1511" fg:w="25"/><text x="98.6224%" y="767.50"></text></g><g><title>vm_normal_page (1 samples, 0.07%)</title><rect x="99.9349%" y="741" width="0.0651%" height="15" fill="rgb(222,29,6)" fg:x="1535" fg:w="1"/><text x="100.1849%" y="751.50"></text></g></svg></svg>