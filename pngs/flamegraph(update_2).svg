<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1030" onload="init(evt)" viewBox="0 0 1200 1030" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1030" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1013.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1013.00"> </text><svg id="frames" x="10" width="1180" total_samples="1766"><g><title>perf-exec (5 samples, 0.28%)</title><rect x="0.0000%" y="965" width="0.2831%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="5"/><text x="0.2500%" y="975.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 0.28%)</title><rect x="0.0000%" y="949" width="0.2831%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="5"/><text x="0.2500%" y="959.50"></text></g><g><title>do_syscall_64 (5 samples, 0.28%)</title><rect x="0.0000%" y="933" width="0.2831%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="5"/><text x="0.2500%" y="943.50"></text></g><g><title>__x64_sys_execve (5 samples, 0.28%)</title><rect x="0.0000%" y="917" width="0.2831%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="5"/><text x="0.2500%" y="927.50"></text></g><g><title>do_execveat_common.isra.0 (5 samples, 0.28%)</title><rect x="0.0000%" y="901" width="0.2831%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="5"/><text x="0.2500%" y="911.50"></text></g><g><title>bprm_execve (5 samples, 0.28%)</title><rect x="0.0000%" y="885" width="0.2831%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="5"/><text x="0.2500%" y="895.50"></text></g><g><title>bprm_execve.part.0 (5 samples, 0.28%)</title><rect x="0.0000%" y="869" width="0.2831%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="5"/><text x="0.2500%" y="879.50"></text></g><g><title>exec_binprm (5 samples, 0.28%)</title><rect x="0.0000%" y="853" width="0.2831%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="5"/><text x="0.2500%" y="863.50"></text></g><g><title>search_binary_handler (5 samples, 0.28%)</title><rect x="0.0000%" y="837" width="0.2831%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="5"/><text x="0.2500%" y="847.50"></text></g><g><title>load_elf_binary (5 samples, 0.28%)</title><rect x="0.0000%" y="821" width="0.2831%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="5"/><text x="0.2500%" y="831.50"></text></g><g><title>begin_new_exec (5 samples, 0.28%)</title><rect x="0.0000%" y="805" width="0.2831%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="5"/><text x="0.2500%" y="815.50"></text></g><g><title>perf_event_exec (5 samples, 0.28%)</title><rect x="0.0000%" y="789" width="0.2831%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="5"/><text x="0.2500%" y="799.50"></text></g><g><title>ctx_resched (5 samples, 0.28%)</title><rect x="0.0000%" y="773" width="0.2831%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="5"/><text x="0.2500%" y="783.50"></text></g><g><title>x86_pmu_enable (5 samples, 0.28%)</title><rect x="0.0000%" y="757" width="0.2831%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="5"/><text x="0.2500%" y="767.50"></text></g><g><title>intel_pmu_enable_all (5 samples, 0.28%)</title><rect x="0.0000%" y="741" width="0.2831%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="5"/><text x="0.2500%" y="751.50"></text></g><g><title>native_write_msr (5 samples, 0.28%)</title><rect x="0.0000%" y="725" width="0.2831%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="5"/><text x="0.2500%" y="735.50"></text></g><g><title>[libc.so.6] (1 samples, 0.06%)</title><rect x="0.2831%" y="933" width="0.0566%" height="15" fill="rgb(225,20,46)" fg:x="5" fg:w="1"/><text x="0.5331%" y="943.50"></text></g><g><title>__GI___libc_free (17 samples, 0.96%)</title><rect x="0.3398%" y="933" width="0.9626%" height="15" fill="rgb(210,31,41)" fg:x="6" fg:w="17"/><text x="0.5898%" y="943.50"></text></g><g><title>__GI___lll_lock_wake_private (1 samples, 0.06%)</title><rect x="1.3024%" y="933" width="0.0566%" height="15" fill="rgb(221,200,47)" fg:x="23" fg:w="1"/><text x="1.5524%" y="943.50"></text></g><g><title>_int_free (7 samples, 0.40%)</title><rect x="1.3590%" y="933" width="0.3964%" height="15" fill="rgb(226,26,5)" fg:x="24" fg:w="7"/><text x="1.6090%" y="943.50"></text></g><g><title>_int_realloc (2 samples, 0.11%)</title><rect x="1.7554%" y="933" width="0.1133%" height="15" fill="rgb(249,33,26)" fg:x="31" fg:w="2"/><text x="2.0054%" y="943.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (6 samples, 0.34%)</title><rect x="1.8686%" y="901" width="0.3398%" height="15" fill="rgb(235,183,28)" fg:x="33" fg:w="6"/><text x="2.1186%" y="911.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (6 samples, 0.34%)</title><rect x="1.8686%" y="885" width="0.3398%" height="15" fill="rgb(221,5,38)" fg:x="33" fg:w="6"/><text x="2.1186%" y="895.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (6 samples, 0.34%)</title><rect x="1.8686%" y="869" width="0.3398%" height="15" fill="rgb(247,18,42)" fg:x="33" fg:w="6"/><text x="2.1186%" y="879.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (6 samples, 0.34%)</title><rect x="1.8686%" y="853" width="0.3398%" height="15" fill="rgb(241,131,45)" fg:x="33" fg:w="6"/><text x="2.1186%" y="863.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (6 samples, 0.34%)</title><rect x="1.8686%" y="837" width="0.3398%" height="15" fill="rgb(249,31,29)" fg:x="33" fg:w="6"/><text x="2.1186%" y="847.50"></text></g><g><title>alloc::slice::hack::to_vec (6 samples, 0.34%)</title><rect x="1.8686%" y="821" width="0.3398%" height="15" fill="rgb(225,111,53)" fg:x="33" fg:w="6"/><text x="2.1186%" y="831.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (6 samples, 0.34%)</title><rect x="1.8686%" y="805" width="0.3398%" height="15" fill="rgb(238,160,17)" fg:x="33" fg:w="6"/><text x="2.1186%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (6 samples, 0.34%)</title><rect x="1.8686%" y="789" width="0.3398%" height="15" fill="rgb(214,148,48)" fg:x="33" fg:w="6"/><text x="2.1186%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6 samples, 0.34%)</title><rect x="1.8686%" y="773" width="0.3398%" height="15" fill="rgb(232,36,49)" fg:x="33" fg:w="6"/><text x="2.1186%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (6 samples, 0.34%)</title><rect x="1.8686%" y="757" width="0.3398%" height="15" fill="rgb(209,103,24)" fg:x="33" fg:w="6"/><text x="2.1186%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.34%)</title><rect x="1.8686%" y="741" width="0.3398%" height="15" fill="rgb(229,88,8)" fg:x="33" fg:w="6"/><text x="2.1186%" y="751.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.34%)</title><rect x="1.8686%" y="725" width="0.3398%" height="15" fill="rgb(213,181,19)" fg:x="33" fg:w="6"/><text x="2.1186%" y="735.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.34%)</title><rect x="1.8686%" y="709" width="0.3398%" height="15" fill="rgb(254,191,54)" fg:x="33" fg:w="6"/><text x="2.1186%" y="719.50"></text></g><g><title>test_mmmh::process_production_site (11 samples, 0.62%)</title><rect x="1.8686%" y="917" width="0.6229%" height="15" fill="rgb(241,83,37)" fg:x="33" fg:w="11"/><text x="2.1186%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (5 samples, 0.28%)</title><rect x="2.2084%" y="901" width="0.2831%" height="15" fill="rgb(233,36,39)" fg:x="39" fg:w="5"/><text x="2.4584%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (5 samples, 0.28%)</title><rect x="2.2084%" y="885" width="0.2831%" height="15" fill="rgb(226,3,54)" fg:x="39" fg:w="5"/><text x="2.4584%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (5 samples, 0.28%)</title><rect x="2.2084%" y="869" width="0.2831%" height="15" fill="rgb(245,192,40)" fg:x="39" fg:w="5"/><text x="2.4584%" y="879.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.28%)</title><rect x="2.2084%" y="853" width="0.2831%" height="15" fill="rgb(238,167,29)" fg:x="39" fg:w="5"/><text x="2.4584%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.28%)</title><rect x="2.2084%" y="837" width="0.2831%" height="15" fill="rgb(232,182,51)" fg:x="39" fg:w="5"/><text x="2.4584%" y="847.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.28%)</title><rect x="2.2084%" y="821" width="0.2831%" height="15" fill="rgb(231,60,39)" fg:x="39" fg:w="5"/><text x="2.4584%" y="831.50"></text></g><g><title>[[heap]] (40 samples, 2.27%)</title><rect x="0.2831%" y="949" width="2.2650%" height="15" fill="rgb(208,69,12)" fg:x="5" fg:w="40"/><text x="0.5331%" y="959.50">[..</text></g><g><title>test_mmmh::Product::update_product (12 samples, 0.68%)</title><rect x="1.8686%" y="933" width="0.6795%" height="15" fill="rgb(235,93,37)" fg:x="33" fg:w="12"/><text x="2.1186%" y="943.50"></text></g><g><title>test_mmmh::process_vendor (1 samples, 0.06%)</title><rect x="2.4915%" y="917" width="0.0566%" height="15" fill="rgb(213,116,39)" fg:x="44" fg:w="1"/><text x="2.7415%" y="927.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.06%)</title><rect x="2.4915%" y="901" width="0.0566%" height="15" fill="rgb(222,207,29)" fg:x="44" fg:w="1"/><text x="2.7415%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.06%)</title><rect x="2.4915%" y="885" width="0.0566%" height="15" fill="rgb(206,96,30)" fg:x="44" fg:w="1"/><text x="2.7415%" y="895.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.06%)</title><rect x="2.4915%" y="869" width="0.0566%" height="15" fill="rgb(218,138,4)" fg:x="44" fg:w="1"/><text x="2.7415%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.06%)</title><rect x="2.4915%" y="853" width="0.0566%" height="15" fill="rgb(250,191,14)" fg:x="44" fg:w="1"/><text x="2.7415%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.06%)</title><rect x="2.4915%" y="837" width="0.0566%" height="15" fill="rgb(239,60,40)" fg:x="44" fg:w="1"/><text x="2.7415%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.06%)</title><rect x="2.4915%" y="821" width="0.0566%" height="15" fill="rgb(206,27,48)" fg:x="44" fg:w="1"/><text x="2.7415%" y="831.50"></text></g><g><title>__GI___libc_malloc (13 samples, 0.74%)</title><rect x="2.5481%" y="933" width="0.7361%" height="15" fill="rgb(225,35,8)" fg:x="45" fg:w="13"/><text x="2.7981%" y="943.50"></text></g><g><title>[[stack]] (40 samples, 2.27%)</title><rect x="2.5481%" y="949" width="2.2650%" height="15" fill="rgb(250,213,24)" fg:x="45" fg:w="40"/><text x="2.7981%" y="959.50">[..</text></g><g><title>_int_free (27 samples, 1.53%)</title><rect x="3.2843%" y="933" width="1.5289%" height="15" fill="rgb(247,123,22)" fg:x="58" fg:w="27"/><text x="3.5343%" y="943.50"></text></g><g><title>__GI___libc_free (26 samples, 1.47%)</title><rect x="4.8131%" y="933" width="1.4723%" height="15" fill="rgb(231,138,38)" fg:x="85" fg:w="26"/><text x="5.0631%" y="943.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.11%)</title><rect x="6.2854%" y="933" width="0.1133%" height="15" fill="rgb(231,145,46)" fg:x="111" fg:w="2"/><text x="6.5354%" y="943.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.06%)</title><rect x="6.3986%" y="933" width="0.0566%" height="15" fill="rgb(251,118,11)" fg:x="113" fg:w="1"/><text x="6.6486%" y="943.50"></text></g><g><title>__rdl_alloc (1 samples, 0.06%)</title><rect x="6.4553%" y="933" width="0.0566%" height="15" fill="rgb(217,147,25)" fg:x="114" fg:w="1"/><text x="6.7053%" y="943.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.06%)</title><rect x="6.4553%" y="917" width="0.0566%" height="15" fill="rgb(247,81,37)" fg:x="114" fg:w="1"/><text x="6.7053%" y="927.50"></text></g><g><title>__rdl_realloc (1 samples, 0.06%)</title><rect x="6.5119%" y="933" width="0.0566%" height="15" fill="rgb(209,12,38)" fg:x="115" fg:w="1"/><text x="6.7619%" y="943.50"></text></g><g><title>[anon] (36 samples, 2.04%)</title><rect x="4.8131%" y="949" width="2.0385%" height="15" fill="rgb(227,1,9)" fg:x="85" fg:w="36"/><text x="5.0631%" y="959.50">[..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.28%)</title><rect x="6.5685%" y="933" width="0.2831%" height="15" fill="rgb(248,47,43)" fg:x="116" fg:w="5"/><text x="6.8185%" y="943.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (5 samples, 0.28%)</title><rect x="6.5685%" y="917" width="0.2831%" height="15" fill="rgb(221,10,30)" fg:x="116" fg:w="5"/><text x="6.8185%" y="927.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (2 samples, 0.11%)</title><rect x="6.7384%" y="901" width="0.1133%" height="15" fill="rgb(210,229,1)" fg:x="119" fg:w="2"/><text x="6.9884%" y="911.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (2 samples, 0.11%)</title><rect x="6.7384%" y="885" width="0.1133%" height="15" fill="rgb(222,148,37)" fg:x="119" fg:w="2"/><text x="6.9884%" y="895.50"></text></g><g><title>[libc.so.6] (28 samples, 1.59%)</title><rect x="6.8516%" y="949" width="1.5855%" height="15" fill="rgb(234,67,33)" fg:x="121" fg:w="28"/><text x="7.1016%" y="959.50"></text></g><g><title>_int_malloc (28 samples, 1.59%)</title><rect x="6.8516%" y="933" width="1.5855%" height="15" fill="rgb(247,98,35)" fg:x="121" fg:w="28"/><text x="7.1016%" y="943.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (9 samples, 0.51%)</title><rect x="8.4371%" y="757" width="0.5096%" height="15" fill="rgb(247,138,52)" fg:x="149" fg:w="9"/><text x="8.6871%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (9 samples, 0.51%)</title><rect x="8.4371%" y="741" width="0.5096%" height="15" fill="rgb(213,79,30)" fg:x="149" fg:w="9"/><text x="8.6871%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (9 samples, 0.51%)</title><rect x="8.4371%" y="725" width="0.5096%" height="15" fill="rgb(246,177,23)" fg:x="149" fg:w="9"/><text x="8.6871%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9 samples, 0.51%)</title><rect x="8.4371%" y="709" width="0.5096%" height="15" fill="rgb(230,62,27)" fg:x="149" fg:w="9"/><text x="8.6871%" y="719.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 0.51%)</title><rect x="8.4371%" y="693" width="0.5096%" height="15" fill="rgb(216,154,8)" fg:x="149" fg:w="9"/><text x="8.6871%" y="703.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 0.51%)</title><rect x="8.4371%" y="677" width="0.5096%" height="15" fill="rgb(244,35,45)" fg:x="149" fg:w="9"/><text x="8.6871%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (16 samples, 0.91%)</title><rect x="8.4371%" y="933" width="0.9060%" height="15" fill="rgb(251,115,12)" fg:x="149" fg:w="16"/><text x="8.6871%" y="943.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (16 samples, 0.91%)</title><rect x="8.4371%" y="917" width="0.9060%" height="15" fill="rgb(240,54,50)" fg:x="149" fg:w="16"/><text x="8.6871%" y="927.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (16 samples, 0.91%)</title><rect x="8.4371%" y="901" width="0.9060%" height="15" fill="rgb(233,84,52)" fg:x="149" fg:w="16"/><text x="8.6871%" y="911.50"></text></g><g><title>test_mmmh::main::{{closure}} (16 samples, 0.91%)</title><rect x="8.4371%" y="885" width="0.9060%" height="15" fill="rgb(207,117,47)" fg:x="149" fg:w="16"/><text x="8.6871%" y="895.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (16 samples, 0.91%)</title><rect x="8.4371%" y="869" width="0.9060%" height="15" fill="rgb(249,43,39)" fg:x="149" fg:w="16"/><text x="8.6871%" y="879.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (16 samples, 0.91%)</title><rect x="8.4371%" y="853" width="0.9060%" height="15" fill="rgb(209,38,44)" fg:x="149" fg:w="16"/><text x="8.6871%" y="863.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (16 samples, 0.91%)</title><rect x="8.4371%" y="837" width="0.9060%" height="15" fill="rgb(236,212,23)" fg:x="149" fg:w="16"/><text x="8.6871%" y="847.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (16 samples, 0.91%)</title><rect x="8.4371%" y="821" width="0.9060%" height="15" fill="rgb(242,79,21)" fg:x="149" fg:w="16"/><text x="8.6871%" y="831.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (16 samples, 0.91%)</title><rect x="8.4371%" y="805" width="0.9060%" height="15" fill="rgb(211,96,35)" fg:x="149" fg:w="16"/><text x="8.6871%" y="815.50"></text></g><g><title>alloc::slice::hack::to_vec (16 samples, 0.91%)</title><rect x="8.4371%" y="789" width="0.9060%" height="15" fill="rgb(253,215,40)" fg:x="149" fg:w="16"/><text x="8.6871%" y="799.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (16 samples, 0.91%)</title><rect x="8.4371%" y="773" width="0.9060%" height="15" fill="rgb(211,81,21)" fg:x="149" fg:w="16"/><text x="8.6871%" y="783.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (7 samples, 0.40%)</title><rect x="8.9468%" y="757" width="0.3964%" height="15" fill="rgb(208,190,38)" fg:x="158" fg:w="7"/><text x="9.1968%" y="767.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.40%)</title><rect x="8.9468%" y="741" width="0.3964%" height="15" fill="rgb(235,213,38)" fg:x="158" fg:w="7"/><text x="9.1968%" y="751.50"></text></g><g><title>[libc.so.6] (2 samples, 0.11%)</title><rect x="9.3431%" y="933" width="0.1133%" height="15" fill="rgb(237,122,38)" fg:x="165" fg:w="2"/><text x="9.5931%" y="943.50"></text></g><g><title>__GI___libc_free (3 samples, 0.17%)</title><rect x="9.4564%" y="933" width="0.1699%" height="15" fill="rgb(244,218,35)" fg:x="167" fg:w="3"/><text x="9.7064%" y="943.50"></text></g><g><title>__GI___libc_malloc (27 samples, 1.53%)</title><rect x="9.6263%" y="933" width="1.5289%" height="15" fill="rgb(240,68,47)" fg:x="170" fg:w="27"/><text x="9.8763%" y="943.50"></text></g><g><title>__GI___libc_realloc (3 samples, 0.17%)</title><rect x="11.1552%" y="933" width="0.1699%" height="15" fill="rgb(210,16,53)" fg:x="197" fg:w="3"/><text x="11.4052%" y="943.50"></text></g><g><title>__rdl_realloc (2 samples, 0.11%)</title><rect x="11.3250%" y="933" width="0.1133%" height="15" fill="rgb(235,124,12)" fg:x="200" fg:w="2"/><text x="11.5750%" y="943.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (2 samples, 0.11%)</title><rect x="11.3250%" y="917" width="0.1133%" height="15" fill="rgb(224,169,11)" fg:x="200" fg:w="2"/><text x="11.5750%" y="927.50"></text></g><g><title>_int_free (9 samples, 0.51%)</title><rect x="11.4383%" y="933" width="0.5096%" height="15" fill="rgb(250,166,2)" fg:x="202" fg:w="9"/><text x="11.6883%" y="943.50"></text></g><g><title>_int_malloc (7 samples, 0.40%)</title><rect x="11.9479%" y="933" width="0.3964%" height="15" fill="rgb(242,216,29)" fg:x="211" fg:w="7"/><text x="12.1979%" y="943.50"></text></g><g><title>_int_realloc (2 samples, 0.11%)</title><rect x="12.3443%" y="933" width="0.1133%" height="15" fill="rgb(230,116,27)" fg:x="218" fg:w="2"/><text x="12.5943%" y="943.50"></text></g><g><title>alloc::raw_vec::finish_grow (13 samples, 0.74%)</title><rect x="12.4575%" y="933" width="0.7361%" height="15" fill="rgb(228,99,48)" fg:x="220" fg:w="13"/><text x="12.7075%" y="943.50"></text></g><g><title>[unknown] (95 samples, 5.38%)</title><rect x="8.4371%" y="949" width="5.3794%" height="15" fill="rgb(253,11,6)" fg:x="149" fg:w="95"/><text x="8.6871%" y="959.50">[unknow..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (11 samples, 0.62%)</title><rect x="13.1937%" y="933" width="0.6229%" height="15" fill="rgb(247,143,39)" fg:x="233" fg:w="11"/><text x="13.4437%" y="943.50"></text></g><g><title>crossbeam_utils::thread::ScopedThreadBuilder::spawn::{{closure}} (11 samples, 0.62%)</title><rect x="13.1937%" y="917" width="0.6229%" height="15" fill="rgb(236,97,10)" fg:x="233" fg:w="11"/><text x="13.4437%" y="927.50"></text></g><g><title>test_mmmh::update_2::{{closure}}::{{closure}} (11 samples, 0.62%)</title><rect x="13.1937%" y="901" width="0.6229%" height="15" fill="rgb(233,208,19)" fg:x="233" fg:w="11"/><text x="13.4437%" y="911.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.34%)</title><rect x="13.8165%" y="677" width="0.3398%" height="15" fill="rgb(216,164,2)" fg:x="244" fg:w="6"/><text x="14.0665%" y="687.50"></text></g><g><title>test_mmmh::process_name (5 samples, 0.28%)</title><rect x="14.5527%" y="661" width="0.2831%" height="15" fill="rgb(220,129,5)" fg:x="257" fg:w="5"/><text x="14.8027%" y="671.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;mut A&gt;::eq (5 samples, 0.28%)</title><rect x="14.5527%" y="645" width="0.2831%" height="15" fill="rgb(242,17,10)" fg:x="257" fg:w="5"/><text x="14.8027%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&lt;str&gt;&gt;::eq (5 samples, 0.28%)</title><rect x="14.5527%" y="629" width="0.2831%" height="15" fill="rgb(242,107,0)" fg:x="257" fg:w="5"/><text x="14.8027%" y="639.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (5 samples, 0.28%)</title><rect x="14.5527%" y="613" width="0.2831%" height="15" fill="rgb(251,28,31)" fg:x="257" fg:w="5"/><text x="14.8027%" y="623.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (5 samples, 0.28%)</title><rect x="14.5527%" y="597" width="0.2831%" height="15" fill="rgb(233,223,10)" fg:x="257" fg:w="5"/><text x="14.8027%" y="607.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (5 samples, 0.28%)</title><rect x="14.5527%" y="581" width="0.2831%" height="15" fill="rgb(215,21,27)" fg:x="257" fg:w="5"/><text x="14.8027%" y="591.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (5 samples, 0.28%)</title><rect x="14.5527%" y="565" width="0.2831%" height="15" fill="rgb(232,23,21)" fg:x="257" fg:w="5"/><text x="14.8027%" y="575.50"></text></g><g><title>test_mmmh::process_price (3 samples, 0.17%)</title><rect x="14.8358%" y="661" width="0.1699%" height="15" fill="rgb(244,5,23)" fg:x="262" fg:w="3"/><text x="15.0858%" y="671.50"></text></g><g><title>__GI___libc_malloc (12 samples, 0.68%)</title><rect x="15.1189%" y="437" width="0.6795%" height="15" fill="rgb(226,81,46)" fg:x="267" fg:w="12"/><text x="15.3689%" y="447.50"></text></g><g><title>tcache_get (2 samples, 0.11%)</title><rect x="15.6852%" y="421" width="0.1133%" height="15" fill="rgb(247,70,30)" fg:x="277" fg:w="2"/><text x="15.9352%" y="431.50"></text></g><g><title>__rdl_alloc (3 samples, 0.17%)</title><rect x="15.7984%" y="437" width="0.1699%" height="15" fill="rgb(212,68,19)" fg:x="279" fg:w="3"/><text x="16.0484%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.17%)</title><rect x="15.7984%" y="421" width="0.1699%" height="15" fill="rgb(240,187,13)" fg:x="279" fg:w="3"/><text x="16.0484%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (17 samples, 0.96%)</title><rect x="15.1189%" y="533" width="0.9626%" height="15" fill="rgb(223,113,26)" fg:x="267" fg:w="17"/><text x="15.3689%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (17 samples, 0.96%)</title><rect x="15.1189%" y="517" width="0.9626%" height="15" fill="rgb(206,192,2)" fg:x="267" fg:w="17"/><text x="15.3689%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (17 samples, 0.96%)</title><rect x="15.1189%" y="501" width="0.9626%" height="15" fill="rgb(241,108,4)" fg:x="267" fg:w="17"/><text x="15.3689%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17 samples, 0.96%)</title><rect x="15.1189%" y="485" width="0.9626%" height="15" fill="rgb(247,173,49)" fg:x="267" fg:w="17"/><text x="15.3689%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 0.96%)</title><rect x="15.1189%" y="469" width="0.9626%" height="15" fill="rgb(224,114,35)" fg:x="267" fg:w="17"/><text x="15.3689%" y="479.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.96%)</title><rect x="15.1189%" y="453" width="0.9626%" height="15" fill="rgb(245,159,27)" fg:x="267" fg:w="17"/><text x="15.3689%" y="463.50"></text></g><g><title>__rust_alloc (2 samples, 0.11%)</title><rect x="15.9683%" y="437" width="0.1133%" height="15" fill="rgb(245,172,44)" fg:x="282" fg:w="2"/><text x="16.2183%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (21 samples, 1.19%)</title><rect x="15.1189%" y="645" width="1.1891%" height="15" fill="rgb(236,23,11)" fg:x="267" fg:w="21"/><text x="15.3689%" y="655.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (21 samples, 1.19%)</title><rect x="15.1189%" y="629" width="1.1891%" height="15" fill="rgb(205,117,38)" fg:x="267" fg:w="21"/><text x="15.3689%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (21 samples, 1.19%)</title><rect x="15.1189%" y="613" width="1.1891%" height="15" fill="rgb(237,72,25)" fg:x="267" fg:w="21"/><text x="15.3689%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (21 samples, 1.19%)</title><rect x="15.1189%" y="597" width="1.1891%" height="15" fill="rgb(244,70,9)" fg:x="267" fg:w="21"/><text x="15.3689%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (21 samples, 1.19%)</title><rect x="15.1189%" y="581" width="1.1891%" height="15" fill="rgb(217,125,39)" fg:x="267" fg:w="21"/><text x="15.3689%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (21 samples, 1.19%)</title><rect x="15.1189%" y="565" width="1.1891%" height="15" fill="rgb(235,36,10)" fg:x="267" fg:w="21"/><text x="15.3689%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (21 samples, 1.19%)</title><rect x="15.1189%" y="549" width="1.1891%" height="15" fill="rgb(251,123,47)" fg:x="267" fg:w="21"/><text x="15.3689%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (4 samples, 0.23%)</title><rect x="16.0815%" y="533" width="0.2265%" height="15" fill="rgb(221,13,13)" fg:x="284" fg:w="4"/><text x="16.3315%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.23%)</title><rect x="16.0815%" y="517" width="0.2265%" height="15" fill="rgb(238,131,9)" fg:x="284" fg:w="4"/><text x="16.3315%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::ops::index::Index&lt;core::ops::range::RangeFull&gt;&gt;::index (1 samples, 0.06%)</title><rect x="16.3080%" y="613" width="0.0566%" height="15" fill="rgb(211,50,8)" fg:x="288" fg:w="1"/><text x="16.5580%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.06%)</title><rect x="16.3080%" y="597" width="0.0566%" height="15" fill="rgb(245,182,24)" fg:x="288" fg:w="1"/><text x="16.5580%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;mut A&gt;::eq (5 samples, 0.28%)</title><rect x="16.3080%" y="645" width="0.2831%" height="15" fill="rgb(242,14,37)" fg:x="288" fg:w="5"/><text x="16.5580%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&lt;str&gt;&gt;::eq (5 samples, 0.28%)</title><rect x="16.3080%" y="629" width="0.2831%" height="15" fill="rgb(246,228,12)" fg:x="288" fg:w="5"/><text x="16.5580%" y="639.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (4 samples, 0.23%)</title><rect x="16.3647%" y="613" width="0.2265%" height="15" fill="rgb(213,55,15)" fg:x="289" fg:w="4"/><text x="16.6147%" y="623.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (4 samples, 0.23%)</title><rect x="16.3647%" y="597" width="0.2265%" height="15" fill="rgb(209,9,3)" fg:x="289" fg:w="4"/><text x="16.6147%" y="607.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (4 samples, 0.23%)</title><rect x="16.3647%" y="581" width="0.2265%" height="15" fill="rgb(230,59,30)" fg:x="289" fg:w="4"/><text x="16.6147%" y="591.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (4 samples, 0.23%)</title><rect x="16.3647%" y="565" width="0.2265%" height="15" fill="rgb(209,121,21)" fg:x="289" fg:w="4"/><text x="16.6147%" y="575.50"></text></g><g><title>_int_free (27 samples, 1.53%)</title><rect x="16.9309%" y="533" width="1.5289%" height="15" fill="rgb(220,109,13)" fg:x="299" fg:w="27"/><text x="17.1809%" y="543.50"></text></g><g><title>tcache_put (10 samples, 0.57%)</title><rect x="17.8935%" y="517" width="0.5663%" height="15" fill="rgb(232,18,1)" fg:x="316" fg:w="10"/><text x="18.1435%" y="527.50"></text></g><g><title>__GI___libc_free (35 samples, 1.98%)</title><rect x="16.5912%" y="549" width="1.9819%" height="15" fill="rgb(215,41,42)" fg:x="293" fg:w="35"/><text x="16.8412%" y="559.50">_..</text></g><g><title>arena_for_chunk (2 samples, 0.11%)</title><rect x="18.4598%" y="533" width="0.1133%" height="15" fill="rgb(224,123,36)" fg:x="326" fg:w="2"/><text x="18.7098%" y="543.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.06%)</title><rect x="18.5730%" y="549" width="0.0566%" height="15" fill="rgb(240,125,3)" fg:x="328" fg:w="1"/><text x="18.8230%" y="559.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.06%)</title><rect x="18.5730%" y="533" width="0.0566%" height="15" fill="rgb(205,98,50)" fg:x="328" fg:w="1"/><text x="18.8230%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (37 samples, 2.10%)</title><rect x="16.5912%" y="581" width="2.0951%" height="15" fill="rgb(205,185,37)" fg:x="293" fg:w="37"/><text x="16.8412%" y="591.50">&lt;..</text></g><g><title>alloc::alloc::dealloc (37 samples, 2.10%)</title><rect x="16.5912%" y="565" width="2.0951%" height="15" fill="rgb(238,207,15)" fg:x="293" fg:w="37"/><text x="16.8412%" y="575.50">a..</text></g><g><title>__rust_dealloc (1 samples, 0.06%)</title><rect x="18.6297%" y="549" width="0.0566%" height="15" fill="rgb(213,199,42)" fg:x="329" fg:w="1"/><text x="18.8797%" y="559.50"></text></g><g><title>test_mmmh::process_production_site (67 samples, 3.79%)</title><rect x="15.0057%" y="661" width="3.7939%" height="15" fill="rgb(235,201,11)" fg:x="265" fg:w="67"/><text x="15.2557%" y="671.50">test..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (39 samples, 2.21%)</title><rect x="16.5912%" y="645" width="2.2084%" height="15" fill="rgb(207,46,11)" fg:x="293" fg:w="39"/><text x="16.8412%" y="655.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (39 samples, 2.21%)</title><rect x="16.5912%" y="629" width="2.2084%" height="15" fill="rgb(241,35,35)" fg:x="293" fg:w="39"/><text x="16.8412%" y="639.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (39 samples, 2.21%)</title><rect x="16.5912%" y="613" width="2.2084%" height="15" fill="rgb(243,32,47)" fg:x="293" fg:w="39"/><text x="16.8412%" y="623.50">c..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (39 samples, 2.21%)</title><rect x="16.5912%" y="597" width="2.2084%" height="15" fill="rgb(247,202,23)" fg:x="293" fg:w="39"/><text x="16.8412%" y="607.50">&lt;..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.11%)</title><rect x="18.6863%" y="581" width="0.1133%" height="15" fill="rgb(219,102,11)" fg:x="330" fg:w="2"/><text x="18.9363%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (1 samples, 0.06%)</title><rect x="19.0260%" y="549" width="0.0566%" height="15" fill="rgb(243,110,44)" fg:x="336" fg:w="1"/><text x="19.2760%" y="559.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="19.3658%" y="517" width="0.0566%" height="15" fill="rgb(222,74,54)" fg:x="342" fg:w="1"/><text x="19.6158%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.06%)</title><rect x="19.4224%" y="517" width="0.0566%" height="15" fill="rgb(216,99,12)" fg:x="343" fg:w="1"/><text x="19.6724%" y="527.50"></text></g><g><title>__entry_text_start (1 samples, 0.06%)</title><rect x="24.8584%" y="405" width="0.0566%" height="15" fill="rgb(226,22,26)" fg:x="439" fg:w="1"/><text x="25.1084%" y="415.50"></text></g><g><title>__get_user_nocheck_4 (4 samples, 0.23%)</title><rect x="24.9151%" y="325" width="0.2265%" height="15" fill="rgb(217,163,10)" fg:x="440" fg:w="4"/><text x="25.1651%" y="335.50"></text></g><g><title>futex_wait_setup (3 samples, 0.17%)</title><rect x="25.1416%" y="325" width="0.1699%" height="15" fill="rgb(213,25,53)" fg:x="444" fg:w="3"/><text x="25.3916%" y="335.50"></text></g><g><title>__GI___lll_lock_wait_private (17 samples, 0.96%)</title><rect x="24.4054%" y="437" width="0.9626%" height="15" fill="rgb(252,105,26)" fg:x="431" fg:w="17"/><text x="24.6554%" y="447.50"></text></g><g><title>futex_wait (9 samples, 0.51%)</title><rect x="24.8584%" y="421" width="0.5096%" height="15" fill="rgb(220,39,43)" fg:x="439" fg:w="9"/><text x="25.1084%" y="431.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (8 samples, 0.45%)</title><rect x="24.9151%" y="405" width="0.4530%" height="15" fill="rgb(229,68,48)" fg:x="440" fg:w="8"/><text x="25.1651%" y="415.50"></text></g><g><title>do_syscall_64 (8 samples, 0.45%)</title><rect x="24.9151%" y="389" width="0.4530%" height="15" fill="rgb(252,8,32)" fg:x="440" fg:w="8"/><text x="25.1651%" y="399.50"></text></g><g><title>__x64_sys_futex (8 samples, 0.45%)</title><rect x="24.9151%" y="373" width="0.4530%" height="15" fill="rgb(223,20,43)" fg:x="440" fg:w="8"/><text x="25.1651%" y="383.50"></text></g><g><title>do_futex (8 samples, 0.45%)</title><rect x="24.9151%" y="357" width="0.4530%" height="15" fill="rgb(229,81,49)" fg:x="440" fg:w="8"/><text x="25.1651%" y="367.50"></text></g><g><title>futex_wait (8 samples, 0.45%)</title><rect x="24.9151%" y="341" width="0.4530%" height="15" fill="rgb(236,28,36)" fg:x="440" fg:w="8"/><text x="25.1651%" y="351.50"></text></g><g><title>hash_futex (1 samples, 0.06%)</title><rect x="25.3114%" y="325" width="0.0566%" height="15" fill="rgb(249,185,26)" fg:x="447" fg:w="1"/><text x="25.5614%" y="335.50"></text></g><g><title>__entry_text_start (3 samples, 0.17%)</title><rect x="25.3681%" y="421" width="0.1699%" height="15" fill="rgb(249,174,33)" fg:x="448" fg:w="3"/><text x="25.6181%" y="431.50"></text></g><g><title>__x64_sys_futex (2 samples, 0.11%)</title><rect x="25.5379%" y="405" width="0.1133%" height="15" fill="rgb(233,201,37)" fg:x="451" fg:w="2"/><text x="25.7879%" y="415.50"></text></g><g><title>_raw_spin_lock (2 samples, 0.11%)</title><rect x="25.7078%" y="357" width="0.1133%" height="15" fill="rgb(221,78,26)" fg:x="454" fg:w="2"/><text x="25.9578%" y="367.50"></text></g><g><title>_raw_spin_lock (2 samples, 0.11%)</title><rect x="25.9909%" y="341" width="0.1133%" height="15" fill="rgb(250,127,30)" fg:x="459" fg:w="2"/><text x="26.2409%" y="351.50"></text></g><g><title>native_queued_spin_lock_slowpath (2 samples, 0.11%)</title><rect x="25.9909%" y="325" width="0.1133%" height="15" fill="rgb(230,49,44)" fg:x="459" fg:w="2"/><text x="26.2409%" y="335.50"></text></g><g><title>native_queued_spin_lock_slowpath.part.0 (2 samples, 0.11%)</title><rect x="25.9909%" y="309" width="0.1133%" height="15" fill="rgb(229,67,23)" fg:x="459" fg:w="2"/><text x="26.2409%" y="319.50"></text></g><g><title>futex_wake (7 samples, 0.40%)</title><rect x="25.8211%" y="357" width="0.3964%" height="15" fill="rgb(249,83,47)" fg:x="456" fg:w="7"/><text x="26.0711%" y="367.50"></text></g><g><title>wake_up_q (2 samples, 0.11%)</title><rect x="26.1042%" y="341" width="0.1133%" height="15" fill="rgb(215,43,3)" fg:x="461" fg:w="2"/><text x="26.3542%" y="351.50"></text></g><g><title>try_to_wake_up (2 samples, 0.11%)</title><rect x="26.1042%" y="325" width="0.1133%" height="15" fill="rgb(238,154,13)" fg:x="461" fg:w="2"/><text x="26.3542%" y="335.50"></text></g><g><title>__x64_sys_futex (13 samples, 0.74%)</title><rect x="25.6512%" y="389" width="0.7361%" height="15" fill="rgb(219,56,2)" fg:x="453" fg:w="13"/><text x="25.9012%" y="399.50"></text></g><g><title>do_futex (12 samples, 0.68%)</title><rect x="25.7078%" y="373" width="0.6795%" height="15" fill="rgb(233,0,4)" fg:x="454" fg:w="12"/><text x="25.9578%" y="383.50"></text></g><g><title>hash_futex (3 samples, 0.17%)</title><rect x="26.2174%" y="357" width="0.1699%" height="15" fill="rgb(235,30,7)" fg:x="463" fg:w="3"/><text x="26.4674%" y="367.50"></text></g><g><title>do_syscall_64 (17 samples, 0.96%)</title><rect x="25.6512%" y="405" width="0.9626%" height="15" fill="rgb(250,79,13)" fg:x="453" fg:w="17"/><text x="25.9012%" y="415.50"></text></g><g><title>syscall_exit_to_user_mode (4 samples, 0.23%)</title><rect x="26.3873%" y="389" width="0.2265%" height="15" fill="rgb(211,146,34)" fg:x="466" fg:w="4"/><text x="26.6373%" y="399.50"></text></g><g><title>exit_to_user_mode_prepare (4 samples, 0.23%)</title><rect x="26.3873%" y="373" width="0.2265%" height="15" fill="rgb(228,22,38)" fg:x="466" fg:w="4"/><text x="26.6373%" y="383.50"></text></g><g><title>__GI___lll_lock_wake_private (23 samples, 1.30%)</title><rect x="25.3681%" y="437" width="1.3024%" height="15" fill="rgb(235,168,5)" fg:x="448" fg:w="23"/><text x="25.6181%" y="447.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (20 samples, 1.13%)</title><rect x="25.5379%" y="421" width="1.1325%" height="15" fill="rgb(221,155,16)" fg:x="451" fg:w="20"/><text x="25.7879%" y="431.50"></text></g><g><title>syscall_exit_to_user_mode (1 samples, 0.06%)</title><rect x="26.6138%" y="405" width="0.0566%" height="15" fill="rgb(215,215,53)" fg:x="470" fg:w="1"/><text x="26.8638%" y="415.50"></text></g><g><title>_int_realloc (10 samples, 0.57%)</title><rect x="26.6704%" y="437" width="0.5663%" height="15" fill="rgb(223,4,10)" fg:x="471" fg:w="10"/><text x="26.9204%" y="447.50"></text></g><g><title>arena_for_chunk (4 samples, 0.23%)</title><rect x="27.2367%" y="437" width="0.2265%" height="15" fill="rgb(234,103,6)" fg:x="481" fg:w="4"/><text x="27.4867%" y="447.50"></text></g><g><title>__GI___libc_realloc (136 samples, 7.70%)</title><rect x="19.8754%" y="453" width="7.7010%" height="15" fill="rgb(227,97,0)" fg:x="351" fg:w="136"/><text x="20.1254%" y="463.50">__GI___libc..</text></g><g><title>checked_request2size (2 samples, 0.11%)</title><rect x="27.4632%" y="437" width="0.1133%" height="15" fill="rgb(234,150,53)" fg:x="485" fg:w="2"/><text x="27.7132%" y="447.50"></text></g><g><title>__rdl_realloc (4 samples, 0.23%)</title><rect x="27.5764%" y="453" width="0.2265%" height="15" fill="rgb(228,201,54)" fg:x="487" fg:w="4"/><text x="27.8264%" y="463.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (2 samples, 0.11%)</title><rect x="27.6897%" y="437" width="0.1133%" height="15" fill="rgb(222,22,37)" fg:x="489" fg:w="2"/><text x="27.9397%" y="447.50"></text></g><g><title>alloc::string::String::push_str (160 samples, 9.06%)</title><rect x="18.7995%" y="645" width="9.0600%" height="15" fill="rgb(237,53,32)" fg:x="332" fg:w="160"/><text x="19.0495%" y="655.50">alloc::string..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (160 samples, 9.06%)</title><rect x="18.7995%" y="629" width="9.0600%" height="15" fill="rgb(233,25,53)" fg:x="332" fg:w="160"/><text x="19.0495%" y="639.50">alloc::vec::V..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (160 samples, 9.06%)</title><rect x="18.7995%" y="613" width="9.0600%" height="15" fill="rgb(210,40,34)" fg:x="332" fg:w="160"/><text x="19.0495%" y="623.50">&lt;alloc::vec::..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (160 samples, 9.06%)</title><rect x="18.7995%" y="597" width="9.0600%" height="15" fill="rgb(241,220,44)" fg:x="332" fg:w="160"/><text x="19.0495%" y="607.50">alloc::vec::V..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (159 samples, 9.00%)</title><rect x="18.8562%" y="581" width="9.0034%" height="15" fill="rgb(235,28,35)" fg:x="333" fg:w="159"/><text x="19.1062%" y="591.50">alloc::vec::V..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (159 samples, 9.00%)</title><rect x="18.8562%" y="565" width="9.0034%" height="15" fill="rgb(210,56,17)" fg:x="333" fg:w="159"/><text x="19.1062%" y="575.50">alloc::raw_ve..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (155 samples, 8.78%)</title><rect x="19.0827%" y="549" width="8.7769%" height="15" fill="rgb(224,130,29)" fg:x="337" fg:w="155"/><text x="19.3327%" y="559.50">alloc::raw_v..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (155 samples, 8.78%)</title><rect x="19.0827%" y="533" width="8.7769%" height="15" fill="rgb(235,212,8)" fg:x="337" fg:w="155"/><text x="19.3327%" y="543.50">alloc::raw_v..</text></g><g><title>alloc::raw_vec::finish_grow (148 samples, 8.38%)</title><rect x="19.4790%" y="517" width="8.3805%" height="15" fill="rgb(223,33,50)" fg:x="344" fg:w="148"/><text x="19.7290%" y="527.50">alloc::raw_v..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (143 samples, 8.10%)</title><rect x="19.7622%" y="501" width="8.0974%" height="15" fill="rgb(219,149,13)" fg:x="349" fg:w="143"/><text x="20.0122%" y="511.50">&lt;alloc::all..</text></g><g><title>alloc::alloc::Global::grow_impl (143 samples, 8.10%)</title><rect x="19.7622%" y="485" width="8.0974%" height="15" fill="rgb(250,156,29)" fg:x="349" fg:w="143"/><text x="20.0122%" y="495.50">alloc::allo..</text></g><g><title>alloc::alloc::realloc (143 samples, 8.10%)</title><rect x="19.7622%" y="469" width="8.0974%" height="15" fill="rgb(216,193,19)" fg:x="349" fg:w="143"/><text x="20.0122%" y="479.50">alloc::allo..</text></g><g><title>__rust_realloc (1 samples, 0.06%)</title><rect x="27.8029%" y="453" width="0.0566%" height="15" fill="rgb(216,135,14)" fg:x="491" fg:w="1"/><text x="28.0529%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::ops::index::Index&lt;core::ops::range::RangeFull&gt;&gt;::index (3 samples, 0.17%)</title><rect x="27.8596%" y="613" width="0.1699%" height="15" fill="rgb(241,47,5)" fg:x="492" fg:w="3"/><text x="28.1096%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.17%)</title><rect x="27.8596%" y="597" width="0.1699%" height="15" fill="rgb(233,42,35)" fg:x="492" fg:w="3"/><text x="28.1096%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (2 samples, 0.11%)</title><rect x="27.9162%" y="581" width="0.1133%" height="15" fill="rgb(231,13,6)" fg:x="493" fg:w="2"/><text x="28.1662%" y="591.50"></text></g><g><title>std::panic::catch_unwind (254 samples, 14.38%)</title><rect x="13.8165%" y="837" width="14.3828%" height="15" fill="rgb(207,181,40)" fg:x="244" fg:w="254"/><text x="14.0665%" y="847.50">std::panic::catch_unwi..</text></g><g><title>std::panicking::try (254 samples, 14.38%)</title><rect x="13.8165%" y="821" width="14.3828%" height="15" fill="rgb(254,173,49)" fg:x="244" fg:w="254"/><text x="14.0665%" y="831.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (254 samples, 14.38%)</title><rect x="13.8165%" y="805" width="14.3828%" height="15" fill="rgb(221,1,38)" fg:x="244" fg:w="254"/><text x="14.0665%" y="815.50">std::panicking::try::d..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (254 samples, 14.38%)</title><rect x="13.8165%" y="789" width="14.3828%" height="15" fill="rgb(206,124,46)" fg:x="244" fg:w="254"/><text x="14.0665%" y="799.50">&lt;core::panic::unwind_s..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (254 samples, 14.38%)</title><rect x="13.8165%" y="773" width="14.3828%" height="15" fill="rgb(249,21,11)" fg:x="244" fg:w="254"/><text x="14.0665%" y="783.50">std::thread::Builder::..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (254 samples, 14.38%)</title><rect x="13.8165%" y="757" width="14.3828%" height="15" fill="rgb(222,201,40)" fg:x="244" fg:w="254"/><text x="14.0665%" y="767.50">std::sys_common::backt..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (254 samples, 14.38%)</title><rect x="13.8165%" y="741" width="14.3828%" height="15" fill="rgb(235,61,29)" fg:x="244" fg:w="254"/><text x="14.0665%" y="751.50">&lt;alloc::boxed::Box&lt;F,A..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (254 samples, 14.38%)</title><rect x="13.8165%" y="725" width="14.3828%" height="15" fill="rgb(219,207,3)" fg:x="244" fg:w="254"/><text x="14.0665%" y="735.50">core::ops::function::F..</text></g><g><title>crossbeam_utils::thread::ScopedThreadBuilder::spawn::{{closure}} (254 samples, 14.38%)</title><rect x="13.8165%" y="709" width="14.3828%" height="15" fill="rgb(222,56,46)" fg:x="244" fg:w="254"/><text x="14.0665%" y="719.50">crossbeam_utils::threa..</text></g><g><title>test_mmmh::update_2::{{closure}}::{{closure}} (254 samples, 14.38%)</title><rect x="13.8165%" y="693" width="14.3828%" height="15" fill="rgb(239,76,54)" fg:x="244" fg:w="254"/><text x="14.0665%" y="703.50">test_mmmh::update_2::{..</text></g><g><title>test_mmmh::Product::update_product (248 samples, 14.04%)</title><rect x="14.1563%" y="677" width="14.0430%" height="15" fill="rgb(231,124,27)" fg:x="250" fg:w="248"/><text x="14.4063%" y="687.50">test_mmmh::Product::u..</text></g><g><title>test_mmmh::process_vendor (166 samples, 9.40%)</title><rect x="18.7995%" y="661" width="9.3998%" height="15" fill="rgb(249,195,6)" fg:x="332" fg:w="166"/><text x="19.0495%" y="671.50">test_mmmh::pr..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;mut A&gt;::ne (6 samples, 0.34%)</title><rect x="27.8596%" y="645" width="0.3398%" height="15" fill="rgb(237,174,47)" fg:x="492" fg:w="6"/><text x="28.1096%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&lt;str&gt;&gt;::ne (6 samples, 0.34%)</title><rect x="27.8596%" y="629" width="0.3398%" height="15" fill="rgb(206,201,31)" fg:x="492" fg:w="6"/><text x="28.1096%" y="639.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::ne (3 samples, 0.17%)</title><rect x="28.0294%" y="613" width="0.1699%" height="15" fill="rgb(231,57,52)" fg:x="495" fg:w="3"/><text x="28.2794%" y="623.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (3 samples, 0.17%)</title><rect x="28.0294%" y="597" width="0.1699%" height="15" fill="rgb(248,177,22)" fg:x="495" fg:w="3"/><text x="28.2794%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (3 samples, 0.17%)</title><rect x="28.0294%" y="581" width="0.1699%" height="15" fill="rgb(215,211,37)" fg:x="495" fg:w="3"/><text x="28.2794%" y="591.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (3 samples, 0.17%)</title><rect x="28.0294%" y="565" width="0.1699%" height="15" fill="rgb(241,128,51)" fg:x="495" fg:w="3"/><text x="28.2794%" y="575.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (3 samples, 0.17%)</title><rect x="28.0294%" y="549" width="0.1699%" height="15" fill="rgb(227,165,31)" fg:x="495" fg:w="3"/><text x="28.2794%" y="559.50"></text></g><g><title>__clone3 (255 samples, 14.44%)</title><rect x="13.8165%" y="949" width="14.4394%" height="15" fill="rgb(228,167,24)" fg:x="244" fg:w="255"/><text x="14.0665%" y="959.50">__clone3</text></g><g><title>start_thread (255 samples, 14.44%)</title><rect x="13.8165%" y="933" width="14.4394%" height="15" fill="rgb(228,143,12)" fg:x="244" fg:w="255"/><text x="14.0665%" y="943.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (255 samples, 14.44%)</title><rect x="13.8165%" y="917" width="14.4394%" height="15" fill="rgb(249,149,8)" fg:x="244" fg:w="255"/><text x="14.0665%" y="927.50">std::sys::unix::thread..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (255 samples, 14.44%)</title><rect x="13.8165%" y="901" width="14.4394%" height="15" fill="rgb(243,35,44)" fg:x="244" fg:w="255"/><text x="14.0665%" y="911.50">&lt;alloc::boxed::Box&lt;F,A..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (255 samples, 14.44%)</title><rect x="13.8165%" y="885" width="14.4394%" height="15" fill="rgb(246,89,9)" fg:x="244" fg:w="255"/><text x="14.0665%" y="895.50">&lt;alloc::boxed::Box&lt;F,A..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (255 samples, 14.44%)</title><rect x="13.8165%" y="869" width="14.4394%" height="15" fill="rgb(233,213,13)" fg:x="244" fg:w="255"/><text x="14.0665%" y="879.50">core::ops::function::F..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (255 samples, 14.44%)</title><rect x="13.8165%" y="853" width="14.4394%" height="15" fill="rgb(233,141,41)" fg:x="244" fg:w="255"/><text x="14.0665%" y="863.50">std::thread::Builder::..</text></g><g><title>std::sys::unix::thread::guard::current (1 samples, 0.06%)</title><rect x="28.1993%" y="837" width="0.0566%" height="15" fill="rgb(239,167,4)" fg:x="498" fg:w="1"/><text x="28.4493%" y="847.50"></text></g><g><title>__pthread_getattr_np (1 samples, 0.06%)</title><rect x="28.1993%" y="821" width="0.0566%" height="15" fill="rgb(209,217,16)" fg:x="498" fg:w="1"/><text x="28.4493%" y="831.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.06%)</title><rect x="28.1993%" y="805" width="0.0566%" height="15" fill="rgb(219,88,35)" fg:x="498" fg:w="1"/><text x="28.4493%" y="815.50"></text></g><g><title>tcache_init (1 samples, 0.06%)</title><rect x="28.1993%" y="789" width="0.0566%" height="15" fill="rgb(220,193,23)" fg:x="498" fg:w="1"/><text x="28.4493%" y="799.50"></text></g><g><title>tcache_init (1 samples, 0.06%)</title><rect x="28.1993%" y="773" width="0.0566%" height="15" fill="rgb(230,90,52)" fg:x="498" fg:w="1"/><text x="28.4493%" y="783.50"></text></g><g><title>arena_get2 (1 samples, 0.06%)</title><rect x="28.1993%" y="757" width="0.0566%" height="15" fill="rgb(252,106,19)" fg:x="498" fg:w="1"/><text x="28.4493%" y="767.50"></text></g><g><title>arena_get2 (1 samples, 0.06%)</title><rect x="28.1993%" y="741" width="0.0566%" height="15" fill="rgb(206,74,20)" fg:x="498" fg:w="1"/><text x="28.4493%" y="751.50"></text></g><g><title>_int_new_arena (1 samples, 0.06%)</title><rect x="28.1993%" y="725" width="0.0566%" height="15" fill="rgb(230,138,44)" fg:x="498" fg:w="1"/><text x="28.4493%" y="735.50"></text></g><g><title>new_heap (1 samples, 0.06%)</title><rect x="28.1993%" y="709" width="0.0566%" height="15" fill="rgb(235,182,43)" fg:x="498" fg:w="1"/><text x="28.4493%" y="719.50"></text></g><g><title>alloc_new_heap (1 samples, 0.06%)</title><rect x="28.1993%" y="693" width="0.0566%" height="15" fill="rgb(242,16,51)" fg:x="498" fg:w="1"/><text x="28.4493%" y="703.50"></text></g><g><title>__GI___munmap (1 samples, 0.06%)</title><rect x="28.1993%" y="677" width="0.0566%" height="15" fill="rgb(248,9,4)" fg:x="498" fg:w="1"/><text x="28.4493%" y="687.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.06%)</title><rect x="28.1993%" y="661" width="0.0566%" height="15" fill="rgb(210,31,22)" fg:x="498" fg:w="1"/><text x="28.4493%" y="671.50"></text></g><g><title>do_syscall_64 (1 samples, 0.06%)</title><rect x="28.1993%" y="645" width="0.0566%" height="15" fill="rgb(239,54,39)" fg:x="498" fg:w="1"/><text x="28.4493%" y="655.50"></text></g><g><title>__x64_sys_munmap (1 samples, 0.06%)</title><rect x="28.1993%" y="629" width="0.0566%" height="15" fill="rgb(230,99,41)" fg:x="498" fg:w="1"/><text x="28.4493%" y="639.50"></text></g><g><title>__vm_munmap (1 samples, 0.06%)</title><rect x="28.1993%" y="613" width="0.0566%" height="15" fill="rgb(253,106,12)" fg:x="498" fg:w="1"/><text x="28.4493%" y="623.50"></text></g><g><title>__do_munmap (1 samples, 0.06%)</title><rect x="28.1993%" y="597" width="0.0566%" height="15" fill="rgb(213,46,41)" fg:x="498" fg:w="1"/><text x="28.4493%" y="607.50"></text></g><g><title>unmap_region (1 samples, 0.06%)</title><rect x="28.1993%" y="581" width="0.0566%" height="15" fill="rgb(215,133,35)" fg:x="498" fg:w="1"/><text x="28.4493%" y="591.50"></text></g><g><title>free_pgtables (1 samples, 0.06%)</title><rect x="28.1993%" y="565" width="0.0566%" height="15" fill="rgb(213,28,5)" fg:x="498" fg:w="1"/><text x="28.4493%" y="575.50"></text></g><g><title>free_pgd_range (1 samples, 0.06%)</title><rect x="28.1993%" y="549" width="0.0566%" height="15" fill="rgb(215,77,49)" fg:x="498" fg:w="1"/><text x="28.4493%" y="559.50"></text></g><g><title>free_p4d_range (1 samples, 0.06%)</title><rect x="28.1993%" y="533" width="0.0566%" height="15" fill="rgb(248,100,22)" fg:x="498" fg:w="1"/><text x="28.4493%" y="543.50"></text></g><g><title>free_pud_range (1 samples, 0.06%)</title><rect x="28.1993%" y="517" width="0.0566%" height="15" fill="rgb(208,67,9)" fg:x="498" fg:w="1"/><text x="28.4493%" y="527.50"></text></g><g><title>down_read_trylock (1 samples, 0.06%)</title><rect x="29.6716%" y="437" width="0.0566%" height="15" fill="rgb(219,133,21)" fg:x="524" fg:w="1"/><text x="29.9216%" y="447.50"></text></g><g><title>find_vma (1 samples, 0.06%)</title><rect x="29.7282%" y="437" width="0.0566%" height="15" fill="rgb(246,46,29)" fg:x="525" fg:w="1"/><text x="29.9782%" y="447.50"></text></g><g><title>__count_memcg_events (2 samples, 0.11%)</title><rect x="29.8414%" y="421" width="0.1133%" height="15" fill="rgb(246,185,52)" fg:x="527" fg:w="2"/><text x="30.0914%" y="431.50"></text></g><g><title>cgroup_rstat_updated (2 samples, 0.11%)</title><rect x="29.8414%" y="405" width="0.1133%" height="15" fill="rgb(252,136,11)" fg:x="527" fg:w="2"/><text x="30.0914%" y="415.50"></text></g><g><title>_raw_spin_lock (3 samples, 0.17%)</title><rect x="30.4643%" y="389" width="0.1699%" height="15" fill="rgb(219,138,53)" fg:x="538" fg:w="3"/><text x="30.7143%" y="399.50"></text></g><g><title>__alloc_pages (1 samples, 0.06%)</title><rect x="30.8607%" y="373" width="0.0566%" height="15" fill="rgb(211,51,23)" fg:x="545" fg:w="1"/><text x="31.1107%" y="383.50"></text></g><g><title>__cgroup_throttle_swaprate (1 samples, 0.06%)</title><rect x="30.9173%" y="373" width="0.0566%" height="15" fill="rgb(247,221,28)" fg:x="546" fg:w="1"/><text x="31.1673%" y="383.50"></text></g><g><title>mem_cgroup_charge_statistics.constprop.0 (2 samples, 0.11%)</title><rect x="32.1065%" y="341" width="0.1133%" height="15" fill="rgb(251,222,45)" fg:x="567" fg:w="2"/><text x="32.3565%" y="351.50"></text></g><g><title>cgroup_rstat_updated (1 samples, 0.06%)</title><rect x="32.1631%" y="325" width="0.0566%" height="15" fill="rgb(217,162,53)" fg:x="568" fg:w="1"/><text x="32.4131%" y="335.50"></text></g><g><title>charge_memcg (31 samples, 1.76%)</title><rect x="30.9740%" y="357" width="1.7554%" height="15" fill="rgb(229,93,14)" fg:x="547" fg:w="31"/><text x="31.2240%" y="367.50"></text></g><g><title>try_charge_memcg (9 samples, 0.51%)</title><rect x="32.2197%" y="341" width="0.5096%" height="15" fill="rgb(209,67,49)" fg:x="569" fg:w="9"/><text x="32.4697%" y="351.50"></text></g><g><title>get_mem_cgroup_from_mm (5 samples, 0.28%)</title><rect x="32.7293%" y="357" width="0.2831%" height="15" fill="rgb(213,87,29)" fg:x="578" fg:w="5"/><text x="32.9793%" y="367.50"></text></g><g><title>__mem_cgroup_charge (37 samples, 2.10%)</title><rect x="30.9740%" y="373" width="2.0951%" height="15" fill="rgb(205,151,52)" fg:x="547" fg:w="37"/><text x="31.2240%" y="383.50">_..</text></g><g><title>rcu_read_unlock_strict (1 samples, 0.06%)</title><rect x="33.0125%" y="357" width="0.0566%" height="15" fill="rgb(253,215,39)" fg:x="583" fg:w="1"/><text x="33.2625%" y="367.50"></text></g><g><title>__next_zones_zonelist (2 samples, 0.11%)</title><rect x="33.4088%" y="341" width="0.1133%" height="15" fill="rgb(221,220,41)" fg:x="590" fg:w="2"/><text x="33.6588%" y="351.50"></text></g><g><title>clear_page_erms (11 samples, 0.62%)</title><rect x="33.7486%" y="325" width="0.6229%" height="15" fill="rgb(218,133,21)" fg:x="596" fg:w="11"/><text x="33.9986%" y="335.50"></text></g><g><title>get_page_from_freelist (20 samples, 1.13%)</title><rect x="33.5221%" y="341" width="1.1325%" height="15" fill="rgb(221,193,43)" fg:x="592" fg:w="20"/><text x="33.7721%" y="351.50"></text></g><g><title>rmqueue (5 samples, 0.28%)</title><rect x="34.3715%" y="325" width="0.2831%" height="15" fill="rgb(240,128,52)" fg:x="607" fg:w="5"/><text x="34.6215%" y="335.50"></text></g><g><title>rmqueue_bulk (2 samples, 0.11%)</title><rect x="34.5413%" y="309" width="0.1133%" height="15" fill="rgb(253,114,12)" fg:x="610" fg:w="2"/><text x="34.7913%" y="319.50"></text></g><g><title>rcu_all_qs (1 samples, 0.06%)</title><rect x="34.6546%" y="341" width="0.0566%" height="15" fill="rgb(215,223,47)" fg:x="612" fg:w="1"/><text x="34.9046%" y="351.50"></text></g><g><title>__alloc_pages (27 samples, 1.53%)</title><rect x="33.2390%" y="357" width="1.5289%" height="15" fill="rgb(248,225,23)" fg:x="587" fg:w="27"/><text x="33.4890%" y="367.50"></text></g><g><title>should_fail_alloc_page (1 samples, 0.06%)</title><rect x="34.7112%" y="341" width="0.0566%" height="15" fill="rgb(250,108,0)" fg:x="613" fg:w="1"/><text x="34.9612%" y="351.50"></text></g><g><title>alloc_pages_vma (31 samples, 1.76%)</title><rect x="33.0691%" y="373" width="1.7554%" height="15" fill="rgb(228,208,7)" fg:x="584" fg:w="31"/><text x="33.3191%" y="383.50"></text></g><g><title>__next_zones_zonelist (1 samples, 0.06%)</title><rect x="34.7678%" y="357" width="0.0566%" height="15" fill="rgb(244,45,10)" fg:x="614" fg:w="1"/><text x="35.0178%" y="367.50"></text></g><g><title>lru_cache_add (1 samples, 0.06%)</title><rect x="34.8245%" y="373" width="0.0566%" height="15" fill="rgb(207,125,25)" fg:x="615" fg:w="1"/><text x="35.0745%" y="383.50"></text></g><g><title>__mod_zone_page_state (1 samples, 0.06%)</title><rect x="35.1076%" y="309" width="0.0566%" height="15" fill="rgb(210,195,18)" fg:x="620" fg:w="1"/><text x="35.3576%" y="319.50"></text></g><g><title>__pagevec_lru_add_fn (4 samples, 0.23%)</title><rect x="35.0510%" y="325" width="0.2265%" height="15" fill="rgb(249,80,12)" fg:x="619" fg:w="4"/><text x="35.3010%" y="335.50"></text></g><g><title>page_mapping (2 samples, 0.11%)</title><rect x="35.1642%" y="309" width="0.1133%" height="15" fill="rgb(221,65,9)" fg:x="621" fg:w="2"/><text x="35.4142%" y="319.50"></text></g><g><title>lock_page_lruvec_irqsave (1 samples, 0.06%)</title><rect x="35.2775%" y="325" width="0.0566%" height="15" fill="rgb(235,49,36)" fg:x="623" fg:w="1"/><text x="35.5275%" y="335.50"></text></g><g><title>lru_cache_add_inactive_or_unevictable (10 samples, 0.57%)</title><rect x="34.8811%" y="373" width="0.5663%" height="15" fill="rgb(225,32,20)" fg:x="616" fg:w="10"/><text x="35.1311%" y="383.50"></text></g><g><title>lru_cache_add (10 samples, 0.57%)</title><rect x="34.8811%" y="357" width="0.5663%" height="15" fill="rgb(215,141,46)" fg:x="616" fg:w="10"/><text x="35.1311%" y="367.50"></text></g><g><title>__pagevec_lru_add (7 samples, 0.40%)</title><rect x="35.0510%" y="341" width="0.3964%" height="15" fill="rgb(250,160,47)" fg:x="619" fg:w="7"/><text x="35.3010%" y="351.50"></text></g><g><title>release_pages (2 samples, 0.11%)</title><rect x="35.3341%" y="325" width="0.1133%" height="15" fill="rgb(216,222,40)" fg:x="624" fg:w="2"/><text x="35.5841%" y="335.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.06%)</title><rect x="35.5606%" y="341" width="0.0566%" height="15" fill="rgb(234,217,39)" fg:x="628" fg:w="1"/><text x="35.8106%" y="351.50"></text></g><g><title>__mod_memcg_lruvec_state (1 samples, 0.06%)</title><rect x="35.5606%" y="325" width="0.0566%" height="15" fill="rgb(207,178,40)" fg:x="628" fg:w="1"/><text x="35.8106%" y="335.50"></text></g><g><title>cgroup_rstat_updated (1 samples, 0.06%)</title><rect x="35.5606%" y="309" width="0.0566%" height="15" fill="rgb(221,136,13)" fg:x="628" fg:w="1"/><text x="35.8106%" y="319.50"></text></g><g><title>do_anonymous_page (89 samples, 5.04%)</title><rect x="30.6342%" y="389" width="5.0396%" height="15" fill="rgb(249,199,10)" fg:x="541" fg:w="89"/><text x="30.8842%" y="399.50">do_ano..</text></g><g><title>page_add_new_anon_rmap (4 samples, 0.23%)</title><rect x="35.4473%" y="373" width="0.2265%" height="15" fill="rgb(249,222,13)" fg:x="626" fg:w="4"/><text x="35.6973%" y="383.50"></text></g><g><title>__mod_lruvec_page_state (4 samples, 0.23%)</title><rect x="35.4473%" y="357" width="0.2265%" height="15" fill="rgb(244,185,38)" fg:x="626" fg:w="4"/><text x="35.6973%" y="367.50"></text></g><g><title>__mod_node_page_state (1 samples, 0.06%)</title><rect x="35.6172%" y="341" width="0.0566%" height="15" fill="rgb(236,202,9)" fg:x="629" fg:w="1"/><text x="35.8672%" y="351.50"></text></g><g><title>handle_pte_fault (94 samples, 5.32%)</title><rect x="30.4077%" y="405" width="5.3228%" height="15" fill="rgb(250,229,37)" fg:x="537" fg:w="94"/><text x="30.6577%" y="415.50">handle_..</text></g><g><title>pmd_page_vaddr (1 samples, 0.06%)</title><rect x="35.6738%" y="389" width="0.0566%" height="15" fill="rgb(206,174,23)" fg:x="630" fg:w="1"/><text x="35.9238%" y="399.50"></text></g><g><title>__handle_mm_fault (103 samples, 5.83%)</title><rect x="29.9547%" y="421" width="5.8324%" height="15" fill="rgb(211,33,43)" fg:x="529" fg:w="103"/><text x="30.2047%" y="431.50">__handl..</text></g><g><title>pmd_val (1 samples, 0.06%)</title><rect x="35.7305%" y="405" width="0.0566%" height="15" fill="rgb(245,58,50)" fg:x="631" fg:w="1"/><text x="35.9805%" y="415.50"></text></g><g><title>do_user_addr_fault (109 samples, 6.17%)</title><rect x="29.6716%" y="453" width="6.1721%" height="15" fill="rgb(244,68,36)" fg:x="524" fg:w="109"/><text x="29.9216%" y="463.50">do_user_..</text></g><g><title>handle_mm_fault (107 samples, 6.06%)</title><rect x="29.7848%" y="437" width="6.0589%" height="15" fill="rgb(232,229,15)" fg:x="526" fg:w="107"/><text x="30.0348%" y="447.50">handle_m..</text></g><g><title>sync_mm_rss (1 samples, 0.06%)</title><rect x="35.7871%" y="421" width="0.0566%" height="15" fill="rgb(254,30,23)" fg:x="632" fg:w="1"/><text x="36.0371%" y="431.50"></text></g><g><title>asm_exc_page_fault (111 samples, 6.29%)</title><rect x="29.6716%" y="485" width="6.2854%" height="15" fill="rgb(235,160,14)" fg:x="524" fg:w="111"/><text x="29.9216%" y="495.50">asm_exc_..</text></g><g><title>exc_page_fault (111 samples, 6.29%)</title><rect x="29.6716%" y="469" width="6.2854%" height="15" fill="rgb(212,155,44)" fg:x="524" fg:w="111"/><text x="29.9216%" y="479.50">exc_page..</text></g><g><title>irqentry_exit (2 samples, 0.11%)</title><rect x="35.8437%" y="453" width="0.1133%" height="15" fill="rgb(226,2,50)" fg:x="633" fg:w="2"/><text x="36.0937%" y="463.50"></text></g><g><title>irqentry_exit_to_user_mode (2 samples, 0.11%)</title><rect x="35.8437%" y="437" width="0.1133%" height="15" fill="rgb(234,177,6)" fg:x="633" fg:w="2"/><text x="36.0937%" y="447.50"></text></g><g><title>exit_to_user_mode_prepare (2 samples, 0.11%)</title><rect x="35.8437%" y="421" width="0.1133%" height="15" fill="rgb(217,24,9)" fg:x="633" fg:w="2"/><text x="36.0937%" y="431.50"></text></g><g><title>fpregs_assert_state_consistent (1 samples, 0.06%)</title><rect x="35.9003%" y="405" width="0.0566%" height="15" fill="rgb(220,13,46)" fg:x="634" fg:w="1"/><text x="36.1503%" y="415.50"></text></g><g><title>error_entry (1 samples, 0.06%)</title><rect x="35.9570%" y="485" width="0.0566%" height="15" fill="rgb(239,221,27)" fg:x="635" fg:w="1"/><text x="36.2070%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (162 samples, 9.17%)</title><rect x="28.2559%" y="533" width="9.1733%" height="15" fill="rgb(222,198,25)" fg:x="499" fg:w="162"/><text x="28.5059%" y="543.50">core::iter::t..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend::{{closure}} (162 samples, 9.17%)</title><rect x="28.2559%" y="517" width="9.1733%" height="15" fill="rgb(211,99,13)" fg:x="499" fg:w="162"/><text x="28.5059%" y="527.50">&lt;alloc::vec::..</text></g><g><title>core::ptr::write (162 samples, 9.17%)</title><rect x="28.2559%" y="501" width="9.1733%" height="15" fill="rgb(232,111,31)" fg:x="499" fg:w="162"/><text x="28.5059%" y="511.50">core::ptr::wr..</text></g><g><title>sync_regs (25 samples, 1.42%)</title><rect x="36.0136%" y="485" width="1.4156%" height="15" fill="rgb(245,82,37)" fg:x="636" fg:w="25"/><text x="36.2636%" y="495.50"></text></g><g><title>__irqentry_text_end (4 samples, 0.23%)</title><rect x="60.2492%" y="277" width="0.2265%" height="15" fill="rgb(227,149,46)" fg:x="1064" fg:w="4"/><text x="60.4992%" y="287.50"></text></g><g><title>alloc_perturb (9 samples, 0.51%)</title><rect x="60.4757%" y="277" width="0.5096%" height="15" fill="rgb(218,36,50)" fg:x="1068" fg:w="9"/><text x="60.7257%" y="287.50"></text></g><g><title>down_read_trylock (2 samples, 0.11%)</title><rect x="61.0985%" y="229" width="0.1133%" height="15" fill="rgb(226,80,48)" fg:x="1079" fg:w="2"/><text x="61.3485%" y="239.50"></text></g><g><title>find_vma (2 samples, 0.11%)</title><rect x="61.2118%" y="229" width="0.1133%" height="15" fill="rgb(238,224,15)" fg:x="1081" fg:w="2"/><text x="61.4618%" y="239.50"></text></g><g><title>vmacache_find (2 samples, 0.11%)</title><rect x="61.2118%" y="213" width="0.1133%" height="15" fill="rgb(241,136,10)" fg:x="1081" fg:w="2"/><text x="61.4618%" y="223.50"></text></g><g><title>__count_memcg_events (1 samples, 0.06%)</title><rect x="61.4383%" y="213" width="0.0566%" height="15" fill="rgb(208,32,45)" fg:x="1085" fg:w="1"/><text x="61.6883%" y="223.50"></text></g><g><title>do_anonymous_page (1 samples, 0.06%)</title><rect x="61.8347%" y="197" width="0.0566%" height="15" fill="rgb(207,135,9)" fg:x="1092" fg:w="1"/><text x="62.0847%" y="207.50"></text></g><g><title>_raw_spin_lock (3 samples, 0.17%)</title><rect x="61.9479%" y="181" width="0.1699%" height="15" fill="rgb(206,86,44)" fg:x="1094" fg:w="3"/><text x="62.1979%" y="191.50"></text></g><g><title>alloc_pages_vma (1 samples, 0.06%)</title><rect x="62.1178%" y="181" width="0.0566%" height="15" fill="rgb(245,177,15)" fg:x="1097" fg:w="1"/><text x="62.3678%" y="191.50"></text></g><g><title>__cgroup_throttle_swaprate (5 samples, 0.28%)</title><rect x="62.2310%" y="165" width="0.2831%" height="15" fill="rgb(206,64,50)" fg:x="1099" fg:w="5"/><text x="62.4810%" y="175.50"></text></g><g><title>kthread_blkcg (1 samples, 0.06%)</title><rect x="62.4575%" y="149" width="0.0566%" height="15" fill="rgb(234,36,40)" fg:x="1103" fg:w="1"/><text x="62.7075%" y="159.50"></text></g><g><title>arch_local_irq_enable (1 samples, 0.06%)</title><rect x="63.4768%" y="133" width="0.0566%" height="15" fill="rgb(213,64,8)" fg:x="1121" fg:w="1"/><text x="63.7268%" y="143.50"></text></g><g><title>cgroup_rstat_updated (1 samples, 0.06%)</title><rect x="63.5334%" y="133" width="0.0566%" height="15" fill="rgb(210,75,36)" fg:x="1122" fg:w="1"/><text x="63.7834%" y="143.50"></text></g><g><title>mem_cgroup_charge_statistics.constprop.0 (5 samples, 0.28%)</title><rect x="63.5900%" y="133" width="0.2831%" height="15" fill="rgb(229,88,21)" fg:x="1123" fg:w="5"/><text x="63.8400%" y="143.50"></text></g><g><title>cgroup_rstat_updated (1 samples, 0.06%)</title><rect x="63.8165%" y="117" width="0.0566%" height="15" fill="rgb(252,204,47)" fg:x="1127" fg:w="1"/><text x="64.0665%" y="127.50"></text></g><g><title>rcu_read_unlock_strict (1 samples, 0.06%)</title><rect x="63.8732%" y="133" width="0.0566%" height="15" fill="rgb(208,77,27)" fg:x="1128" fg:w="1"/><text x="64.1232%" y="143.50"></text></g><g><title>charge_memcg (41 samples, 2.32%)</title><rect x="62.5708%" y="149" width="2.3216%" height="15" fill="rgb(221,76,26)" fg:x="1105" fg:w="41"/><text x="62.8208%" y="159.50">c..</text></g><g><title>try_charge_memcg (17 samples, 0.96%)</title><rect x="63.9298%" y="133" width="0.9626%" height="15" fill="rgb(225,139,18)" fg:x="1129" fg:w="17"/><text x="64.1798%" y="143.50"></text></g><g><title>page_counter_try_charge (1 samples, 0.06%)</title><rect x="64.8358%" y="117" width="0.0566%" height="15" fill="rgb(230,137,11)" fg:x="1145" fg:w="1"/><text x="65.0858%" y="127.50"></text></g><g><title>get_mem_cgroup_from_mm (3 samples, 0.17%)</title><rect x="64.8924%" y="149" width="0.1699%" height="15" fill="rgb(212,28,1)" fg:x="1146" fg:w="3"/><text x="65.1424%" y="159.50"></text></g><g><title>rcu_read_unlock_strict (1 samples, 0.06%)</title><rect x="65.0057%" y="133" width="0.0566%" height="15" fill="rgb(248,164,17)" fg:x="1148" fg:w="1"/><text x="65.2557%" y="143.50"></text></g><g><title>mem_cgroup_charge_statistics.constprop.0 (1 samples, 0.06%)</title><rect x="65.0623%" y="149" width="0.0566%" height="15" fill="rgb(222,171,42)" fg:x="1149" fg:w="1"/><text x="65.3123%" y="159.50"></text></g><g><title>__mem_cgroup_charge (47 samples, 2.66%)</title><rect x="62.5142%" y="165" width="2.6614%" height="15" fill="rgb(243,84,45)" fg:x="1104" fg:w="47"/><text x="62.7642%" y="175.50">__..</text></g><g><title>rcu_read_unlock_strict (1 samples, 0.06%)</title><rect x="65.1189%" y="149" width="0.0566%" height="15" fill="rgb(252,49,23)" fg:x="1150" fg:w="1"/><text x="65.3689%" y="159.50"></text></g><g><title>__page_set_anon_rmap (1 samples, 0.06%)</title><rect x="65.1755%" y="165" width="0.0566%" height="15" fill="rgb(215,19,7)" fg:x="1151" fg:w="1"/><text x="65.4255%" y="175.50"></text></g><g><title>__next_zones_zonelist (2 samples, 0.11%)</title><rect x="65.3454%" y="133" width="0.1133%" height="15" fill="rgb(238,81,41)" fg:x="1154" fg:w="2"/><text x="65.5954%" y="143.50"></text></g><g><title>__zone_watermark_ok (1 samples, 0.06%)</title><rect x="65.6852%" y="117" width="0.0566%" height="15" fill="rgb(210,199,37)" fg:x="1160" fg:w="1"/><text x="65.9352%" y="127.50"></text></g><g><title>clear_page_erms (5 samples, 0.28%)</title><rect x="65.7418%" y="117" width="0.2831%" height="15" fill="rgb(244,192,49)" fg:x="1161" fg:w="5"/><text x="65.9918%" y="127.50"></text></g><g><title>kernel_init_free_pages.part.0 (1 samples, 0.06%)</title><rect x="66.0249%" y="117" width="0.0566%" height="15" fill="rgb(226,211,11)" fg:x="1166" fg:w="1"/><text x="66.2749%" y="127.50"></text></g><g><title>__alloc_pages (23 samples, 1.30%)</title><rect x="65.2322%" y="149" width="1.3024%" height="15" fill="rgb(236,162,54)" fg:x="1152" fg:w="23"/><text x="65.4822%" y="159.50"></text></g><g><title>get_page_from_freelist (19 samples, 1.08%)</title><rect x="65.4587%" y="133" width="1.0759%" height="15" fill="rgb(220,229,9)" fg:x="1156" fg:w="19"/><text x="65.7087%" y="143.50"></text></g><g><title>rmqueue (8 samples, 0.45%)</title><rect x="66.0815%" y="117" width="0.4530%" height="15" fill="rgb(250,87,22)" fg:x="1167" fg:w="8"/><text x="66.3315%" y="127.50"></text></g><g><title>rmqueue_bulk (3 samples, 0.17%)</title><rect x="66.3647%" y="101" width="0.1699%" height="15" fill="rgb(239,43,17)" fg:x="1172" fg:w="3"/><text x="66.6147%" y="111.50"></text></g><g><title>alloc_pages_vma (24 samples, 1.36%)</title><rect x="65.2322%" y="165" width="1.3590%" height="15" fill="rgb(231,177,25)" fg:x="1152" fg:w="24"/><text x="65.4822%" y="175.50"></text></g><g><title>__cond_resched (1 samples, 0.06%)</title><rect x="66.5345%" y="149" width="0.0566%" height="15" fill="rgb(219,179,1)" fg:x="1175" fg:w="1"/><text x="66.7845%" y="159.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.06%)</title><rect x="66.7610%" y="117" width="0.0566%" height="15" fill="rgb(238,219,53)" fg:x="1179" fg:w="1"/><text x="67.0110%" y="127.50"></text></g><g><title>__mod_memcg_lruvec_state (1 samples, 0.06%)</title><rect x="67.0442%" y="101" width="0.0566%" height="15" fill="rgb(232,167,36)" fg:x="1184" fg:w="1"/><text x="67.2942%" y="111.50"></text></g><g><title>mem_cgroup_update_lru_size (2 samples, 0.11%)</title><rect x="67.1008%" y="101" width="0.1133%" height="15" fill="rgb(244,19,51)" fg:x="1185" fg:w="2"/><text x="67.3508%" y="111.50"></text></g><g><title>__pagevec_lru_add_fn (9 samples, 0.51%)</title><rect x="66.8177%" y="117" width="0.5096%" height="15" fill="rgb(224,6,22)" fg:x="1180" fg:w="9"/><text x="67.0677%" y="127.50"></text></g><g><title>page_mapping (2 samples, 0.11%)</title><rect x="67.2140%" y="101" width="0.1133%" height="15" fill="rgb(224,145,5)" fg:x="1187" fg:w="2"/><text x="67.4640%" y="111.50"></text></g><g><title>lock_page_lruvec_irqsave (1 samples, 0.06%)</title><rect x="67.3273%" y="117" width="0.0566%" height="15" fill="rgb(234,130,49)" fg:x="1189" fg:w="1"/><text x="67.5773%" y="127.50"></text></g><g><title>lru_cache_add_inactive_or_unevictable (15 samples, 0.85%)</title><rect x="66.5912%" y="165" width="0.8494%" height="15" fill="rgb(254,6,2)" fg:x="1176" fg:w="15"/><text x="66.8412%" y="175.50"></text></g><g><title>lru_cache_add (14 samples, 0.79%)</title><rect x="66.6478%" y="149" width="0.7928%" height="15" fill="rgb(208,96,46)" fg:x="1177" fg:w="14"/><text x="66.8978%" y="159.50"></text></g><g><title>__pagevec_lru_add (12 samples, 0.68%)</title><rect x="66.7610%" y="133" width="0.6795%" height="15" fill="rgb(239,3,39)" fg:x="1179" fg:w="12"/><text x="67.0110%" y="143.50"></text></g><g><title>release_pages (1 samples, 0.06%)</title><rect x="67.3839%" y="117" width="0.0566%" height="15" fill="rgb(233,210,1)" fg:x="1190" fg:w="1"/><text x="67.6339%" y="127.50"></text></g><g><title>native_set_pte (1 samples, 0.06%)</title><rect x="67.4405%" y="165" width="0.0566%" height="15" fill="rgb(244,137,37)" fg:x="1191" fg:w="1"/><text x="67.6905%" y="175.50"></text></g><g><title>page_add_new_anon_rmap (4 samples, 0.23%)</title><rect x="67.4972%" y="165" width="0.2265%" height="15" fill="rgb(240,136,2)" fg:x="1192" fg:w="4"/><text x="67.7472%" y="175.50"></text></g><g><title>__mod_lruvec_page_state (4 samples, 0.23%)</title><rect x="67.4972%" y="149" width="0.2265%" height="15" fill="rgb(239,18,37)" fg:x="1192" fg:w="4"/><text x="67.7472%" y="159.50"></text></g><g><title>__mod_lruvec_state (2 samples, 0.11%)</title><rect x="67.6104%" y="133" width="0.1133%" height="15" fill="rgb(218,185,22)" fg:x="1194" fg:w="2"/><text x="67.8604%" y="143.50"></text></g><g><title>__mod_node_page_state (1 samples, 0.06%)</title><rect x="67.6670%" y="117" width="0.0566%" height="15" fill="rgb(225,218,4)" fg:x="1195" fg:w="1"/><text x="67.9170%" y="127.50"></text></g><g><title>pfn_pte (1 samples, 0.06%)</title><rect x="67.7237%" y="165" width="0.0566%" height="15" fill="rgb(230,182,32)" fg:x="1196" fg:w="1"/><text x="67.9737%" y="175.50"></text></g><g><title>do_anonymous_page (100 samples, 5.66%)</title><rect x="62.1744%" y="181" width="5.6625%" height="15" fill="rgb(242,56,43)" fg:x="1098" fg:w="100"/><text x="62.4244%" y="191.50">do_anon..</text></g><g><title>pmd_page_vaddr (1 samples, 0.06%)</title><rect x="67.7803%" y="165" width="0.0566%" height="15" fill="rgb(233,99,24)" fg:x="1197" fg:w="1"/><text x="68.0303%" y="175.50"></text></g><g><title>handle_pte_fault (106 samples, 6.00%)</title><rect x="61.8913%" y="197" width="6.0023%" height="15" fill="rgb(234,209,42)" fg:x="1093" fg:w="106"/><text x="62.1413%" y="207.50">handle_p..</text></g><g><title>pmd_val (1 samples, 0.06%)</title><rect x="67.8369%" y="181" width="0.0566%" height="15" fill="rgb(227,7,12)" fg:x="1198" fg:w="1"/><text x="68.0869%" y="191.50"></text></g><g><title>__handle_mm_fault (114 samples, 6.46%)</title><rect x="61.4949%" y="213" width="6.4553%" height="15" fill="rgb(245,203,43)" fg:x="1086" fg:w="114"/><text x="61.7449%" y="223.50">__handle..</text></g><g><title>pud_val (1 samples, 0.06%)</title><rect x="67.8935%" y="197" width="0.0566%" height="15" fill="rgb(238,205,33)" fg:x="1199" fg:w="1"/><text x="68.1435%" y="207.50"></text></g><g><title>arch_local_irq_enable (1 samples, 0.06%)</title><rect x="67.9502%" y="213" width="0.0566%" height="15" fill="rgb(231,56,7)" fg:x="1200" fg:w="1"/><text x="68.2002%" y="223.50"></text></g><g><title>error_return (1 samples, 0.06%)</title><rect x="68.0068%" y="213" width="0.0566%" height="15" fill="rgb(244,186,29)" fg:x="1201" fg:w="1"/><text x="68.2568%" y="223.50"></text></g><g><title>pgd_none (1 samples, 0.06%)</title><rect x="68.0634%" y="213" width="0.0566%" height="15" fill="rgb(234,111,31)" fg:x="1202" fg:w="1"/><text x="68.3134%" y="223.50"></text></g><g><title>handle_mm_fault (121 samples, 6.85%)</title><rect x="61.3250%" y="229" width="6.8516%" height="15" fill="rgb(241,149,10)" fg:x="1083" fg:w="121"/><text x="61.5750%" y="239.50">handle_mm..</text></g><g><title>pmd_val (1 samples, 0.06%)</title><rect x="68.1200%" y="213" width="0.0566%" height="15" fill="rgb(249,206,44)" fg:x="1203" fg:w="1"/><text x="68.3700%" y="223.50"></text></g><g><title>do_user_addr_fault (128 samples, 7.25%)</title><rect x="60.9853%" y="245" width="7.2480%" height="15" fill="rgb(251,153,30)" fg:x="1077" fg:w="128"/><text x="61.2353%" y="255.50">do_user_ad..</text></g><g><title>rcu_all_qs (1 samples, 0.06%)</title><rect x="68.1767%" y="229" width="0.0566%" height="15" fill="rgb(239,152,38)" fg:x="1204" fg:w="1"/><text x="68.4267%" y="239.50"></text></g><g><title>exc_page_fault (130 samples, 7.36%)</title><rect x="60.9853%" y="261" width="7.3613%" height="15" fill="rgb(249,139,47)" fg:x="1077" fg:w="130"/><text x="61.2353%" y="271.50">exc_page_f..</text></g><g><title>irqentry_exit (2 samples, 0.11%)</title><rect x="68.2333%" y="245" width="0.1133%" height="15" fill="rgb(244,64,35)" fg:x="1205" fg:w="2"/><text x="68.4833%" y="255.50"></text></g><g><title>irqentry_exit_to_user_mode (2 samples, 0.11%)</title><rect x="68.2333%" y="229" width="0.1133%" height="15" fill="rgb(216,46,15)" fg:x="1205" fg:w="2"/><text x="68.4833%" y="239.50"></text></g><g><title>exit_to_user_mode_prepare (2 samples, 0.11%)</title><rect x="68.2333%" y="213" width="0.1133%" height="15" fill="rgb(250,74,19)" fg:x="1205" fg:w="2"/><text x="68.4833%" y="223.50"></text></g><g><title>asm_exc_page_fault (131 samples, 7.42%)</title><rect x="60.9853%" y="277" width="7.4179%" height="15" fill="rgb(249,42,33)" fg:x="1077" fg:w="131"/><text x="61.2353%" y="287.50">asm_exc_pa..</text></g><g><title>irqentry_exit (1 samples, 0.06%)</title><rect x="68.3465%" y="261" width="0.0566%" height="15" fill="rgb(242,149,17)" fg:x="1207" fg:w="1"/><text x="68.5965%" y="271.50"></text></g><g><title>checked_request2size (10 samples, 0.57%)</title><rect x="68.4032%" y="277" width="0.5663%" height="15" fill="rgb(244,29,21)" fg:x="1208" fg:w="10"/><text x="68.6532%" y="287.50"></text></g><g><title>sync_regs (16 samples, 0.91%)</title><rect x="68.9694%" y="277" width="0.9060%" height="15" fill="rgb(220,130,37)" fg:x="1218" fg:w="16"/><text x="69.2194%" y="287.50"></text></g><g><title>__entry_text_start (1 samples, 0.06%)</title><rect x="69.9320%" y="197" width="0.0566%" height="15" fill="rgb(211,67,2)" fg:x="1235" fg:w="1"/><text x="70.1820%" y="207.50"></text></g><g><title>__glibc_morecore (4 samples, 0.23%)</title><rect x="69.9320%" y="261" width="0.2265%" height="15" fill="rgb(235,68,52)" fg:x="1235" fg:w="4"/><text x="70.1820%" y="271.50"></text></g><g><title>__GI___sbrk (4 samples, 0.23%)</title><rect x="69.9320%" y="245" width="0.2265%" height="15" fill="rgb(246,142,3)" fg:x="1235" fg:w="4"/><text x="70.1820%" y="255.50"></text></g><g><title>__GI___sbrk (4 samples, 0.23%)</title><rect x="69.9320%" y="229" width="0.2265%" height="15" fill="rgb(241,25,7)" fg:x="1235" fg:w="4"/><text x="70.1820%" y="239.50"></text></g><g><title>__brk (4 samples, 0.23%)</title><rect x="69.9320%" y="213" width="0.2265%" height="15" fill="rgb(242,119,39)" fg:x="1235" fg:w="4"/><text x="70.1820%" y="223.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (3 samples, 0.17%)</title><rect x="69.9887%" y="197" width="0.1699%" height="15" fill="rgb(241,98,45)" fg:x="1236" fg:w="3"/><text x="70.2387%" y="207.50"></text></g><g><title>do_syscall_64 (3 samples, 0.17%)</title><rect x="69.9887%" y="181" width="0.1699%" height="15" fill="rgb(254,28,30)" fg:x="1236" fg:w="3"/><text x="70.2387%" y="191.50"></text></g><g><title>__x64_sys_brk (3 samples, 0.17%)</title><rect x="69.9887%" y="165" width="0.1699%" height="15" fill="rgb(241,142,54)" fg:x="1236" fg:w="3"/><text x="70.2387%" y="175.50"></text></g><g><title>__do_sys_brk (3 samples, 0.17%)</title><rect x="69.9887%" y="149" width="0.1699%" height="15" fill="rgb(222,85,15)" fg:x="1236" fg:w="3"/><text x="70.2387%" y="159.50"></text></g><g><title>do_brk_flags (3 samples, 0.17%)</title><rect x="69.9887%" y="133" width="0.1699%" height="15" fill="rgb(210,85,47)" fg:x="1236" fg:w="3"/><text x="70.2387%" y="143.50"></text></g><g><title>perf_event_mmap (3 samples, 0.17%)</title><rect x="69.9887%" y="117" width="0.1699%" height="15" fill="rgb(224,206,25)" fg:x="1236" fg:w="3"/><text x="70.2387%" y="127.50"></text></g><g><title>perf_event_mmap_event (3 samples, 0.17%)</title><rect x="69.9887%" y="101" width="0.1699%" height="15" fill="rgb(243,201,19)" fg:x="1236" fg:w="3"/><text x="70.2387%" y="111.50"></text></g><g><title>perf_iterate_sb (2 samples, 0.11%)</title><rect x="70.0453%" y="85" width="0.1133%" height="15" fill="rgb(236,59,4)" fg:x="1237" fg:w="2"/><text x="70.2953%" y="95.50"></text></g><g><title>perf_iterate_ctx (2 samples, 0.11%)</title><rect x="70.0453%" y="69" width="0.1133%" height="15" fill="rgb(254,179,45)" fg:x="1237" fg:w="2"/><text x="70.2953%" y="79.50"></text></g><g><title>perf_event_mmap_output (2 samples, 0.11%)</title><rect x="70.0453%" y="53" width="0.1133%" height="15" fill="rgb(226,14,10)" fg:x="1237" fg:w="2"/><text x="70.2953%" y="63.50"></text></g><g><title>perf_output_begin (2 samples, 0.11%)</title><rect x="70.0453%" y="37" width="0.1133%" height="15" fill="rgb(244,27,41)" fg:x="1237" fg:w="2"/><text x="70.2953%" y="47.50"></text></g><g><title>charge_memcg (1 samples, 0.06%)</title><rect x="70.2152%" y="133" width="0.0566%" height="15" fill="rgb(235,35,32)" fg:x="1240" fg:w="1"/><text x="70.4652%" y="143.50"></text></g><g><title>try_charge_memcg (1 samples, 0.06%)</title><rect x="70.2152%" y="117" width="0.0566%" height="15" fill="rgb(218,68,31)" fg:x="1240" fg:w="1"/><text x="70.4652%" y="127.50"></text></g><g><title>__mem_cgroup_charge (2 samples, 0.11%)</title><rect x="70.2152%" y="149" width="0.1133%" height="15" fill="rgb(207,120,37)" fg:x="1240" fg:w="2"/><text x="70.4652%" y="159.50"></text></g><g><title>try_charge_memcg (1 samples, 0.06%)</title><rect x="70.2718%" y="133" width="0.0566%" height="15" fill="rgb(227,98,0)" fg:x="1241" fg:w="1"/><text x="70.5218%" y="143.50"></text></g><g><title>asm_exc_page_fault (4 samples, 0.23%)</title><rect x="70.1586%" y="261" width="0.2265%" height="15" fill="rgb(207,7,3)" fg:x="1239" fg:w="4"/><text x="70.4086%" y="271.50"></text></g><g><title>exc_page_fault (4 samples, 0.23%)</title><rect x="70.1586%" y="245" width="0.2265%" height="15" fill="rgb(206,98,19)" fg:x="1239" fg:w="4"/><text x="70.4086%" y="255.50"></text></g><g><title>do_user_addr_fault (4 samples, 0.23%)</title><rect x="70.1586%" y="229" width="0.2265%" height="15" fill="rgb(217,5,26)" fg:x="1239" fg:w="4"/><text x="70.4086%" y="239.50"></text></g><g><title>handle_mm_fault (3 samples, 0.17%)</title><rect x="70.2152%" y="213" width="0.1699%" height="15" fill="rgb(235,190,38)" fg:x="1240" fg:w="3"/><text x="70.4652%" y="223.50"></text></g><g><title>__handle_mm_fault (3 samples, 0.17%)</title><rect x="70.2152%" y="197" width="0.1699%" height="15" fill="rgb(247,86,24)" fg:x="1240" fg:w="3"/><text x="70.4652%" y="207.50"></text></g><g><title>handle_pte_fault (3 samples, 0.17%)</title><rect x="70.2152%" y="181" width="0.1699%" height="15" fill="rgb(205,101,16)" fg:x="1240" fg:w="3"/><text x="70.4652%" y="191.50"></text></g><g><title>do_anonymous_page (3 samples, 0.17%)</title><rect x="70.2152%" y="165" width="0.1699%" height="15" fill="rgb(246,168,33)" fg:x="1240" fg:w="3"/><text x="70.4652%" y="175.50"></text></g><g><title>kthread_blkcg (1 samples, 0.06%)</title><rect x="70.3284%" y="149" width="0.0566%" height="15" fill="rgb(231,114,1)" fg:x="1242" fg:w="1"/><text x="70.5784%" y="159.50"></text></g><g><title>_int_malloc (472 samples, 26.73%)</title><rect x="43.7146%" y="293" width="26.7271%" height="15" fill="rgb(207,184,53)" fg:x="772" fg:w="472"/><text x="43.9646%" y="303.50">_int_malloc</text></g><g><title>sysmalloc (10 samples, 0.57%)</title><rect x="69.8754%" y="277" width="0.5663%" height="15" fill="rgb(224,95,51)" fg:x="1234" fg:w="10"/><text x="70.1254%" y="287.50"></text></g><g><title>sync_regs (1 samples, 0.06%)</title><rect x="70.3851%" y="261" width="0.0566%" height="15" fill="rgb(212,188,45)" fg:x="1243" fg:w="1"/><text x="70.6351%" y="271.50"></text></g><g><title>arena_for_chunk (11 samples, 0.62%)</title><rect x="70.4417%" y="293" width="0.6229%" height="15" fill="rgb(223,154,38)" fg:x="1244" fg:w="11"/><text x="70.6917%" y="303.50"></text></g><g><title>__GI___libc_malloc (555 samples, 31.43%)</title><rect x="40.3171%" y="309" width="31.4270%" height="15" fill="rgb(251,22,52)" fg:x="712" fg:w="555"/><text x="40.5671%" y="319.50">__GI___libc_malloc</text></g><g><title>checked_request2size (12 samples, 0.68%)</title><rect x="71.0646%" y="293" width="0.6795%" height="15" fill="rgb(229,209,22)" fg:x="1255" fg:w="12"/><text x="71.3146%" y="303.50"></text></g><g><title>__rdl_alloc (17 samples, 0.96%)</title><rect x="71.7441%" y="309" width="0.9626%" height="15" fill="rgb(234,138,34)" fg:x="1267" fg:w="17"/><text x="71.9941%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (17 samples, 0.96%)</title><rect x="71.7441%" y="293" width="0.9626%" height="15" fill="rgb(212,95,11)" fg:x="1267" fg:w="17"/><text x="71.9941%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (583 samples, 33.01%)</title><rect x="39.7508%" y="405" width="33.0125%" height="15" fill="rgb(240,179,47)" fg:x="702" fg:w="583"/><text x="40.0008%" y="415.50">alloc::vec::Vec&lt;T,A&gt;::with_capacity_in</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (583 samples, 33.01%)</title><rect x="39.7508%" y="389" width="33.0125%" height="15" fill="rgb(240,163,11)" fg:x="702" fg:w="583"/><text x="40.0008%" y="399.50">alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (583 samples, 33.01%)</title><rect x="39.7508%" y="373" width="33.0125%" height="15" fill="rgb(236,37,12)" fg:x="702" fg:w="583"/><text x="40.0008%" y="383.50">alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (579 samples, 32.79%)</title><rect x="39.9773%" y="357" width="32.7860%" height="15" fill="rgb(232,164,16)" fg:x="706" fg:w="579"/><text x="40.2273%" y="367.50">&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::all..</text></g><g><title>alloc::alloc::Global::alloc_impl (579 samples, 32.79%)</title><rect x="39.9773%" y="341" width="32.7860%" height="15" fill="rgb(244,205,15)" fg:x="706" fg:w="579"/><text x="40.2273%" y="351.50">alloc::alloc::Global::alloc_impl</text></g><g><title>alloc::alloc::alloc (574 samples, 32.50%)</title><rect x="40.2605%" y="325" width="32.5028%" height="15" fill="rgb(223,117,47)" fg:x="711" fg:w="574"/><text x="40.5105%" y="335.50">alloc::alloc::alloc</text></g><g><title>__rust_alloc (1 samples, 0.06%)</title><rect x="72.7067%" y="309" width="0.0566%" height="15" fill="rgb(244,107,35)" fg:x="1284" fg:w="1"/><text x="72.9567%" y="319.50"></text></g><g><title>[libc.so.6] (30 samples, 1.70%)</title><rect x="73.2163%" y="373" width="1.6988%" height="15" fill="rgb(205,140,8)" fg:x="1293" fg:w="30"/><text x="73.4663%" y="383.50"></text></g><g><title>asm_exc_page_fault (3 samples, 0.17%)</title><rect x="74.9151%" y="341" width="0.1699%" height="15" fill="rgb(228,84,46)" fg:x="1323" fg:w="3"/><text x="75.1651%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (626 samples, 35.45%)</title><rect x="39.7508%" y="517" width="35.4473%" height="15" fill="rgb(254,188,9)" fg:x="702" fg:w="626"/><text x="40.0008%" y="527.50">&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from</text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (626 samples, 35.45%)</title><rect x="39.7508%" y="501" width="35.4473%" height="15" fill="rgb(206,112,54)" fg:x="702" fg:w="626"/><text x="40.0008%" y="511.50">alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned</text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (626 samples, 35.45%)</title><rect x="39.7508%" y="485" width="35.4473%" height="15" fill="rgb(216,84,49)" fg:x="702" fg:w="626"/><text x="40.0008%" y="495.50">alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_ow..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (626 samples, 35.45%)</title><rect x="39.7508%" y="469" width="35.4473%" height="15" fill="rgb(214,194,35)" fg:x="702" fg:w="626"/><text x="40.0008%" y="479.50">alloc::slice::&lt;impl [T]&gt;::to_vec</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (626 samples, 35.45%)</title><rect x="39.7508%" y="453" width="35.4473%" height="15" fill="rgb(249,28,3)" fg:x="702" fg:w="626"/><text x="40.0008%" y="463.50">alloc::slice::&lt;impl [T]&gt;::to_vec_in</text></g><g><title>alloc::slice::hack::to_vec (626 samples, 35.45%)</title><rect x="39.7508%" y="437" width="35.4473%" height="15" fill="rgb(222,56,52)" fg:x="702" fg:w="626"/><text x="40.0008%" y="447.50">alloc::slice::hack::to_vec</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (626 samples, 35.45%)</title><rect x="39.7508%" y="421" width="35.4473%" height="15" fill="rgb(245,217,50)" fg:x="702" fg:w="626"/><text x="40.0008%" y="431.50">&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (43 samples, 2.43%)</title><rect x="72.7633%" y="405" width="2.4349%" height="15" fill="rgb(213,201,24)" fg:x="1285" fg:w="43"/><text x="73.0133%" y="415.50">co..</text></g><g><title>core::intrinsics::copy_nonoverlapping (43 samples, 2.43%)</title><rect x="72.7633%" y="389" width="2.4349%" height="15" fill="rgb(248,116,28)" fg:x="1285" fg:w="43"/><text x="73.0133%" y="399.50">co..</text></g><g><title>__GI___libc_malloc (5 samples, 0.28%)</title><rect x="74.9151%" y="373" width="0.2831%" height="15" fill="rgb(219,72,43)" fg:x="1323" fg:w="5"/><text x="75.1651%" y="383.50"></text></g><g><title>_int_malloc (5 samples, 0.28%)</title><rect x="74.9151%" y="357" width="0.2831%" height="15" fill="rgb(209,138,14)" fg:x="1323" fg:w="5"/><text x="75.1651%" y="367.50"></text></g><g><title>error_entry (2 samples, 0.11%)</title><rect x="75.0849%" y="341" width="0.1133%" height="15" fill="rgb(222,18,33)" fg:x="1326" fg:w="2"/><text x="75.3349%" y="351.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (831 samples, 47.06%)</title><rect x="28.2559%" y="549" width="47.0555%" height="15" fill="rgb(213,199,7)" fg:x="499" fg:w="831"/><text x="28.5059%" y="559.50">core::iter::adapters::map::map_fold::{{closure}}</text></g><g><title>test_mmmh::main::{{closure}} (669 samples, 37.88%)</title><rect x="37.4292%" y="533" width="37.8822%" height="15" fill="rgb(250,110,10)" fg:x="661" fg:w="669"/><text x="37.6792%" y="543.50">test_mmmh::main::{{closure}}</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.11%)</title><rect x="75.1982%" y="517" width="0.1133%" height="15" fill="rgb(248,123,6)" fg:x="1328" fg:w="2"/><text x="75.4482%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.11%)</title><rect x="75.1982%" y="501" width="0.1133%" height="15" fill="rgb(206,91,31)" fg:x="1328" fg:w="2"/><text x="75.4482%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (2 samples, 0.11%)</title><rect x="75.1982%" y="485" width="0.1133%" height="15" fill="rgb(211,154,13)" fg:x="1328" fg:w="2"/><text x="75.4482%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (832 samples, 47.11%)</title><rect x="28.2559%" y="677" width="47.1121%" height="15" fill="rgb(225,148,7)" fg:x="499" fg:w="832"/><text x="28.5059%" y="687.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (832 samples, 47.11%)</title><rect x="28.2559%" y="661" width="47.1121%" height="15" fill="rgb(220,160,43)" fg:x="499" fg:w="832"/><text x="28.5059%" y="671.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_it..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (832 samples, 47.11%)</title><rect x="28.2559%" y="645" width="47.1121%" height="15" fill="rgb(213,52,39)" fg:x="499" fg:w="832"/><text x="28.5059%" y="655.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_i..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (832 samples, 47.11%)</title><rect x="28.2559%" y="629" width="47.1121%" height="15" fill="rgb(243,137,7)" fg:x="499" fg:w="832"/><text x="28.5059%" y="639.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (832 samples, 47.11%)</title><rect x="28.2559%" y="613" width="47.1121%" height="15" fill="rgb(230,79,13)" fg:x="499" fg:w="832"/><text x="28.5059%" y="623.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_exte..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (832 samples, 47.11%)</title><rect x="28.2559%" y="597" width="47.1121%" height="15" fill="rgb(247,105,23)" fg:x="499" fg:w="832"/><text x="28.5059%" y="607.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (832 samples, 47.11%)</title><rect x="28.2559%" y="581" width="47.1121%" height="15" fill="rgb(223,179,41)" fg:x="499" fg:w="832"/><text x="28.5059%" y="591.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterato..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (832 samples, 47.11%)</title><rect x="28.2559%" y="565" width="47.1121%" height="15" fill="rgb(218,9,34)" fg:x="499" fg:w="832"/><text x="28.5059%" y="575.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.06%)</title><rect x="75.3114%" y="549" width="0.0566%" height="15" fill="rgb(222,106,8)" fg:x="1330" fg:w="1"/><text x="75.5614%" y="559.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.06%)</title><rect x="75.3114%" y="533" width="0.0566%" height="15" fill="rgb(211,220,0)" fg:x="1330" fg:w="1"/><text x="75.5614%" y="543.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1 samples, 0.06%)</title><rect x="75.3114%" y="517" width="0.0566%" height="15" fill="rgb(229,52,16)" fg:x="1330" fg:w="1"/><text x="75.5614%" y="527.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (5 samples, 0.28%)</title><rect x="89.6942%" y="485" width="0.2831%" height="15" fill="rgb(212,155,18)" fg:x="1584" fg:w="5"/><text x="89.9442%" y="495.50"></text></g><g><title>sysvec_apic_timer_interrupt (5 samples, 0.28%)</title><rect x="89.6942%" y="469" width="0.2831%" height="15" fill="rgb(242,21,14)" fg:x="1584" fg:w="5"/><text x="89.9442%" y="479.50"></text></g><g><title>irqentry_exit (5 samples, 0.28%)</title><rect x="89.6942%" y="453" width="0.2831%" height="15" fill="rgb(222,19,48)" fg:x="1584" fg:w="5"/><text x="89.9442%" y="463.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.28%)</title><rect x="89.6942%" y="437" width="0.2831%" height="15" fill="rgb(232,45,27)" fg:x="1584" fg:w="5"/><text x="89.9442%" y="447.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.28%)</title><rect x="89.6942%" y="421" width="0.2831%" height="15" fill="rgb(249,103,42)" fg:x="1584" fg:w="5"/><text x="89.9442%" y="431.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.28%)</title><rect x="89.6942%" y="405" width="0.2831%" height="15" fill="rgb(246,81,33)" fg:x="1584" fg:w="5"/><text x="89.9442%" y="415.50"></text></g><g><title>schedule (5 samples, 0.28%)</title><rect x="89.6942%" y="389" width="0.2831%" height="15" fill="rgb(252,33,42)" fg:x="1584" fg:w="5"/><text x="89.9442%" y="399.50"></text></g><g><title>__schedule (5 samples, 0.28%)</title><rect x="89.6942%" y="373" width="0.2831%" height="15" fill="rgb(209,212,41)" fg:x="1584" fg:w="5"/><text x="89.9442%" y="383.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.28%)</title><rect x="89.6942%" y="357" width="0.2831%" height="15" fill="rgb(207,154,6)" fg:x="1584" fg:w="5"/><text x="89.9442%" y="367.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.28%)</title><rect x="89.6942%" y="341" width="0.2831%" height="15" fill="rgb(223,64,47)" fg:x="1584" fg:w="5"/><text x="89.9442%" y="351.50"></text></g><g><title>x86_pmu_enable (5 samples, 0.28%)</title><rect x="89.6942%" y="325" width="0.2831%" height="15" fill="rgb(211,161,38)" fg:x="1584" fg:w="5"/><text x="89.9442%" y="335.50"></text></g><g><title>intel_pmu_enable_all (5 samples, 0.28%)</title><rect x="89.6942%" y="309" width="0.2831%" height="15" fill="rgb(219,138,40)" fg:x="1584" fg:w="5"/><text x="89.9442%" y="319.50"></text></g><g><title>native_write_msr (5 samples, 0.28%)</title><rect x="89.6942%" y="293" width="0.2831%" height="15" fill="rgb(241,228,46)" fg:x="1584" fg:w="5"/><text x="89.9442%" y="303.50"></text></g><g><title>_int_free (227 samples, 12.85%)</title><rect x="77.1801%" y="501" width="12.8539%" height="15" fill="rgb(223,209,38)" fg:x="1363" fg:w="227"/><text x="77.4301%" y="511.50">_int_free</text></g><g><title>tcache_put (1 samples, 0.06%)</title><rect x="89.9773%" y="485" width="0.0566%" height="15" fill="rgb(236,164,45)" fg:x="1589" fg:w="1"/><text x="90.2273%" y="495.50"></text></g><g><title>__GI___libc_free (263 samples, 14.89%)</title><rect x="75.8211%" y="517" width="14.8924%" height="15" fill="rgb(231,15,5)" fg:x="1339" fg:w="263"/><text x="76.0711%" y="527.50">__GI___libc_free</text></g><g><title>arena_for_chunk (12 samples, 0.68%)</title><rect x="90.0340%" y="501" width="0.6795%" height="15" fill="rgb(252,35,15)" fg:x="1590" fg:w="12"/><text x="90.2840%" y="511.50"></text></g><g><title>__rdl_dealloc (13 samples, 0.74%)</title><rect x="90.7135%" y="517" width="0.7361%" height="15" fill="rgb(248,181,18)" fg:x="1602" fg:w="13"/><text x="90.9635%" y="527.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (13 samples, 0.74%)</title><rect x="90.7135%" y="501" width="0.7361%" height="15" fill="rgb(233,39,42)" fg:x="1602" fg:w="13"/><text x="90.9635%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (296 samples, 16.76%)</title><rect x="75.3681%" y="549" width="16.7610%" height="15" fill="rgb(238,110,33)" fg:x="1331" fg:w="296"/><text x="75.6181%" y="559.50">&lt;alloc::alloc::Global as c..</text></g><g><title>alloc::alloc::dealloc (296 samples, 16.76%)</title><rect x="75.3681%" y="533" width="16.7610%" height="15" fill="rgb(233,195,10)" fg:x="1331" fg:w="296"/><text x="75.6181%" y="543.50">alloc::alloc::dealloc</text></g><g><title>__rust_dealloc (12 samples, 0.68%)</title><rect x="91.4496%" y="517" width="0.6795%" height="15" fill="rgb(254,105,3)" fg:x="1615" fg:w="12"/><text x="91.6996%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (298 samples, 16.87%)</title><rect x="75.3681%" y="661" width="16.8743%" height="15" fill="rgb(221,225,9)" fg:x="1331" fg:w="298"/><text x="75.6181%" y="671.50">&lt;alloc::vec::Vec&lt;T,A&gt; as c..</text></g><g><title>core::ptr::drop_in_place&lt;[test_mmmh::Product]&gt; (298 samples, 16.87%)</title><rect x="75.3681%" y="645" width="16.8743%" height="15" fill="rgb(224,227,45)" fg:x="1331" fg:w="298"/><text x="75.6181%" y="655.50">core::ptr::drop_in_place&lt;[..</text></g><g><title>core::ptr::drop_in_place&lt;test_mmmh::Product&gt; (298 samples, 16.87%)</title><rect x="75.3681%" y="629" width="16.8743%" height="15" fill="rgb(229,198,43)" fg:x="1331" fg:w="298"/><text x="75.6181%" y="639.50">core::ptr::drop_in_place&lt;t..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (298 samples, 16.87%)</title><rect x="75.3681%" y="613" width="16.8743%" height="15" fill="rgb(206,209,35)" fg:x="1331" fg:w="298"/><text x="75.6181%" y="623.50">core::ptr::drop_in_place&lt;a..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (298 samples, 16.87%)</title><rect x="75.3681%" y="597" width="16.8743%" height="15" fill="rgb(245,195,53)" fg:x="1331" fg:w="298"/><text x="75.6181%" y="607.50">core::ptr::drop_in_place&lt;a..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (298 samples, 16.87%)</title><rect x="75.3681%" y="581" width="16.8743%" height="15" fill="rgb(240,92,26)" fg:x="1331" fg:w="298"/><text x="75.6181%" y="591.50">core::ptr::drop_in_place&lt;a..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (298 samples, 16.87%)</title><rect x="75.3681%" y="565" width="16.8743%" height="15" fill="rgb(207,40,23)" fg:x="1331" fg:w="298"/><text x="75.6181%" y="575.50">&lt;alloc::raw_vec::RawVec&lt;T,..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.11%)</title><rect x="92.1291%" y="549" width="0.1133%" height="15" fill="rgb(223,111,35)" fg:x="1627" fg:w="2"/><text x="92.3791%" y="559.50"></text></g><g><title>page_remove_rmap (3 samples, 0.17%)</title><rect x="92.2990%" y="389" width="0.1699%" height="15" fill="rgb(229,147,28)" fg:x="1630" fg:w="3"/><text x="92.5490%" y="399.50"></text></g><g><title>__mod_lruvec_page_state (2 samples, 0.11%)</title><rect x="92.3556%" y="373" width="0.1133%" height="15" fill="rgb(211,29,28)" fg:x="1631" fg:w="2"/><text x="92.6056%" y="383.50"></text></g><g><title>__mod_lruvec_state (2 samples, 0.11%)</title><rect x="92.3556%" y="357" width="0.1133%" height="15" fill="rgb(228,72,33)" fg:x="1631" fg:w="2"/><text x="92.6056%" y="367.50"></text></g><g><title>__mod_node_page_state (2 samples, 0.11%)</title><rect x="92.3556%" y="341" width="0.1133%" height="15" fill="rgb(205,214,31)" fg:x="1631" fg:w="2"/><text x="92.6056%" y="351.50"></text></g><g><title>uncharge_batch (1 samples, 0.06%)</title><rect x="92.8086%" y="325" width="0.0566%" height="15" fill="rgb(224,111,15)" fg:x="1639" fg:w="1"/><text x="93.0586%" y="335.50"></text></g><g><title>page_counter_uncharge (1 samples, 0.06%)</title><rect x="92.8086%" y="309" width="0.0566%" height="15" fill="rgb(253,21,26)" fg:x="1639" fg:w="1"/><text x="93.0586%" y="319.50"></text></g><g><title>page_counter_cancel (1 samples, 0.06%)</title><rect x="92.8086%" y="293" width="0.0566%" height="15" fill="rgb(245,139,43)" fg:x="1639" fg:w="1"/><text x="93.0586%" y="303.50"></text></g><g><title>__mem_cgroup_uncharge_list (2 samples, 0.11%)</title><rect x="92.8086%" y="341" width="0.1133%" height="15" fill="rgb(252,170,7)" fg:x="1639" fg:w="2"/><text x="93.0586%" y="351.50"></text></g><g><title>uncharge_page (1 samples, 0.06%)</title><rect x="92.8652%" y="325" width="0.0566%" height="15" fill="rgb(231,118,14)" fg:x="1640" fg:w="1"/><text x="93.1152%" y="335.50"></text></g><g><title>__mod_lruvec_state (3 samples, 0.17%)</title><rect x="92.9219%" y="341" width="0.1699%" height="15" fill="rgb(238,83,0)" fg:x="1641" fg:w="3"/><text x="93.1719%" y="351.50"></text></g><g><title>__mod_memcg_lruvec_state (2 samples, 0.11%)</title><rect x="92.9785%" y="325" width="0.1133%" height="15" fill="rgb(221,39,39)" fg:x="1642" fg:w="2"/><text x="93.2285%" y="335.50"></text></g><g><title>cgroup_rstat_updated (1 samples, 0.06%)</title><rect x="93.0351%" y="309" width="0.0566%" height="15" fill="rgb(222,119,46)" fg:x="1643" fg:w="1"/><text x="93.2851%" y="319.50"></text></g><g><title>free_unref_page_list (5 samples, 0.28%)</title><rect x="93.0917%" y="341" width="0.2831%" height="15" fill="rgb(222,165,49)" fg:x="1644" fg:w="5"/><text x="93.3417%" y="351.50"></text></g><g><title>free_unref_page_commit.constprop.0 (4 samples, 0.23%)</title><rect x="93.1484%" y="325" width="0.2265%" height="15" fill="rgb(219,113,52)" fg:x="1645" fg:w="4"/><text x="93.3984%" y="335.50"></text></g><g><title>free_pcppages_bulk (3 samples, 0.17%)</title><rect x="93.2050%" y="309" width="0.1699%" height="15" fill="rgb(214,7,15)" fg:x="1646" fg:w="3"/><text x="93.4550%" y="319.50"></text></g><g><title>__free_one_page (3 samples, 0.17%)</title><rect x="93.2050%" y="293" width="0.1699%" height="15" fill="rgb(235,32,4)" fg:x="1646" fg:w="3"/><text x="93.4550%" y="303.50"></text></g><g><title>free_pages_and_swap_cache (17 samples, 0.96%)</title><rect x="92.4689%" y="373" width="0.9626%" height="15" fill="rgb(238,90,54)" fg:x="1633" fg:w="17"/><text x="92.7189%" y="383.50"></text></g><g><title>release_pages (17 samples, 0.96%)</title><rect x="92.4689%" y="357" width="0.9626%" height="15" fill="rgb(213,208,19)" fg:x="1633" fg:w="17"/><text x="92.7189%" y="367.50"></text></g><g><title>mem_cgroup_update_lru_size (1 samples, 0.06%)</title><rect x="93.3749%" y="341" width="0.0566%" height="15" fill="rgb(233,156,4)" fg:x="1649" fg:w="1"/><text x="93.6249%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;test_mmmh::Product&gt;&gt; (320 samples, 18.12%)</title><rect x="75.3681%" y="677" width="18.1200%" height="15" fill="rgb(207,194,5)" fg:x="1331" fg:w="320"/><text x="75.6181%" y="687.50">core::ptr::drop_in_place&lt;all..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;test_mmmh::Product&gt;&gt; (22 samples, 1.25%)</title><rect x="92.2424%" y="661" width="1.2458%" height="15" fill="rgb(206,111,30)" fg:x="1629" fg:w="22"/><text x="92.4924%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 1.25%)</title><rect x="92.2424%" y="645" width="1.2458%" height="15" fill="rgb(243,70,54)" fg:x="1629" fg:w="22"/><text x="92.4924%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (22 samples, 1.25%)</title><rect x="92.2424%" y="629" width="1.2458%" height="15" fill="rgb(242,28,8)" fg:x="1629" fg:w="22"/><text x="92.4924%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (22 samples, 1.25%)</title><rect x="92.2424%" y="613" width="1.2458%" height="15" fill="rgb(219,106,18)" fg:x="1629" fg:w="22"/><text x="92.4924%" y="623.50"></text></g><g><title>__GI___libc_free (22 samples, 1.25%)</title><rect x="92.2424%" y="597" width="1.2458%" height="15" fill="rgb(244,222,10)" fg:x="1629" fg:w="22"/><text x="92.4924%" y="607.50"></text></g><g><title>__GI___munmap (22 samples, 1.25%)</title><rect x="92.2424%" y="581" width="1.2458%" height="15" fill="rgb(236,179,52)" fg:x="1629" fg:w="22"/><text x="92.4924%" y="591.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (22 samples, 1.25%)</title><rect x="92.2424%" y="565" width="1.2458%" height="15" fill="rgb(213,23,39)" fg:x="1629" fg:w="22"/><text x="92.4924%" y="575.50"></text></g><g><title>do_syscall_64 (22 samples, 1.25%)</title><rect x="92.2424%" y="549" width="1.2458%" height="15" fill="rgb(238,48,10)" fg:x="1629" fg:w="22"/><text x="92.4924%" y="559.50"></text></g><g><title>__x64_sys_munmap (22 samples, 1.25%)</title><rect x="92.2424%" y="533" width="1.2458%" height="15" fill="rgb(251,196,23)" fg:x="1629" fg:w="22"/><text x="92.4924%" y="543.50"></text></g><g><title>__vm_munmap (22 samples, 1.25%)</title><rect x="92.2424%" y="517" width="1.2458%" height="15" fill="rgb(250,152,24)" fg:x="1629" fg:w="22"/><text x="92.4924%" y="527.50"></text></g><g><title>__do_munmap (22 samples, 1.25%)</title><rect x="92.2424%" y="501" width="1.2458%" height="15" fill="rgb(209,150,17)" fg:x="1629" fg:w="22"/><text x="92.4924%" y="511.50"></text></g><g><title>unmap_region (22 samples, 1.25%)</title><rect x="92.2424%" y="485" width="1.2458%" height="15" fill="rgb(234,202,34)" fg:x="1629" fg:w="22"/><text x="92.4924%" y="495.50"></text></g><g><title>unmap_vmas (22 samples, 1.25%)</title><rect x="92.2424%" y="469" width="1.2458%" height="15" fill="rgb(253,148,53)" fg:x="1629" fg:w="22"/><text x="92.4924%" y="479.50"></text></g><g><title>unmap_single_vma (22 samples, 1.25%)</title><rect x="92.2424%" y="453" width="1.2458%" height="15" fill="rgb(218,129,16)" fg:x="1629" fg:w="22"/><text x="92.4924%" y="463.50"></text></g><g><title>unmap_page_range (22 samples, 1.25%)</title><rect x="92.2424%" y="437" width="1.2458%" height="15" fill="rgb(216,85,19)" fg:x="1629" fg:w="22"/><text x="92.4924%" y="447.50"></text></g><g><title>zap_pmd_range.isra.0 (22 samples, 1.25%)</title><rect x="92.2424%" y="421" width="1.2458%" height="15" fill="rgb(235,228,7)" fg:x="1629" fg:w="22"/><text x="92.4924%" y="431.50"></text></g><g><title>zap_pte_range (22 samples, 1.25%)</title><rect x="92.2424%" y="405" width="1.2458%" height="15" fill="rgb(245,175,0)" fg:x="1629" fg:w="22"/><text x="92.4924%" y="415.50"></text></g><g><title>tlb_flush_mmu (18 samples, 1.02%)</title><rect x="92.4689%" y="389" width="1.0193%" height="15" fill="rgb(208,168,36)" fg:x="1633" fg:w="18"/><text x="92.7189%" y="399.50"></text></g><g><title>free_swap_cache (1 samples, 0.06%)</title><rect x="93.4315%" y="373" width="0.0566%" height="15" fill="rgb(246,171,24)" fg:x="1650" fg:w="1"/><text x="93.6815%" y="383.50"></text></g><g><title>__libc_start_main_impl (1,157 samples, 65.52%)</title><rect x="28.2559%" y="933" width="65.5153%" height="15" fill="rgb(215,142,24)" fg:x="499" fg:w="1157"/><text x="28.5059%" y="943.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (1,157 samples, 65.52%)</title><rect x="28.2559%" y="917" width="65.5153%" height="15" fill="rgb(250,187,7)" fg:x="499" fg:w="1157"/><text x="28.5059%" y="927.50">__libc_start_call_main</text></g><g><title>main (1,157 samples, 65.52%)</title><rect x="28.2559%" y="901" width="65.5153%" height="15" fill="rgb(228,66,33)" fg:x="499" fg:w="1157"/><text x="28.5059%" y="911.50">main</text></g><g><title>std::rt::lang_start_internal (1,157 samples, 65.52%)</title><rect x="28.2559%" y="885" width="65.5153%" height="15" fill="rgb(234,215,21)" fg:x="499" fg:w="1157"/><text x="28.5059%" y="895.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,157 samples, 65.52%)</title><rect x="28.2559%" y="869" width="65.5153%" height="15" fill="rgb(222,191,20)" fg:x="499" fg:w="1157"/><text x="28.5059%" y="879.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,157 samples, 65.52%)</title><rect x="28.2559%" y="853" width="65.5153%" height="15" fill="rgb(245,79,54)" fg:x="499" fg:w="1157"/><text x="28.5059%" y="863.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,157 samples, 65.52%)</title><rect x="28.2559%" y="837" width="65.5153%" height="15" fill="rgb(240,10,37)" fg:x="499" fg:w="1157"/><text x="28.5059%" y="847.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,157 samples, 65.52%)</title><rect x="28.2559%" y="821" width="65.5153%" height="15" fill="rgb(214,192,32)" fg:x="499" fg:w="1157"/><text x="28.5059%" y="831.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,157 samples, 65.52%)</title><rect x="28.2559%" y="805" width="65.5153%" height="15" fill="rgb(209,36,54)" fg:x="499" fg:w="1157"/><text x="28.5059%" y="815.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,157 samples, 65.52%)</title><rect x="28.2559%" y="789" width="65.5153%" height="15" fill="rgb(220,10,11)" fg:x="499" fg:w="1157"/><text x="28.5059%" y="799.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,157 samples, 65.52%)</title><rect x="28.2559%" y="773" width="65.5153%" height="15" fill="rgb(221,106,17)" fg:x="499" fg:w="1157"/><text x="28.5059%" y="783.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,157 samples, 65.52%)</title><rect x="28.2559%" y="757" width="65.5153%" height="15" fill="rgb(251,142,44)" fg:x="499" fg:w="1157"/><text x="28.5059%" y="767.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,157 samples, 65.52%)</title><rect x="28.2559%" y="741" width="65.5153%" height="15" fill="rgb(238,13,15)" fg:x="499" fg:w="1157"/><text x="28.5059%" y="751.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,157 samples, 65.52%)</title><rect x="28.2559%" y="725" width="65.5153%" height="15" fill="rgb(208,107,27)" fg:x="499" fg:w="1157"/><text x="28.5059%" y="735.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (1,157 samples, 65.52%)</title><rect x="28.2559%" y="709" width="65.5153%" height="15" fill="rgb(205,136,37)" fg:x="499" fg:w="1157"/><text x="28.5059%" y="719.50">core::ops::function::FnOnce::call_once</text></g><g><title>test_mmmh::main (1,157 samples, 65.52%)</title><rect x="28.2559%" y="693" width="65.5153%" height="15" fill="rgb(250,205,27)" fg:x="499" fg:w="1157"/><text x="28.5059%" y="703.50">test_mmmh::main</text></g><g><title>test_mmmh::update_2 (5 samples, 0.28%)</title><rect x="93.4881%" y="677" width="0.2831%" height="15" fill="rgb(210,80,43)" fg:x="1651" fg:w="5"/><text x="93.7381%" y="687.50"></text></g><g><title>crossbeam_utils::thread::scope (5 samples, 0.28%)</title><rect x="93.4881%" y="661" width="0.2831%" height="15" fill="rgb(247,160,36)" fg:x="1651" fg:w="5"/><text x="93.7381%" y="671.50"></text></g><g><title>std::panic::catch_unwind (5 samples, 0.28%)</title><rect x="93.4881%" y="645" width="0.2831%" height="15" fill="rgb(234,13,49)" fg:x="1651" fg:w="5"/><text x="93.7381%" y="655.50"></text></g><g><title>std::panicking::try (5 samples, 0.28%)</title><rect x="93.4881%" y="629" width="0.2831%" height="15" fill="rgb(234,122,0)" fg:x="1651" fg:w="5"/><text x="93.7381%" y="639.50"></text></g><g><title>std::panicking::try::do_call (5 samples, 0.28%)</title><rect x="93.4881%" y="613" width="0.2831%" height="15" fill="rgb(207,146,38)" fg:x="1651" fg:w="5"/><text x="93.7381%" y="623.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (5 samples, 0.28%)</title><rect x="93.4881%" y="597" width="0.2831%" height="15" fill="rgb(207,177,25)" fg:x="1651" fg:w="5"/><text x="93.7381%" y="607.50"></text></g><g><title>crossbeam_utils::thread::scope::{{closure}} (5 samples, 0.28%)</title><rect x="93.4881%" y="581" width="0.2831%" height="15" fill="rgb(211,178,42)" fg:x="1651" fg:w="5"/><text x="93.7381%" y="591.50"></text></g><g><title>test_mmmh::update_2::{{closure}} (5 samples, 0.28%)</title><rect x="93.4881%" y="565" width="0.2831%" height="15" fill="rgb(230,69,54)" fg:x="1651" fg:w="5"/><text x="93.7381%" y="575.50"></text></g><g><title>crossbeam_utils::thread::ScopedJoinHandle&lt;T&gt;::join (5 samples, 0.28%)</title><rect x="93.4881%" y="549" width="0.2831%" height="15" fill="rgb(214,135,41)" fg:x="1651" fg:w="5"/><text x="93.7381%" y="559.50"></text></g><g><title>std::thread::JoinHandle&lt;T&gt;::join (5 samples, 0.28%)</title><rect x="93.4881%" y="533" width="0.2831%" height="15" fill="rgb(237,67,25)" fg:x="1651" fg:w="5"/><text x="93.7381%" y="543.50"></text></g><g><title>std::thread::JoinInner&lt;T&gt;::join (5 samples, 0.28%)</title><rect x="93.4881%" y="517" width="0.2831%" height="15" fill="rgb(222,189,50)" fg:x="1651" fg:w="5"/><text x="93.7381%" y="527.50"></text></g><g><title>std::sys::unix::thread::Thread::join (5 samples, 0.28%)</title><rect x="93.4881%" y="501" width="0.2831%" height="15" fill="rgb(245,148,34)" fg:x="1651" fg:w="5"/><text x="93.7381%" y="511.50"></text></g><g><title>__pthread_clockjoin_ex (5 samples, 0.28%)</title><rect x="93.4881%" y="485" width="0.2831%" height="15" fill="rgb(222,29,6)" fg:x="1651" fg:w="5"/><text x="93.7381%" y="495.50"></text></g><g><title>__GI___futex_abstimed_wait_cancelable64 (5 samples, 0.28%)</title><rect x="93.4881%" y="469" width="0.2831%" height="15" fill="rgb(221,189,43)" fg:x="1651" fg:w="5"/><text x="93.7381%" y="479.50"></text></g><g><title>__futex_abstimed_wait_common (5 samples, 0.28%)</title><rect x="93.4881%" y="453" width="0.2831%" height="15" fill="rgb(207,36,27)" fg:x="1651" fg:w="5"/><text x="93.7381%" y="463.50"></text></g><g><title>__futex_abstimed_wait_common64 (5 samples, 0.28%)</title><rect x="93.4881%" y="437" width="0.2831%" height="15" fill="rgb(217,90,24)" fg:x="1651" fg:w="5"/><text x="93.7381%" y="447.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 0.28%)</title><rect x="93.4881%" y="421" width="0.2831%" height="15" fill="rgb(224,66,35)" fg:x="1651" fg:w="5"/><text x="93.7381%" y="431.50"></text></g><g><title>do_syscall_64 (5 samples, 0.28%)</title><rect x="93.4881%" y="405" width="0.2831%" height="15" fill="rgb(221,13,50)" fg:x="1651" fg:w="5"/><text x="93.7381%" y="415.50"></text></g><g><title>__x64_sys_futex (5 samples, 0.28%)</title><rect x="93.4881%" y="389" width="0.2831%" height="15" fill="rgb(236,68,49)" fg:x="1651" fg:w="5"/><text x="93.7381%" y="399.50"></text></g><g><title>do_futex (5 samples, 0.28%)</title><rect x="93.4881%" y="373" width="0.2831%" height="15" fill="rgb(229,146,28)" fg:x="1651" fg:w="5"/><text x="93.7381%" y="383.50"></text></g><g><title>futex_wait (5 samples, 0.28%)</title><rect x="93.4881%" y="357" width="0.2831%" height="15" fill="rgb(225,31,38)" fg:x="1651" fg:w="5"/><text x="93.7381%" y="367.50"></text></g><g><title>futex_wait_queue_me (5 samples, 0.28%)</title><rect x="93.4881%" y="341" width="0.2831%" height="15" fill="rgb(250,208,3)" fg:x="1651" fg:w="5"/><text x="93.7381%" y="351.50"></text></g><g><title>schedule (5 samples, 0.28%)</title><rect x="93.4881%" y="325" width="0.2831%" height="15" fill="rgb(246,54,23)" fg:x="1651" fg:w="5"/><text x="93.7381%" y="335.50"></text></g><g><title>__schedule (5 samples, 0.28%)</title><rect x="93.4881%" y="309" width="0.2831%" height="15" fill="rgb(243,76,11)" fg:x="1651" fg:w="5"/><text x="93.7381%" y="319.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.28%)</title><rect x="93.4881%" y="293" width="0.2831%" height="15" fill="rgb(245,21,50)" fg:x="1651" fg:w="5"/><text x="93.7381%" y="303.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.28%)</title><rect x="93.4881%" y="277" width="0.2831%" height="15" fill="rgb(228,9,43)" fg:x="1651" fg:w="5"/><text x="93.7381%" y="287.50"></text></g><g><title>x86_pmu_enable (5 samples, 0.28%)</title><rect x="93.4881%" y="261" width="0.2831%" height="15" fill="rgb(208,100,47)" fg:x="1651" fg:w="5"/><text x="93.7381%" y="271.50"></text></g><g><title>intel_pmu_enable_all (5 samples, 0.28%)</title><rect x="93.4881%" y="245" width="0.2831%" height="15" fill="rgb(232,26,8)" fg:x="1651" fg:w="5"/><text x="93.7381%" y="255.50"></text></g><g><title>native_write_msr (5 samples, 0.28%)</title><rect x="93.4881%" y="229" width="0.2831%" height="15" fill="rgb(216,166,38)" fg:x="1651" fg:w="5"/><text x="93.7381%" y="239.50"></text></g><g><title>_start (1,158 samples, 65.57%)</title><rect x="28.2559%" y="949" width="65.5719%" height="15" fill="rgb(251,202,51)" fg:x="499" fg:w="1158"/><text x="28.5059%" y="959.50">_start</text></g><g><title>_dl_start (1 samples, 0.06%)</title><rect x="93.7712%" y="933" width="0.0566%" height="15" fill="rgb(254,216,34)" fg:x="1656" fg:w="1"/><text x="94.0212%" y="943.50"></text></g><g><title>_dl_start_final (1 samples, 0.06%)</title><rect x="93.7712%" y="917" width="0.0566%" height="15" fill="rgb(251,32,27)" fg:x="1656" fg:w="1"/><text x="94.0212%" y="927.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.06%)</title><rect x="93.7712%" y="901" width="0.0566%" height="15" fill="rgb(208,127,28)" fg:x="1656" fg:w="1"/><text x="94.0212%" y="911.50"></text></g><g><title>dl_main (1 samples, 0.06%)</title><rect x="93.7712%" y="885" width="0.0566%" height="15" fill="rgb(224,137,22)" fg:x="1656" fg:w="1"/><text x="94.0212%" y="895.50"></text></g><g><title>__libc_early_init (1 samples, 0.06%)</title><rect x="93.7712%" y="869" width="0.0566%" height="15" fill="rgb(254,70,32)" fg:x="1656" fg:w="1"/><text x="94.0212%" y="879.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.06%)</title><rect x="93.7712%" y="853" width="0.0566%" height="15" fill="rgb(229,75,37)" fg:x="1656" fg:w="1"/><text x="94.0212%" y="863.50"></text></g><g><title>exc_page_fault (1 samples, 0.06%)</title><rect x="93.7712%" y="837" width="0.0566%" height="15" fill="rgb(252,64,23)" fg:x="1656" fg:w="1"/><text x="94.0212%" y="847.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.06%)</title><rect x="93.7712%" y="821" width="0.0566%" height="15" fill="rgb(232,162,48)" fg:x="1656" fg:w="1"/><text x="94.0212%" y="831.50"></text></g><g><title>handle_mm_fault (1 samples, 0.06%)</title><rect x="93.7712%" y="805" width="0.0566%" height="15" fill="rgb(246,160,12)" fg:x="1656" fg:w="1"/><text x="94.0212%" y="815.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.06%)</title><rect x="93.7712%" y="789" width="0.0566%" height="15" fill="rgb(247,166,0)" fg:x="1656" fg:w="1"/><text x="94.0212%" y="799.50"></text></g><g><title>handle_pte_fault (1 samples, 0.06%)</title><rect x="93.7712%" y="773" width="0.0566%" height="15" fill="rgb(249,219,21)" fg:x="1656" fg:w="1"/><text x="94.0212%" y="783.50"></text></g><g><title>do_anonymous_page (1 samples, 0.06%)</title><rect x="93.7712%" y="757" width="0.0566%" height="15" fill="rgb(205,209,3)" fg:x="1656" fg:w="1"/><text x="94.0212%" y="767.50"></text></g><g><title>__mem_cgroup_charge (1 samples, 0.06%)</title><rect x="93.7712%" y="741" width="0.0566%" height="15" fill="rgb(243,44,1)" fg:x="1656" fg:w="1"/><text x="94.0212%" y="751.50"></text></g><g><title>charge_memcg (1 samples, 0.06%)</title><rect x="93.7712%" y="725" width="0.0566%" height="15" fill="rgb(206,159,16)" fg:x="1656" fg:w="1"/><text x="94.0212%" y="735.50"></text></g><g><title>try_charge_memcg (1 samples, 0.06%)</title><rect x="93.7712%" y="709" width="0.0566%" height="15" fill="rgb(244,77,30)" fg:x="1656" fg:w="1"/><text x="94.0212%" y="719.50"></text></g><g><title>asm_exc_page_fault (64 samples, 3.62%)</title><rect x="93.8279%" y="949" width="3.6240%" height="15" fill="rgb(218,69,12)" fg:x="1657" fg:w="64"/><text x="94.0779%" y="959.50">asm_..</text></g><g><title>exc_page_fault (1 samples, 0.06%)</title><rect x="97.3952%" y="933" width="0.0566%" height="15" fill="rgb(212,87,7)" fg:x="1720" fg:w="1"/><text x="97.6452%" y="943.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.06%)</title><rect x="97.3952%" y="917" width="0.0566%" height="15" fill="rgb(245,114,25)" fg:x="1720" fg:w="1"/><text x="97.6452%" y="927.50"></text></g><g><title>handle_mm_fault (1 samples, 0.06%)</title><rect x="97.3952%" y="901" width="0.0566%" height="15" fill="rgb(210,61,42)" fg:x="1720" fg:w="1"/><text x="97.6452%" y="911.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.06%)</title><rect x="97.3952%" y="885" width="0.0566%" height="15" fill="rgb(211,52,33)" fg:x="1720" fg:w="1"/><text x="97.6452%" y="895.50"></text></g><g><title>handle_pte_fault (1 samples, 0.06%)</title><rect x="97.3952%" y="869" width="0.0566%" height="15" fill="rgb(234,58,33)" fg:x="1720" fg:w="1"/><text x="97.6452%" y="879.50"></text></g><g><title>__x64_sys_execve (1 samples, 0.06%)</title><rect x="97.5085%" y="917" width="0.0566%" height="15" fill="rgb(220,115,36)" fg:x="1722" fg:w="1"/><text x="97.7585%" y="927.50"></text></g><g><title>do_execveat_common.isra.0 (1 samples, 0.06%)</title><rect x="97.5085%" y="901" width="0.0566%" height="15" fill="rgb(243,153,54)" fg:x="1722" fg:w="1"/><text x="97.7585%" y="911.50"></text></g><g><title>bprm_execve (1 samples, 0.06%)</title><rect x="97.5085%" y="885" width="0.0566%" height="15" fill="rgb(251,47,18)" fg:x="1722" fg:w="1"/><text x="97.7585%" y="895.50"></text></g><g><title>bprm_execve.part.0 (1 samples, 0.06%)</title><rect x="97.5085%" y="869" width="0.0566%" height="15" fill="rgb(242,102,42)" fg:x="1722" fg:w="1"/><text x="97.7585%" y="879.50"></text></g><g><title>exec_binprm (1 samples, 0.06%)</title><rect x="97.5085%" y="853" width="0.0566%" height="15" fill="rgb(234,31,38)" fg:x="1722" fg:w="1"/><text x="97.7585%" y="863.50"></text></g><g><title>search_binary_handler (1 samples, 0.06%)</title><rect x="97.5085%" y="837" width="0.0566%" height="15" fill="rgb(221,117,51)" fg:x="1722" fg:w="1"/><text x="97.7585%" y="847.50"></text></g><g><title>load_elf_binary (1 samples, 0.06%)</title><rect x="97.5085%" y="821" width="0.0566%" height="15" fill="rgb(212,20,18)" fg:x="1722" fg:w="1"/><text x="97.7585%" y="831.50"></text></g><g><title>setup_arg_pages (1 samples, 0.06%)</title><rect x="97.5085%" y="805" width="0.0566%" height="15" fill="rgb(245,133,36)" fg:x="1722" fg:w="1"/><text x="97.7585%" y="815.50"></text></g><g><title>mprotect_fixup (1 samples, 0.06%)</title><rect x="97.5085%" y="789" width="0.0566%" height="15" fill="rgb(212,6,19)" fg:x="1722" fg:w="1"/><text x="97.7585%" y="799.50"></text></g><g><title>perf_event_mmap (1 samples, 0.06%)</title><rect x="97.5085%" y="773" width="0.0566%" height="15" fill="rgb(218,1,36)" fg:x="1722" fg:w="1"/><text x="97.7585%" y="783.50"></text></g><g><title>perf_event_mmap_event (1 samples, 0.06%)</title><rect x="97.5085%" y="757" width="0.0566%" height="15" fill="rgb(246,84,54)" fg:x="1722" fg:w="1"/><text x="97.7585%" y="767.50"></text></g><g><title>__mod_lruvec_page_state (1 samples, 0.06%)</title><rect x="97.7916%" y="741" width="0.0566%" height="15" fill="rgb(242,110,6)" fg:x="1727" fg:w="1"/><text x="98.0416%" y="751.50"></text></g><g><title>__mod_memcg_lruvec_state (1 samples, 0.06%)</title><rect x="98.0181%" y="693" width="0.0566%" height="15" fill="rgb(214,47,5)" fg:x="1731" fg:w="1"/><text x="98.2681%" y="703.50"></text></g><g><title>page_remove_rmap (5 samples, 0.28%)</title><rect x="97.8482%" y="741" width="0.2831%" height="15" fill="rgb(218,159,25)" fg:x="1728" fg:w="5"/><text x="98.0982%" y="751.50"></text></g><g><title>__mod_lruvec_page_state (4 samples, 0.23%)</title><rect x="97.9049%" y="725" width="0.2265%" height="15" fill="rgb(215,211,28)" fg:x="1729" fg:w="4"/><text x="98.1549%" y="735.50"></text></g><g><title>__mod_lruvec_state (2 samples, 0.11%)</title><rect x="98.0181%" y="709" width="0.1133%" height="15" fill="rgb(238,59,32)" fg:x="1731" fg:w="2"/><text x="98.2681%" y="719.50"></text></g><g><title>__mod_node_page_state (1 samples, 0.06%)</title><rect x="98.0747%" y="693" width="0.0566%" height="15" fill="rgb(226,82,3)" fg:x="1732" fg:w="1"/><text x="98.3247%" y="703.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.06%)</title><rect x="98.4145%" y="693" width="0.0566%" height="15" fill="rgb(240,164,32)" fg:x="1738" fg:w="1"/><text x="98.6645%" y="703.50"></text></g><g><title>__mod_zone_page_state (2 samples, 0.11%)</title><rect x="98.4711%" y="693" width="0.1133%" height="15" fill="rgb(232,46,7)" fg:x="1739" fg:w="2"/><text x="98.7211%" y="703.50"></text></g><g><title>free_unref_page_list (8 samples, 0.45%)</title><rect x="98.5844%" y="693" width="0.4530%" height="15" fill="rgb(229,129,53)" fg:x="1741" fg:w="8"/><text x="98.8344%" y="703.50"></text></g><g><title>free_unref_page_commit.constprop.0 (7 samples, 0.40%)</title><rect x="98.6410%" y="677" width="0.3964%" height="15" fill="rgb(234,188,29)" fg:x="1742" fg:w="7"/><text x="98.8910%" y="687.50"></text></g><g><title>free_pcppages_bulk (6 samples, 0.34%)</title><rect x="98.6976%" y="661" width="0.3398%" height="15" fill="rgb(246,141,4)" fg:x="1743" fg:w="6"/><text x="98.9476%" y="671.50"></text></g><g><title>__free_one_page (2 samples, 0.11%)</title><rect x="98.9241%" y="645" width="0.1133%" height="15" fill="rgb(229,23,39)" fg:x="1747" fg:w="2"/><text x="99.1741%" y="655.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (29 samples, 1.64%)</title><rect x="97.4519%" y="949" width="1.6421%" height="15" fill="rgb(206,12,3)" fg:x="1721" fg:w="29"/><text x="97.7019%" y="959.50"></text></g><g><title>do_syscall_64 (28 samples, 1.59%)</title><rect x="97.5085%" y="933" width="1.5855%" height="15" fill="rgb(252,226,20)" fg:x="1722" fg:w="28"/><text x="97.7585%" y="943.50"></text></g><g><title>__x64_sys_exit_group (27 samples, 1.53%)</title><rect x="97.5651%" y="917" width="1.5289%" height="15" fill="rgb(216,123,35)" fg:x="1723" fg:w="27"/><text x="97.8151%" y="927.50"></text></g><g><title>do_group_exit (27 samples, 1.53%)</title><rect x="97.5651%" y="901" width="1.5289%" height="15" fill="rgb(212,68,40)" fg:x="1723" fg:w="27"/><text x="97.8151%" y="911.50"></text></g><g><title>do_exit (27 samples, 1.53%)</title><rect x="97.5651%" y="885" width="1.5289%" height="15" fill="rgb(254,125,32)" fg:x="1723" fg:w="27"/><text x="97.8151%" y="895.50"></text></g><g><title>exit_mm (27 samples, 1.53%)</title><rect x="97.5651%" y="869" width="1.5289%" height="15" fill="rgb(253,97,22)" fg:x="1723" fg:w="27"/><text x="97.8151%" y="879.50"></text></g><g><title>mmput (27 samples, 1.53%)</title><rect x="97.5651%" y="853" width="1.5289%" height="15" fill="rgb(241,101,14)" fg:x="1723" fg:w="27"/><text x="97.8151%" y="863.50"></text></g><g><title>exit_mmap (27 samples, 1.53%)</title><rect x="97.5651%" y="837" width="1.5289%" height="15" fill="rgb(238,103,29)" fg:x="1723" fg:w="27"/><text x="97.8151%" y="847.50"></text></g><g><title>unmap_vmas (27 samples, 1.53%)</title><rect x="97.5651%" y="821" width="1.5289%" height="15" fill="rgb(233,195,47)" fg:x="1723" fg:w="27"/><text x="97.8151%" y="831.50"></text></g><g><title>unmap_single_vma (27 samples, 1.53%)</title><rect x="97.5651%" y="805" width="1.5289%" height="15" fill="rgb(246,218,30)" fg:x="1723" fg:w="27"/><text x="97.8151%" y="815.50"></text></g><g><title>unmap_page_range (27 samples, 1.53%)</title><rect x="97.5651%" y="789" width="1.5289%" height="15" fill="rgb(219,145,47)" fg:x="1723" fg:w="27"/><text x="97.8151%" y="799.50"></text></g><g><title>zap_pmd_range.isra.0 (27 samples, 1.53%)</title><rect x="97.5651%" y="773" width="1.5289%" height="15" fill="rgb(243,12,26)" fg:x="1723" fg:w="27"/><text x="97.8151%" y="783.50"></text></g><g><title>zap_pte_range (27 samples, 1.53%)</title><rect x="97.5651%" y="757" width="1.5289%" height="15" fill="rgb(214,87,16)" fg:x="1723" fg:w="27"/><text x="97.8151%" y="767.50"></text></g><g><title>tlb_flush_mmu (17 samples, 0.96%)</title><rect x="98.1314%" y="741" width="0.9626%" height="15" fill="rgb(208,99,42)" fg:x="1733" fg:w="17"/><text x="98.3814%" y="751.50"></text></g><g><title>free_pages_and_swap_cache (17 samples, 0.96%)</title><rect x="98.1314%" y="725" width="0.9626%" height="15" fill="rgb(253,99,2)" fg:x="1733" fg:w="17"/><text x="98.3814%" y="735.50"></text></g><g><title>release_pages (17 samples, 0.96%)</title><rect x="98.1314%" y="709" width="0.9626%" height="15" fill="rgb(220,168,23)" fg:x="1733" fg:w="17"/><text x="98.3814%" y="719.50"></text></g><g><title>uncharge_page (1 samples, 0.06%)</title><rect x="99.0374%" y="693" width="0.0566%" height="15" fill="rgb(242,38,24)" fg:x="1749" fg:w="1"/><text x="99.2874%" y="703.50"></text></g><g><title>entry_SYSCALL_64_safe_stack (1 samples, 0.06%)</title><rect x="99.0940%" y="949" width="0.0566%" height="15" fill="rgb(225,182,9)" fg:x="1750" fg:w="1"/><text x="99.3440%" y="959.50"></text></g><g><title>ret_from_fork (10 samples, 0.57%)</title><rect x="99.1506%" y="949" width="0.5663%" height="15" fill="rgb(243,178,37)" fg:x="1751" fg:w="10"/><text x="99.4006%" y="959.50"></text></g><g><title>schedule_tail (10 samples, 0.57%)</title><rect x="99.1506%" y="933" width="0.5663%" height="15" fill="rgb(232,139,19)" fg:x="1751" fg:w="10"/><text x="99.4006%" y="943.50"></text></g><g><title>finish_task_switch.isra.0 (10 samples, 0.57%)</title><rect x="99.1506%" y="917" width="0.5663%" height="15" fill="rgb(225,201,24)" fg:x="1751" fg:w="10"/><text x="99.4006%" y="927.50"></text></g><g><title>__perf_event_task_sched_in (9 samples, 0.51%)</title><rect x="99.2072%" y="901" width="0.5096%" height="15" fill="rgb(221,47,46)" fg:x="1752" fg:w="9"/><text x="99.4572%" y="911.50"></text></g><g><title>x86_pmu_enable (9 samples, 0.51%)</title><rect x="99.2072%" y="885" width="0.5096%" height="15" fill="rgb(249,23,13)" fg:x="1752" fg:w="9"/><text x="99.4572%" y="895.50"></text></g><g><title>intel_pmu_enable_all (9 samples, 0.51%)</title><rect x="99.2072%" y="869" width="0.5096%" height="15" fill="rgb(219,9,5)" fg:x="1752" fg:w="9"/><text x="99.4572%" y="879.50"></text></g><g><title>native_write_msr (9 samples, 0.51%)</title><rect x="99.2072%" y="853" width="0.5096%" height="15" fill="rgb(254,171,16)" fg:x="1752" fg:w="9"/><text x="99.4572%" y="863.50"></text></g><g><title>all (1,766 samples, 100%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(230,171,20)" fg:x="0" fg:w="1766"/><text x="0.2500%" y="991.50"></text></g><g><title>test_mmmh (1,761 samples, 99.72%)</title><rect x="0.2831%" y="965" width="99.7169%" height="15" fill="rgb(210,71,41)" fg:x="5" fg:w="1761"/><text x="0.5331%" y="975.50">test_mmmh</text></g><g><title>test_mmmh::main (5 samples, 0.28%)</title><rect x="99.7169%" y="949" width="0.2831%" height="15" fill="rgb(206,173,20)" fg:x="1761" fg:w="5"/><text x="99.9669%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;test_mmmh::Product&gt;&gt; (5 samples, 0.28%)</title><rect x="99.7169%" y="933" width="0.2831%" height="15" fill="rgb(233,88,34)" fg:x="1761" fg:w="5"/><text x="99.9669%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.28%)</title><rect x="99.7169%" y="917" width="0.2831%" height="15" fill="rgb(223,209,46)" fg:x="1761" fg:w="5"/><text x="99.9669%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;[test_mmmh::Product]&gt; (5 samples, 0.28%)</title><rect x="99.7169%" y="901" width="0.2831%" height="15" fill="rgb(250,43,18)" fg:x="1761" fg:w="5"/><text x="99.9669%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;test_mmmh::Product&gt; (5 samples, 0.28%)</title><rect x="99.7169%" y="885" width="0.2831%" height="15" fill="rgb(208,13,10)" fg:x="1761" fg:w="5"/><text x="99.9669%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (5 samples, 0.28%)</title><rect x="99.7169%" y="869" width="0.2831%" height="15" fill="rgb(212,200,36)" fg:x="1761" fg:w="5"/><text x="99.9669%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (5 samples, 0.28%)</title><rect x="99.7169%" y="853" width="0.2831%" height="15" fill="rgb(225,90,30)" fg:x="1761" fg:w="5"/><text x="99.9669%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (5 samples, 0.28%)</title><rect x="99.7169%" y="837" width="0.2831%" height="15" fill="rgb(236,182,39)" fg:x="1761" fg:w="5"/><text x="99.9669%" y="847.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.28%)</title><rect x="99.7169%" y="821" width="0.2831%" height="15" fill="rgb(212,144,35)" fg:x="1761" fg:w="5"/><text x="99.9669%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.28%)</title><rect x="99.7169%" y="805" width="0.2831%" height="15" fill="rgb(228,63,44)" fg:x="1761" fg:w="5"/><text x="99.9669%" y="815.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.28%)</title><rect x="99.7169%" y="789" width="0.2831%" height="15" fill="rgb(228,109,6)" fg:x="1761" fg:w="5"/><text x="99.9669%" y="799.50"></text></g></svg></svg>