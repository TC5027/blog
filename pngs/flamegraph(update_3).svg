<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1030" onload="init(evt)" viewBox="0 0 1200 1030" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1030" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1013.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1013.00"> </text><svg id="frames" x="10" width="1180" total_samples="3211"><g><title>perf-exec (5 samples, 0.16%)</title><rect x="0.0000%" y="965" width="0.1557%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="5"/><text x="0.2500%" y="975.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 0.16%)</title><rect x="0.0000%" y="949" width="0.1557%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="5"/><text x="0.2500%" y="959.50"></text></g><g><title>do_syscall_64 (5 samples, 0.16%)</title><rect x="0.0000%" y="933" width="0.1557%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="5"/><text x="0.2500%" y="943.50"></text></g><g><title>__x64_sys_execve (5 samples, 0.16%)</title><rect x="0.0000%" y="917" width="0.1557%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="5"/><text x="0.2500%" y="927.50"></text></g><g><title>do_execveat_common.isra.0 (5 samples, 0.16%)</title><rect x="0.0000%" y="901" width="0.1557%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="5"/><text x="0.2500%" y="911.50"></text></g><g><title>bprm_execve (5 samples, 0.16%)</title><rect x="0.0000%" y="885" width="0.1557%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="5"/><text x="0.2500%" y="895.50"></text></g><g><title>bprm_execve.part.0 (5 samples, 0.16%)</title><rect x="0.0000%" y="869" width="0.1557%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="5"/><text x="0.2500%" y="879.50"></text></g><g><title>exec_binprm (5 samples, 0.16%)</title><rect x="0.0000%" y="853" width="0.1557%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="5"/><text x="0.2500%" y="863.50"></text></g><g><title>search_binary_handler (5 samples, 0.16%)</title><rect x="0.0000%" y="837" width="0.1557%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="5"/><text x="0.2500%" y="847.50"></text></g><g><title>load_elf_binary (5 samples, 0.16%)</title><rect x="0.0000%" y="821" width="0.1557%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="5"/><text x="0.2500%" y="831.50"></text></g><g><title>begin_new_exec (5 samples, 0.16%)</title><rect x="0.0000%" y="805" width="0.1557%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="5"/><text x="0.2500%" y="815.50"></text></g><g><title>perf_event_exec (5 samples, 0.16%)</title><rect x="0.0000%" y="789" width="0.1557%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="5"/><text x="0.2500%" y="799.50"></text></g><g><title>ctx_resched (5 samples, 0.16%)</title><rect x="0.0000%" y="773" width="0.1557%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="5"/><text x="0.2500%" y="783.50"></text></g><g><title>x86_pmu_enable (5 samples, 0.16%)</title><rect x="0.0000%" y="757" width="0.1557%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="5"/><text x="0.2500%" y="767.50"></text></g><g><title>intel_pmu_enable_all (5 samples, 0.16%)</title><rect x="0.0000%" y="741" width="0.1557%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="5"/><text x="0.2500%" y="751.50"></text></g><g><title>native_write_msr (5 samples, 0.16%)</title><rect x="0.0000%" y="725" width="0.1557%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="5"/><text x="0.2500%" y="735.50"></text></g><g><title>__GI___libc_free (13 samples, 0.40%)</title><rect x="0.1557%" y="933" width="0.4049%" height="15" fill="rgb(225,20,46)" fg:x="5" fg:w="13"/><text x="0.4057%" y="943.50"></text></g><g><title>_int_free (8 samples, 0.25%)</title><rect x="0.5606%" y="933" width="0.2491%" height="15" fill="rgb(210,31,41)" fg:x="18" fg:w="8"/><text x="0.8106%" y="943.50"></text></g><g><title>[[heap]] (30 samples, 0.93%)</title><rect x="0.1557%" y="949" width="0.9343%" height="15" fill="rgb(221,200,47)" fg:x="5" fg:w="30"/><text x="0.4057%" y="959.50"></text></g><g><title>test_mmmh::SubProduct2::update_subproduct (9 samples, 0.28%)</title><rect x="0.8097%" y="933" width="0.2803%" height="15" fill="rgb(226,26,5)" fg:x="26" fg:w="9"/><text x="1.0597%" y="943.50"></text></g><g><title>[[stack]] (6 samples, 0.19%)</title><rect x="1.0900%" y="949" width="0.1869%" height="15" fill="rgb(249,33,26)" fg:x="35" fg:w="6"/><text x="1.3400%" y="959.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.19%)</title><rect x="1.0900%" y="933" width="0.1869%" height="15" fill="rgb(235,183,28)" fg:x="35" fg:w="6"/><text x="1.3400%" y="943.50"></text></g><g><title>__GI___libc_free (7 samples, 0.22%)</title><rect x="1.2769%" y="933" width="0.2180%" height="15" fill="rgb(221,5,38)" fg:x="41" fg:w="7"/><text x="1.5269%" y="943.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.16%)</title><rect x="1.4949%" y="933" width="0.1557%" height="15" fill="rgb(247,18,42)" fg:x="48" fg:w="5"/><text x="1.7449%" y="943.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.06%)</title><rect x="1.6506%" y="933" width="0.0623%" height="15" fill="rgb(241,131,45)" fg:x="53" fg:w="2"/><text x="1.9006%" y="943.50"></text></g><g><title>__rdl_realloc (1 samples, 0.03%)</title><rect x="1.7129%" y="933" width="0.0311%" height="15" fill="rgb(249,31,29)" fg:x="55" fg:w="1"/><text x="1.9629%" y="943.50"></text></g><g><title>_int_free (8 samples, 0.25%)</title><rect x="1.7440%" y="933" width="0.2491%" height="15" fill="rgb(225,111,53)" fg:x="56" fg:w="8"/><text x="1.9940%" y="943.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (7 samples, 0.22%)</title><rect x="1.9931%" y="933" width="0.2180%" height="15" fill="rgb(238,160,17)" fg:x="64" fg:w="7"/><text x="2.2431%" y="943.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.06%)</title><rect x="2.1489%" y="917" width="0.0623%" height="15" fill="rgb(214,148,48)" fg:x="69" fg:w="2"/><text x="2.3989%" y="927.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (2 samples, 0.06%)</title><rect x="2.1489%" y="901" width="0.0623%" height="15" fill="rgb(232,36,49)" fg:x="69" fg:w="2"/><text x="2.3989%" y="911.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (2 samples, 0.06%)</title><rect x="2.1489%" y="885" width="0.0623%" height="15" fill="rgb(209,103,24)" fg:x="69" fg:w="2"/><text x="2.3989%" y="895.50"></text></g><g><title>[anon] (31 samples, 0.97%)</title><rect x="1.2769%" y="949" width="0.9654%" height="15" fill="rgb(229,88,8)" fg:x="41" fg:w="31"/><text x="1.5269%" y="959.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="2.2111%" y="933" width="0.0311%" height="15" fill="rgb(213,181,19)" fg:x="71" fg:w="1"/><text x="2.4611%" y="943.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.03%)</title><rect x="2.2111%" y="917" width="0.0311%" height="15" fill="rgb(254,191,54)" fg:x="71" fg:w="1"/><text x="2.4611%" y="927.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.03%)</title><rect x="2.2111%" y="901" width="0.0311%" height="15" fill="rgb(241,83,37)" fg:x="71" fg:w="1"/><text x="2.4611%" y="911.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.03%)</title><rect x="2.2111%" y="885" width="0.0311%" height="15" fill="rgb(233,36,39)" fg:x="71" fg:w="1"/><text x="2.4611%" y="895.50"></text></g><g><title>[libc.so.6] (38 samples, 1.18%)</title><rect x="2.2423%" y="949" width="1.1834%" height="15" fill="rgb(226,3,54)" fg:x="72" fg:w="38"/><text x="2.4923%" y="959.50"></text></g><g><title>_int_malloc (38 samples, 1.18%)</title><rect x="2.2423%" y="933" width="1.1834%" height="15" fill="rgb(245,192,40)" fg:x="72" fg:w="38"/><text x="2.4923%" y="943.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (9 samples, 0.28%)</title><rect x="3.4257%" y="757" width="0.2803%" height="15" fill="rgb(238,167,29)" fg:x="110" fg:w="9"/><text x="3.6757%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (9 samples, 0.28%)</title><rect x="3.4257%" y="741" width="0.2803%" height="15" fill="rgb(232,182,51)" fg:x="110" fg:w="9"/><text x="3.6757%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (9 samples, 0.28%)</title><rect x="3.4257%" y="725" width="0.2803%" height="15" fill="rgb(231,60,39)" fg:x="110" fg:w="9"/><text x="3.6757%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9 samples, 0.28%)</title><rect x="3.4257%" y="709" width="0.2803%" height="15" fill="rgb(208,69,12)" fg:x="110" fg:w="9"/><text x="3.6757%" y="719.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 0.28%)</title><rect x="3.4257%" y="693" width="0.2803%" height="15" fill="rgb(235,93,37)" fg:x="110" fg:w="9"/><text x="3.6757%" y="703.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 0.28%)</title><rect x="3.4257%" y="677" width="0.2803%" height="15" fill="rgb(213,116,39)" fg:x="110" fg:w="9"/><text x="3.6757%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (17 samples, 0.53%)</title><rect x="3.4257%" y="933" width="0.5294%" height="15" fill="rgb(222,207,29)" fg:x="110" fg:w="17"/><text x="3.6757%" y="943.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (17 samples, 0.53%)</title><rect x="3.4257%" y="917" width="0.5294%" height="15" fill="rgb(206,96,30)" fg:x="110" fg:w="17"/><text x="3.6757%" y="927.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (17 samples, 0.53%)</title><rect x="3.4257%" y="901" width="0.5294%" height="15" fill="rgb(218,138,4)" fg:x="110" fg:w="17"/><text x="3.6757%" y="911.50"></text></g><g><title>test_mmmh::main::{{closure}} (17 samples, 0.53%)</title><rect x="3.4257%" y="885" width="0.5294%" height="15" fill="rgb(250,191,14)" fg:x="110" fg:w="17"/><text x="3.6757%" y="895.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (17 samples, 0.53%)</title><rect x="3.4257%" y="869" width="0.5294%" height="15" fill="rgb(239,60,40)" fg:x="110" fg:w="17"/><text x="3.6757%" y="879.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (17 samples, 0.53%)</title><rect x="3.4257%" y="853" width="0.5294%" height="15" fill="rgb(206,27,48)" fg:x="110" fg:w="17"/><text x="3.6757%" y="863.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (17 samples, 0.53%)</title><rect x="3.4257%" y="837" width="0.5294%" height="15" fill="rgb(225,35,8)" fg:x="110" fg:w="17"/><text x="3.6757%" y="847.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (17 samples, 0.53%)</title><rect x="3.4257%" y="821" width="0.5294%" height="15" fill="rgb(250,213,24)" fg:x="110" fg:w="17"/><text x="3.6757%" y="831.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (17 samples, 0.53%)</title><rect x="3.4257%" y="805" width="0.5294%" height="15" fill="rgb(247,123,22)" fg:x="110" fg:w="17"/><text x="3.6757%" y="815.50"></text></g><g><title>alloc::slice::hack::to_vec (17 samples, 0.53%)</title><rect x="3.4257%" y="789" width="0.5294%" height="15" fill="rgb(231,138,38)" fg:x="110" fg:w="17"/><text x="3.6757%" y="799.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (17 samples, 0.53%)</title><rect x="3.4257%" y="773" width="0.5294%" height="15" fill="rgb(231,145,46)" fg:x="110" fg:w="17"/><text x="3.6757%" y="783.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (8 samples, 0.25%)</title><rect x="3.7060%" y="757" width="0.2491%" height="15" fill="rgb(251,118,11)" fg:x="119" fg:w="8"/><text x="3.9560%" y="767.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.25%)</title><rect x="3.7060%" y="741" width="0.2491%" height="15" fill="rgb(217,147,25)" fg:x="119" fg:w="8"/><text x="3.9560%" y="751.50"></text></g><g><title>[libc.so.6] (10 samples, 0.31%)</title><rect x="3.9552%" y="933" width="0.3114%" height="15" fill="rgb(247,81,37)" fg:x="127" fg:w="10"/><text x="4.2052%" y="943.50"></text></g><g><title>__GI___libc_free (10 samples, 0.31%)</title><rect x="4.2666%" y="933" width="0.3114%" height="15" fill="rgb(209,12,38)" fg:x="137" fg:w="10"/><text x="4.5166%" y="943.50"></text></g><g><title>__GI___libc_malloc (18 samples, 0.56%)</title><rect x="4.5780%" y="933" width="0.5606%" height="15" fill="rgb(227,1,9)" fg:x="147" fg:w="18"/><text x="4.8280%" y="943.50"></text></g><g><title>__GI___libc_realloc (5 samples, 0.16%)</title><rect x="5.1386%" y="933" width="0.1557%" height="15" fill="rgb(248,47,43)" fg:x="165" fg:w="5"/><text x="5.3886%" y="943.50"></text></g><g><title>__rdl_realloc (2 samples, 0.06%)</title><rect x="5.2943%" y="933" width="0.0623%" height="15" fill="rgb(221,10,30)" fg:x="170" fg:w="2"/><text x="5.5443%" y="943.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (2 samples, 0.06%)</title><rect x="5.2943%" y="917" width="0.0623%" height="15" fill="rgb(210,229,1)" fg:x="170" fg:w="2"/><text x="5.5443%" y="927.50"></text></g><g><title>_int_free (21 samples, 0.65%)</title><rect x="5.3566%" y="933" width="0.6540%" height="15" fill="rgb(222,148,37)" fg:x="172" fg:w="21"/><text x="5.6066%" y="943.50"></text></g><g><title>_int_malloc (4 samples, 0.12%)</title><rect x="6.0106%" y="933" width="0.1246%" height="15" fill="rgb(234,67,33)" fg:x="193" fg:w="4"/><text x="6.2606%" y="943.50"></text></g><g><title>_int_realloc (9 samples, 0.28%)</title><rect x="6.1352%" y="933" width="0.2803%" height="15" fill="rgb(247,98,35)" fg:x="197" fg:w="9"/><text x="6.3852%" y="943.50"></text></g><g><title>alloc::raw_vec::finish_grow (20 samples, 0.62%)</title><rect x="6.4154%" y="933" width="0.6229%" height="15" fill="rgb(247,138,52)" fg:x="206" fg:w="20"/><text x="6.6654%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;test_mmmh::SubProduct1&gt;&gt; (2 samples, 0.06%)</title><rect x="7.4120%" y="869" width="0.0623%" height="15" fill="rgb(213,79,30)" fg:x="238" fg:w="2"/><text x="7.6620%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.06%)</title><rect x="7.4120%" y="853" width="0.0623%" height="15" fill="rgb(246,177,23)" fg:x="238" fg:w="2"/><text x="7.6620%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;[test_mmmh::SubProduct1]&gt; (2 samples, 0.06%)</title><rect x="7.4120%" y="837" width="0.0623%" height="15" fill="rgb(230,62,27)" fg:x="238" fg:w="2"/><text x="7.6620%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;test_mmmh::SubProduct1&gt; (2 samples, 0.06%)</title><rect x="7.4120%" y="821" width="0.0623%" height="15" fill="rgb(216,154,8)" fg:x="238" fg:w="2"/><text x="7.6620%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2 samples, 0.06%)</title><rect x="7.4120%" y="805" width="0.0623%" height="15" fill="rgb(244,35,45)" fg:x="238" fg:w="2"/><text x="7.6620%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.06%)</title><rect x="7.4120%" y="789" width="0.0623%" height="15" fill="rgb(251,115,12)" fg:x="238" fg:w="2"/><text x="7.6620%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.06%)</title><rect x="7.4120%" y="773" width="0.0623%" height="15" fill="rgb(240,54,50)" fg:x="238" fg:w="2"/><text x="7.6620%" y="783.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.06%)</title><rect x="7.4120%" y="757" width="0.0623%" height="15" fill="rgb(233,84,52)" fg:x="238" fg:w="2"/><text x="7.6620%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.06%)</title><rect x="7.4120%" y="741" width="0.0623%" height="15" fill="rgb(207,117,47)" fg:x="238" fg:w="2"/><text x="7.6620%" y="751.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.06%)</title><rect x="7.4120%" y="725" width="0.0623%" height="15" fill="rgb(249,43,39)" fg:x="238" fg:w="2"/><text x="7.6620%" y="735.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (21 samples, 0.65%)</title><rect x="7.0383%" y="933" width="0.6540%" height="15" fill="rgb(209,38,44)" fg:x="226" fg:w="21"/><text x="7.2883%" y="943.50"></text></g><g><title>crossbeam_utils::thread::ScopedThreadBuilder::spawn::{{closure}} (21 samples, 0.65%)</title><rect x="7.0383%" y="917" width="0.6540%" height="15" fill="rgb(236,212,23)" fg:x="226" fg:w="21"/><text x="7.2883%" y="927.50"></text></g><g><title>test_mmmh::update_3::{{closure}}::{{closure}} (21 samples, 0.65%)</title><rect x="7.0383%" y="901" width="0.6540%" height="15" fill="rgb(242,79,21)" fg:x="226" fg:w="21"/><text x="7.2883%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;test_mmmh::update_3::{{closure}}::{{closure}}&gt; (9 samples, 0.28%)</title><rect x="7.4120%" y="885" width="0.2803%" height="15" fill="rgb(211,96,35)" fg:x="238" fg:w="9"/><text x="7.6620%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;test_mmmh::SubProduct2&gt;&gt; (7 samples, 0.22%)</title><rect x="7.4743%" y="869" width="0.2180%" height="15" fill="rgb(253,215,40)" fg:x="240" fg:w="7"/><text x="7.7243%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.22%)</title><rect x="7.4743%" y="853" width="0.2180%" height="15" fill="rgb(211,81,21)" fg:x="240" fg:w="7"/><text x="7.7243%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;[test_mmmh::SubProduct2]&gt; (7 samples, 0.22%)</title><rect x="7.4743%" y="837" width="0.2180%" height="15" fill="rgb(208,190,38)" fg:x="240" fg:w="7"/><text x="7.7243%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;test_mmmh::SubProduct2&gt; (7 samples, 0.22%)</title><rect x="7.4743%" y="821" width="0.2180%" height="15" fill="rgb(235,213,38)" fg:x="240" fg:w="7"/><text x="7.7243%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (7 samples, 0.22%)</title><rect x="7.4743%" y="805" width="0.2180%" height="15" fill="rgb(237,122,38)" fg:x="240" fg:w="7"/><text x="7.7243%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (7 samples, 0.22%)</title><rect x="7.4743%" y="789" width="0.2180%" height="15" fill="rgb(244,218,35)" fg:x="240" fg:w="7"/><text x="7.7243%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (7 samples, 0.22%)</title><rect x="7.4743%" y="773" width="0.2180%" height="15" fill="rgb(240,68,47)" fg:x="240" fg:w="7"/><text x="7.7243%" y="783.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.22%)</title><rect x="7.4743%" y="757" width="0.2180%" height="15" fill="rgb(210,16,53)" fg:x="240" fg:w="7"/><text x="7.7243%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7 samples, 0.22%)</title><rect x="7.4743%" y="741" width="0.2180%" height="15" fill="rgb(235,124,12)" fg:x="240" fg:w="7"/><text x="7.7243%" y="751.50"></text></g><g><title>alloc::alloc::dealloc (7 samples, 0.22%)</title><rect x="7.4743%" y="725" width="0.2180%" height="15" fill="rgb(224,169,11)" fg:x="240" fg:w="7"/><text x="7.7243%" y="735.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (4 samples, 0.12%)</title><rect x="7.6923%" y="901" width="0.1246%" height="15" fill="rgb(250,166,2)" fg:x="247" fg:w="4"/><text x="7.9423%" y="911.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (4 samples, 0.12%)</title><rect x="7.6923%" y="885" width="0.1246%" height="15" fill="rgb(242,216,29)" fg:x="247" fg:w="4"/><text x="7.9423%" y="895.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (4 samples, 0.12%)</title><rect x="7.6923%" y="869" width="0.1246%" height="15" fill="rgb(230,116,27)" fg:x="247" fg:w="4"/><text x="7.9423%" y="879.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (4 samples, 0.12%)</title><rect x="7.6923%" y="853" width="0.1246%" height="15" fill="rgb(228,99,48)" fg:x="247" fg:w="4"/><text x="7.9423%" y="863.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 0.12%)</title><rect x="7.6923%" y="837" width="0.1246%" height="15" fill="rgb(253,11,6)" fg:x="247" fg:w="4"/><text x="7.9423%" y="847.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.12%)</title><rect x="7.6923%" y="821" width="0.1246%" height="15" fill="rgb(247,143,39)" fg:x="247" fg:w="4"/><text x="7.9423%" y="831.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 0.12%)</title><rect x="7.6923%" y="805" width="0.1246%" height="15" fill="rgb(236,97,10)" fg:x="247" fg:w="4"/><text x="7.9423%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.12%)</title><rect x="7.6923%" y="789" width="0.1246%" height="15" fill="rgb(233,208,19)" fg:x="247" fg:w="4"/><text x="7.9423%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.12%)</title><rect x="7.6923%" y="773" width="0.1246%" height="15" fill="rgb(216,164,2)" fg:x="247" fg:w="4"/><text x="7.9423%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.12%)</title><rect x="7.6923%" y="757" width="0.1246%" height="15" fill="rgb(220,129,5)" fg:x="247" fg:w="4"/><text x="7.9423%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.12%)</title><rect x="7.6923%" y="741" width="0.1246%" height="15" fill="rgb(242,17,10)" fg:x="247" fg:w="4"/><text x="7.9423%" y="751.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.12%)</title><rect x="7.6923%" y="725" width="0.1246%" height="15" fill="rgb(242,107,0)" fg:x="247" fg:w="4"/><text x="7.9423%" y="735.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.12%)</title><rect x="7.6923%" y="709" width="0.1246%" height="15" fill="rgb(251,28,31)" fg:x="247" fg:w="4"/><text x="7.9423%" y="719.50"></text></g><g><title>test_mmmh::process_production_site (15 samples, 0.47%)</title><rect x="7.6923%" y="917" width="0.4671%" height="15" fill="rgb(233,223,10)" fg:x="247" fg:w="15"/><text x="7.9423%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (11 samples, 0.34%)</title><rect x="7.8169%" y="901" width="0.3426%" height="15" fill="rgb(215,21,27)" fg:x="251" fg:w="11"/><text x="8.0669%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (11 samples, 0.34%)</title><rect x="7.8169%" y="885" width="0.3426%" height="15" fill="rgb(232,23,21)" fg:x="251" fg:w="11"/><text x="8.0669%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (11 samples, 0.34%)</title><rect x="7.8169%" y="869" width="0.3426%" height="15" fill="rgb(244,5,23)" fg:x="251" fg:w="11"/><text x="8.0669%" y="879.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.34%)</title><rect x="7.8169%" y="853" width="0.3426%" height="15" fill="rgb(226,81,46)" fg:x="251" fg:w="11"/><text x="8.0669%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (11 samples, 0.34%)</title><rect x="7.8169%" y="837" width="0.3426%" height="15" fill="rgb(247,70,30)" fg:x="251" fg:w="11"/><text x="8.0669%" y="847.50"></text></g><g><title>alloc::alloc::dealloc (11 samples, 0.34%)</title><rect x="7.8169%" y="821" width="0.3426%" height="15" fill="rgb(212,68,19)" fg:x="251" fg:w="11"/><text x="8.0669%" y="831.50"></text></g><g><title>[unknown] (156 samples, 4.86%)</title><rect x="3.4257%" y="949" width="4.8583%" height="15" fill="rgb(240,187,13)" fg:x="110" fg:w="156"/><text x="3.6757%" y="959.50">[unkno..</text></g><g><title>test_mmmh::SubProduct2::update_subproduct (19 samples, 0.59%)</title><rect x="7.6923%" y="933" width="0.5917%" height="15" fill="rgb(223,113,26)" fg:x="247" fg:w="19"/><text x="7.9423%" y="943.50"></text></g><g><title>test_mmmh::process_vendor (4 samples, 0.12%)</title><rect x="8.1595%" y="917" width="0.1246%" height="15" fill="rgb(206,192,2)" fg:x="262" fg:w="4"/><text x="8.4095%" y="927.50"></text></g><g><title>alloc::string::String::push_str (4 samples, 0.12%)</title><rect x="8.1595%" y="901" width="0.1246%" height="15" fill="rgb(241,108,4)" fg:x="262" fg:w="4"/><text x="8.4095%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (4 samples, 0.12%)</title><rect x="8.1595%" y="885" width="0.1246%" height="15" fill="rgb(247,173,49)" fg:x="262" fg:w="4"/><text x="8.4095%" y="895.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (4 samples, 0.12%)</title><rect x="8.1595%" y="869" width="0.1246%" height="15" fill="rgb(224,114,35)" fg:x="262" fg:w="4"/><text x="8.4095%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (4 samples, 0.12%)</title><rect x="8.1595%" y="853" width="0.1246%" height="15" fill="rgb(245,159,27)" fg:x="262" fg:w="4"/><text x="8.4095%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (4 samples, 0.12%)</title><rect x="8.1595%" y="837" width="0.1246%" height="15" fill="rgb(245,172,44)" fg:x="262" fg:w="4"/><text x="8.4095%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (4 samples, 0.12%)</title><rect x="8.1595%" y="821" width="0.1246%" height="15" fill="rgb(236,23,11)" fg:x="262" fg:w="4"/><text x="8.4095%" y="831.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="8.2840%" y="933" width="0.0311%" height="15" fill="rgb(205,117,38)" fg:x="266" fg:w="1"/><text x="8.5340%" y="943.50"></text></g><g><title>do_syscall_64 (1 samples, 0.03%)</title><rect x="8.2840%" y="917" width="0.0311%" height="15" fill="rgb(237,72,25)" fg:x="266" fg:w="1"/><text x="8.5340%" y="927.50"></text></g><g><title>__x64_sys_clone3 (1 samples, 0.03%)</title><rect x="8.2840%" y="901" width="0.0311%" height="15" fill="rgb(244,70,9)" fg:x="266" fg:w="1"/><text x="8.5340%" y="911.50"></text></g><g><title>__do_sys_clone3 (1 samples, 0.03%)</title><rect x="8.2840%" y="885" width="0.0311%" height="15" fill="rgb(217,125,39)" fg:x="266" fg:w="1"/><text x="8.5340%" y="895.50"></text></g><g><title>kernel_clone (1 samples, 0.03%)</title><rect x="8.2840%" y="869" width="0.0311%" height="15" fill="rgb(235,36,10)" fg:x="266" fg:w="1"/><text x="8.5340%" y="879.50"></text></g><g><title>wake_up_new_task (1 samples, 0.03%)</title><rect x="8.2840%" y="853" width="0.0311%" height="15" fill="rgb(251,123,47)" fg:x="266" fg:w="1"/><text x="8.5340%" y="863.50"></text></g><g><title>post_init_entity_util_avg (1 samples, 0.03%)</title><rect x="8.2840%" y="837" width="0.0311%" height="15" fill="rgb(221,13,13)" fg:x="266" fg:w="1"/><text x="8.5340%" y="847.50"></text></g><g><title>attach_entity_cfs_rq (1 samples, 0.03%)</title><rect x="8.2840%" y="821" width="0.0311%" height="15" fill="rgb(238,131,9)" fg:x="266" fg:w="1"/><text x="8.5340%" y="831.50"></text></g><g><title>propagate_entity_cfs_rq (1 samples, 0.03%)</title><rect x="8.2840%" y="805" width="0.0311%" height="15" fill="rgb(211,50,8)" fg:x="266" fg:w="1"/><text x="8.5340%" y="815.50"></text></g><g><title>_int_free (616 samples, 19.18%)</title><rect x="9.1249%" y="485" width="19.1841%" height="15" fill="rgb(245,182,24)" fg:x="293" fg:w="616"/><text x="9.3749%" y="495.50">_int_free</text></g><g><title>asm_sysvec_call_function (3 samples, 0.09%)</title><rect x="28.2155%" y="469" width="0.0934%" height="15" fill="rgb(242,14,37)" fg:x="906" fg:w="3"/><text x="28.4655%" y="479.50"></text></g><g><title>sysvec_call_function (3 samples, 0.09%)</title><rect x="28.2155%" y="453" width="0.0934%" height="15" fill="rgb(246,228,12)" fg:x="906" fg:w="3"/><text x="28.4655%" y="463.50"></text></g><g><title>__sysvec_call_function (3 samples, 0.09%)</title><rect x="28.2155%" y="437" width="0.0934%" height="15" fill="rgb(213,55,15)" fg:x="906" fg:w="3"/><text x="28.4655%" y="447.50"></text></g><g><title>generic_smp_call_function_single_interrupt (3 samples, 0.09%)</title><rect x="28.2155%" y="421" width="0.0934%" height="15" fill="rgb(209,9,3)" fg:x="906" fg:w="3"/><text x="28.4655%" y="431.50"></text></g><g><title>flush_smp_call_function_queue (3 samples, 0.09%)</title><rect x="28.2155%" y="405" width="0.0934%" height="15" fill="rgb(230,59,30)" fg:x="906" fg:w="3"/><text x="28.4655%" y="415.50"></text></g><g><title>flush_tlb_func (2 samples, 0.06%)</title><rect x="28.2467%" y="389" width="0.0623%" height="15" fill="rgb(209,121,21)" fg:x="907" fg:w="2"/><text x="28.4967%" y="399.50"></text></g><g><title>native_flush_tlb_one_user (2 samples, 0.06%)</title><rect x="28.2467%" y="373" width="0.0623%" height="15" fill="rgb(220,109,13)" fg:x="907" fg:w="2"/><text x="28.4967%" y="383.50"></text></g><g><title>__GI___libc_free (635 samples, 19.78%)</title><rect x="8.5955%" y="501" width="19.7758%" height="15" fill="rgb(232,18,1)" fg:x="276" fg:w="635"/><text x="8.8455%" y="511.50">__GI___libc_free</text></g><g><title>arena_for_chunk (2 samples, 0.06%)</title><rect x="28.3089%" y="485" width="0.0623%" height="15" fill="rgb(215,41,42)" fg:x="909" fg:w="2"/><text x="28.5589%" y="495.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.03%)</title><rect x="28.3712%" y="501" width="0.0311%" height="15" fill="rgb(224,123,36)" fg:x="911" fg:w="1"/><text x="28.6212%" y="511.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.03%)</title><rect x="28.3712%" y="485" width="0.0311%" height="15" fill="rgb(240,125,3)" fg:x="911" fg:w="1"/><text x="28.6212%" y="495.50"></text></g><g><title>__rust_dealloc (3 samples, 0.09%)</title><rect x="28.4024%" y="501" width="0.0934%" height="15" fill="rgb(205,98,50)" fg:x="912" fg:w="3"/><text x="28.6524%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (651 samples, 20.27%)</title><rect x="8.3775%" y="533" width="20.2741%" height="15" fill="rgb(205,185,37)" fg:x="269" fg:w="651"/><text x="8.6275%" y="543.50">&lt;alloc::alloc::Global as core::a..</text></g><g><title>alloc::alloc::dealloc (651 samples, 20.27%)</title><rect x="8.3775%" y="517" width="20.2741%" height="15" fill="rgb(238,207,15)" fg:x="269" fg:w="651"/><text x="8.6275%" y="527.50">alloc::alloc::dealloc</text></g><g><title>asm_sysvec_apic_timer_interrupt (5 samples, 0.16%)</title><rect x="28.4958%" y="501" width="0.1557%" height="15" fill="rgb(213,199,42)" fg:x="915" fg:w="5"/><text x="28.7458%" y="511.50"></text></g><g><title>sysvec_apic_timer_interrupt (5 samples, 0.16%)</title><rect x="28.4958%" y="485" width="0.1557%" height="15" fill="rgb(235,201,11)" fg:x="915" fg:w="5"/><text x="28.7458%" y="495.50"></text></g><g><title>irqentry_exit (5 samples, 0.16%)</title><rect x="28.4958%" y="469" width="0.1557%" height="15" fill="rgb(207,46,11)" fg:x="915" fg:w="5"/><text x="28.7458%" y="479.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.16%)</title><rect x="28.4958%" y="453" width="0.1557%" height="15" fill="rgb(241,35,35)" fg:x="915" fg:w="5"/><text x="28.7458%" y="463.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.16%)</title><rect x="28.4958%" y="437" width="0.1557%" height="15" fill="rgb(243,32,47)" fg:x="915" fg:w="5"/><text x="28.7458%" y="447.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.16%)</title><rect x="28.4958%" y="421" width="0.1557%" height="15" fill="rgb(247,202,23)" fg:x="915" fg:w="5"/><text x="28.7458%" y="431.50"></text></g><g><title>schedule (5 samples, 0.16%)</title><rect x="28.4958%" y="405" width="0.1557%" height="15" fill="rgb(219,102,11)" fg:x="915" fg:w="5"/><text x="28.7458%" y="415.50"></text></g><g><title>__schedule (5 samples, 0.16%)</title><rect x="28.4958%" y="389" width="0.1557%" height="15" fill="rgb(243,110,44)" fg:x="915" fg:w="5"/><text x="28.7458%" y="399.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.16%)</title><rect x="28.4958%" y="373" width="0.1557%" height="15" fill="rgb(222,74,54)" fg:x="915" fg:w="5"/><text x="28.7458%" y="383.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.16%)</title><rect x="28.4958%" y="357" width="0.1557%" height="15" fill="rgb(216,99,12)" fg:x="915" fg:w="5"/><text x="28.7458%" y="367.50"></text></g><g><title>x86_pmu_enable (5 samples, 0.16%)</title><rect x="28.4958%" y="341" width="0.1557%" height="15" fill="rgb(226,22,26)" fg:x="915" fg:w="5"/><text x="28.7458%" y="351.50"></text></g><g><title>intel_pmu_enable_all (5 samples, 0.16%)</title><rect x="28.4958%" y="325" width="0.1557%" height="15" fill="rgb(217,163,10)" fg:x="915" fg:w="5"/><text x="28.7458%" y="335.50"></text></g><g><title>native_write_msr (5 samples, 0.16%)</title><rect x="28.4958%" y="309" width="0.1557%" height="15" fill="rgb(213,25,53)" fg:x="915" fg:w="5"/><text x="28.7458%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (655 samples, 20.40%)</title><rect x="8.3775%" y="645" width="20.3986%" height="15" fill="rgb(252,105,26)" fg:x="269" fg:w="655"/><text x="8.6275%" y="655.50">&lt;alloc::vec::Vec&lt;T,A&gt; as core::o..</text></g><g><title>core::ptr::drop_in_place&lt;[test_mmmh::SubProduct1]&gt; (655 samples, 20.40%)</title><rect x="8.3775%" y="629" width="20.3986%" height="15" fill="rgb(220,39,43)" fg:x="269" fg:w="655"/><text x="8.6275%" y="639.50">core::ptr::drop_in_place&lt;[test_m..</text></g><g><title>core::ptr::drop_in_place&lt;test_mmmh::SubProduct1&gt; (655 samples, 20.40%)</title><rect x="8.3775%" y="613" width="20.3986%" height="15" fill="rgb(229,68,48)" fg:x="269" fg:w="655"/><text x="8.6275%" y="623.50">core::ptr::drop_in_place&lt;test_mm..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (655 samples, 20.40%)</title><rect x="8.3775%" y="597" width="20.3986%" height="15" fill="rgb(252,8,32)" fg:x="269" fg:w="655"/><text x="8.6275%" y="607.50">core::ptr::drop_in_place&lt;alloc::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (655 samples, 20.40%)</title><rect x="8.3775%" y="581" width="20.3986%" height="15" fill="rgb(223,20,43)" fg:x="269" fg:w="655"/><text x="8.6275%" y="591.50">core::ptr::drop_in_place&lt;alloc::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (655 samples, 20.40%)</title><rect x="8.3775%" y="565" width="20.3986%" height="15" fill="rgb(229,81,49)" fg:x="269" fg:w="655"/><text x="8.6275%" y="575.50">core::ptr::drop_in_place&lt;alloc::..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (655 samples, 20.40%)</title><rect x="8.3775%" y="549" width="20.3986%" height="15" fill="rgb(236,28,36)" fg:x="269" fg:w="655"/><text x="8.6275%" y="559.50">&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as ..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (4 samples, 0.12%)</title><rect x="28.6515%" y="533" width="0.1246%" height="15" fill="rgb(249,185,26)" fg:x="920" fg:w="4"/><text x="28.9015%" y="543.50"></text></g><g><title>__tlb_remove_page_size (1 samples, 0.03%)</title><rect x="28.8384%" y="373" width="0.0311%" height="15" fill="rgb(249,174,33)" fg:x="926" fg:w="1"/><text x="29.0884%" y="383.50"></text></g><g><title>page_remove_rmap (1 samples, 0.03%)</title><rect x="28.8695%" y="373" width="0.0311%" height="15" fill="rgb(233,201,37)" fg:x="927" fg:w="1"/><text x="29.1195%" y="383.50"></text></g><g><title>__mod_lruvec_page_state (1 samples, 0.03%)</title><rect x="28.8695%" y="357" width="0.0311%" height="15" fill="rgb(221,78,26)" fg:x="927" fg:w="1"/><text x="29.1195%" y="367.50"></text></g><g><title>__mod_node_page_state (1 samples, 0.03%)</title><rect x="28.8695%" y="341" width="0.0311%" height="15" fill="rgb(250,127,30)" fg:x="927" fg:w="1"/><text x="29.1195%" y="351.50"></text></g><g><title>__mem_cgroup_uncharge_list (1 samples, 0.03%)</title><rect x="28.9318%" y="325" width="0.0311%" height="15" fill="rgb(230,49,44)" fg:x="929" fg:w="1"/><text x="29.1818%" y="335.50"></text></g><g><title>uncharge_page (1 samples, 0.03%)</title><rect x="28.9318%" y="309" width="0.0311%" height="15" fill="rgb(229,67,23)" fg:x="929" fg:w="1"/><text x="29.1818%" y="319.50"></text></g><g><title>__mod_lruvec_state (2 samples, 0.06%)</title><rect x="28.9629%" y="325" width="0.0623%" height="15" fill="rgb(249,83,47)" fg:x="930" fg:w="2"/><text x="29.2129%" y="335.50"></text></g><g><title>__mod_node_page_state (2 samples, 0.06%)</title><rect x="28.9629%" y="309" width="0.0623%" height="15" fill="rgb(215,43,3)" fg:x="930" fg:w="2"/><text x="29.2129%" y="319.50"></text></g><g><title>__free_one_page (1 samples, 0.03%)</title><rect x="29.1187%" y="277" width="0.0311%" height="15" fill="rgb(238,154,13)" fg:x="935" fg:w="1"/><text x="29.3687%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;test_mmmh::SubProduct1&gt;&gt; (668 samples, 20.80%)</title><rect x="8.3775%" y="661" width="20.8035%" height="15" fill="rgb(219,56,2)" fg:x="269" fg:w="668"/><text x="8.6275%" y="671.50">core::ptr::drop_in_place&lt;alloc::v..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;test_mmmh::SubProduct1&gt;&gt; (13 samples, 0.40%)</title><rect x="28.7761%" y="645" width="0.4049%" height="15" fill="rgb(233,0,4)" fg:x="924" fg:w="13"/><text x="29.0261%" y="655.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.40%)</title><rect x="28.7761%" y="629" width="0.4049%" height="15" fill="rgb(235,30,7)" fg:x="924" fg:w="13"/><text x="29.0261%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.40%)</title><rect x="28.7761%" y="613" width="0.4049%" height="15" fill="rgb(250,79,13)" fg:x="924" fg:w="13"/><text x="29.0261%" y="623.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.40%)</title><rect x="28.7761%" y="597" width="0.4049%" height="15" fill="rgb(211,146,34)" fg:x="924" fg:w="13"/><text x="29.0261%" y="607.50"></text></g><g><title>__GI___libc_free (13 samples, 0.40%)</title><rect x="28.7761%" y="581" width="0.4049%" height="15" fill="rgb(228,22,38)" fg:x="924" fg:w="13"/><text x="29.0261%" y="591.50"></text></g><g><title>__GI___munmap (13 samples, 0.40%)</title><rect x="28.7761%" y="565" width="0.4049%" height="15" fill="rgb(235,168,5)" fg:x="924" fg:w="13"/><text x="29.0261%" y="575.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (13 samples, 0.40%)</title><rect x="28.7761%" y="549" width="0.4049%" height="15" fill="rgb(221,155,16)" fg:x="924" fg:w="13"/><text x="29.0261%" y="559.50"></text></g><g><title>do_syscall_64 (13 samples, 0.40%)</title><rect x="28.7761%" y="533" width="0.4049%" height="15" fill="rgb(215,215,53)" fg:x="924" fg:w="13"/><text x="29.0261%" y="543.50"></text></g><g><title>__x64_sys_munmap (13 samples, 0.40%)</title><rect x="28.7761%" y="517" width="0.4049%" height="15" fill="rgb(223,4,10)" fg:x="924" fg:w="13"/><text x="29.0261%" y="527.50"></text></g><g><title>__vm_munmap (13 samples, 0.40%)</title><rect x="28.7761%" y="501" width="0.4049%" height="15" fill="rgb(234,103,6)" fg:x="924" fg:w="13"/><text x="29.0261%" y="511.50"></text></g><g><title>__do_munmap (13 samples, 0.40%)</title><rect x="28.7761%" y="485" width="0.4049%" height="15" fill="rgb(227,97,0)" fg:x="924" fg:w="13"/><text x="29.0261%" y="495.50"></text></g><g><title>unmap_region (13 samples, 0.40%)</title><rect x="28.7761%" y="469" width="0.4049%" height="15" fill="rgb(234,150,53)" fg:x="924" fg:w="13"/><text x="29.0261%" y="479.50"></text></g><g><title>unmap_vmas (13 samples, 0.40%)</title><rect x="28.7761%" y="453" width="0.4049%" height="15" fill="rgb(228,201,54)" fg:x="924" fg:w="13"/><text x="29.0261%" y="463.50"></text></g><g><title>unmap_single_vma (13 samples, 0.40%)</title><rect x="28.7761%" y="437" width="0.4049%" height="15" fill="rgb(222,22,37)" fg:x="924" fg:w="13"/><text x="29.0261%" y="447.50"></text></g><g><title>unmap_page_range (13 samples, 0.40%)</title><rect x="28.7761%" y="421" width="0.4049%" height="15" fill="rgb(237,53,32)" fg:x="924" fg:w="13"/><text x="29.0261%" y="431.50"></text></g><g><title>zap_pmd_range.isra.0 (13 samples, 0.40%)</title><rect x="28.7761%" y="405" width="0.4049%" height="15" fill="rgb(233,25,53)" fg:x="924" fg:w="13"/><text x="29.0261%" y="415.50"></text></g><g><title>zap_pte_range (13 samples, 0.40%)</title><rect x="28.7761%" y="389" width="0.4049%" height="15" fill="rgb(210,40,34)" fg:x="924" fg:w="13"/><text x="29.0261%" y="399.50"></text></g><g><title>tlb_flush_mmu (9 samples, 0.28%)</title><rect x="28.9007%" y="373" width="0.2803%" height="15" fill="rgb(241,220,44)" fg:x="928" fg:w="9"/><text x="29.1507%" y="383.50"></text></g><g><title>free_pages_and_swap_cache (9 samples, 0.28%)</title><rect x="28.9007%" y="357" width="0.2803%" height="15" fill="rgb(235,28,35)" fg:x="928" fg:w="9"/><text x="29.1507%" y="367.50"></text></g><g><title>release_pages (9 samples, 0.28%)</title><rect x="28.9007%" y="341" width="0.2803%" height="15" fill="rgb(210,56,17)" fg:x="928" fg:w="9"/><text x="29.1507%" y="351.50"></text></g><g><title>free_unref_page_list (5 samples, 0.16%)</title><rect x="29.0252%" y="325" width="0.1557%" height="15" fill="rgb(224,130,29)" fg:x="932" fg:w="5"/><text x="29.2752%" y="335.50"></text></g><g><title>free_unref_page_commit.constprop.0 (5 samples, 0.16%)</title><rect x="29.0252%" y="309" width="0.1557%" height="15" fill="rgb(235,212,8)" fg:x="932" fg:w="5"/><text x="29.2752%" y="319.50"></text></g><g><title>free_pcppages_bulk (4 samples, 0.12%)</title><rect x="29.0564%" y="293" width="0.1246%" height="15" fill="rgb(223,33,50)" fg:x="933" fg:w="4"/><text x="29.3064%" y="303.50"></text></g><g><title>__mod_zone_page_state (1 samples, 0.03%)</title><rect x="29.1498%" y="277" width="0.0311%" height="15" fill="rgb(219,149,13)" fg:x="936" fg:w="1"/><text x="29.3998%" y="287.50"></text></g><g><title>_int_free (285 samples, 8.88%)</title><rect x="30.2087%" y="485" width="8.8757%" height="15" fill="rgb(250,156,29)" fg:x="970" fg:w="285"/><text x="30.4587%" y="495.50">_int_free</text></g><g><title>__GI___libc_free (315 samples, 9.81%)</title><rect x="29.4301%" y="501" width="9.8100%" height="15" fill="rgb(216,193,19)" fg:x="945" fg:w="315"/><text x="29.6801%" y="511.50">__GI___libc_fr..</text></g><g><title>arena_for_chunk (5 samples, 0.16%)</title><rect x="39.0844%" y="485" width="0.1557%" height="15" fill="rgb(216,135,14)" fg:x="1255" fg:w="5"/><text x="39.3344%" y="495.50"></text></g><g><title>__rdl_dealloc (8 samples, 0.25%)</title><rect x="39.2401%" y="501" width="0.2491%" height="15" fill="rgb(241,47,5)" fg:x="1260" fg:w="8"/><text x="39.4901%" y="511.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (8 samples, 0.25%)</title><rect x="39.2401%" y="485" width="0.2491%" height="15" fill="rgb(233,42,35)" fg:x="1260" fg:w="8"/><text x="39.4901%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (336 samples, 10.46%)</title><rect x="29.2121%" y="533" width="10.4640%" height="15" fill="rgb(231,13,6)" fg:x="938" fg:w="336"/><text x="29.4621%" y="543.50">&lt;alloc::alloc::..</text></g><g><title>alloc::alloc::dealloc (336 samples, 10.46%)</title><rect x="29.2121%" y="517" width="10.4640%" height="15" fill="rgb(207,181,40)" fg:x="938" fg:w="336"/><text x="29.4621%" y="527.50">alloc::alloc::d..</text></g><g><title>__rust_dealloc (6 samples, 0.19%)</title><rect x="39.4893%" y="501" width="0.1869%" height="15" fill="rgb(254,173,49)" fg:x="1268" fg:w="6"/><text x="39.7393%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (340 samples, 10.59%)</title><rect x="29.1809%" y="645" width="10.5886%" height="15" fill="rgb(221,1,38)" fg:x="937" fg:w="340"/><text x="29.4309%" y="655.50">&lt;alloc::vec::Ve..</text></g><g><title>core::ptr::drop_in_place&lt;[test_mmmh::SubProduct2]&gt; (340 samples, 10.59%)</title><rect x="29.1809%" y="629" width="10.5886%" height="15" fill="rgb(206,124,46)" fg:x="937" fg:w="340"/><text x="29.4309%" y="639.50">core::ptr::drop..</text></g><g><title>core::ptr::drop_in_place&lt;test_mmmh::SubProduct2&gt; (340 samples, 10.59%)</title><rect x="29.1809%" y="613" width="10.5886%" height="15" fill="rgb(249,21,11)" fg:x="937" fg:w="340"/><text x="29.4309%" y="623.50">core::ptr::drop..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (340 samples, 10.59%)</title><rect x="29.1809%" y="597" width="10.5886%" height="15" fill="rgb(222,201,40)" fg:x="937" fg:w="340"/><text x="29.4309%" y="607.50">core::ptr::drop..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (340 samples, 10.59%)</title><rect x="29.1809%" y="581" width="10.5886%" height="15" fill="rgb(235,61,29)" fg:x="937" fg:w="340"/><text x="29.4309%" y="591.50">core::ptr::drop..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (340 samples, 10.59%)</title><rect x="29.1809%" y="565" width="10.5886%" height="15" fill="rgb(219,207,3)" fg:x="937" fg:w="340"/><text x="29.4309%" y="575.50">core::ptr::drop..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (340 samples, 10.59%)</title><rect x="29.1809%" y="549" width="10.5886%" height="15" fill="rgb(222,56,46)" fg:x="937" fg:w="340"/><text x="29.4309%" y="559.50">&lt;alloc::raw_vec..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (3 samples, 0.09%)</title><rect x="39.6761%" y="533" width="0.0934%" height="15" fill="rgb(239,76,54)" fg:x="1274" fg:w="3"/><text x="39.9261%" y="543.50"></text></g><g><title>page_remove_rmap (1 samples, 0.03%)</title><rect x="39.7695%" y="389" width="0.0311%" height="15" fill="rgb(231,124,27)" fg:x="1277" fg:w="1"/><text x="40.0195%" y="399.50"></text></g><g><title>__mod_memcg_lruvec_state (1 samples, 0.03%)</title><rect x="40.0187%" y="309" width="0.0311%" height="15" fill="rgb(249,195,6)" fg:x="1285" fg:w="1"/><text x="40.2687%" y="319.50"></text></g><g><title>__mod_lruvec_state (2 samples, 0.06%)</title><rect x="40.0187%" y="325" width="0.0623%" height="15" fill="rgb(237,174,47)" fg:x="1285" fg:w="2"/><text x="40.2687%" y="335.50"></text></g><g><title>cgroup_rstat_updated (1 samples, 0.03%)</title><rect x="40.0498%" y="309" width="0.0311%" height="15" fill="rgb(206,201,31)" fg:x="1286" fg:w="1"/><text x="40.2998%" y="319.50"></text></g><g><title>free_unref_page_list (3 samples, 0.09%)</title><rect x="40.0810%" y="325" width="0.0934%" height="15" fill="rgb(231,57,52)" fg:x="1287" fg:w="3"/><text x="40.3310%" y="335.50"></text></g><g><title>free_unref_page_commit.constprop.0 (3 samples, 0.09%)</title><rect x="40.0810%" y="309" width="0.0934%" height="15" fill="rgb(248,177,22)" fg:x="1287" fg:w="3"/><text x="40.3310%" y="319.50"></text></g><g><title>free_pcppages_bulk (2 samples, 0.06%)</title><rect x="40.1121%" y="293" width="0.0623%" height="15" fill="rgb(215,211,37)" fg:x="1288" fg:w="2"/><text x="40.3621%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;test_mmmh::update_3::{{closure}}::{{closure}}&gt; (1,022 samples, 31.83%)</title><rect x="8.3775%" y="677" width="31.8281%" height="15" fill="rgb(241,128,51)" fg:x="269" fg:w="1022"/><text x="8.6275%" y="687.50">core::ptr::drop_in_place&lt;test_mmmh::update_3::{{clo..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;test_mmmh::SubProduct2&gt;&gt; (354 samples, 11.02%)</title><rect x="29.1809%" y="661" width="11.0246%" height="15" fill="rgb(227,165,31)" fg:x="937" fg:w="354"/><text x="29.4309%" y="671.50">core::ptr::drop_..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;test_mmmh::SubProduct2&gt;&gt; (14 samples, 0.44%)</title><rect x="39.7695%" y="645" width="0.4360%" height="15" fill="rgb(228,167,24)" fg:x="1277" fg:w="14"/><text x="40.0195%" y="655.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.44%)</title><rect x="39.7695%" y="629" width="0.4360%" height="15" fill="rgb(228,143,12)" fg:x="1277" fg:w="14"/><text x="40.0195%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.44%)</title><rect x="39.7695%" y="613" width="0.4360%" height="15" fill="rgb(249,149,8)" fg:x="1277" fg:w="14"/><text x="40.0195%" y="623.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.44%)</title><rect x="39.7695%" y="597" width="0.4360%" height="15" fill="rgb(243,35,44)" fg:x="1277" fg:w="14"/><text x="40.0195%" y="607.50"></text></g><g><title>__GI___libc_free (14 samples, 0.44%)</title><rect x="39.7695%" y="581" width="0.4360%" height="15" fill="rgb(246,89,9)" fg:x="1277" fg:w="14"/><text x="40.0195%" y="591.50"></text></g><g><title>__GI___munmap (14 samples, 0.44%)</title><rect x="39.7695%" y="565" width="0.4360%" height="15" fill="rgb(233,213,13)" fg:x="1277" fg:w="14"/><text x="40.0195%" y="575.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (14 samples, 0.44%)</title><rect x="39.7695%" y="549" width="0.4360%" height="15" fill="rgb(233,141,41)" fg:x="1277" fg:w="14"/><text x="40.0195%" y="559.50"></text></g><g><title>do_syscall_64 (14 samples, 0.44%)</title><rect x="39.7695%" y="533" width="0.4360%" height="15" fill="rgb(239,167,4)" fg:x="1277" fg:w="14"/><text x="40.0195%" y="543.50"></text></g><g><title>__x64_sys_munmap (14 samples, 0.44%)</title><rect x="39.7695%" y="517" width="0.4360%" height="15" fill="rgb(209,217,16)" fg:x="1277" fg:w="14"/><text x="40.0195%" y="527.50"></text></g><g><title>__vm_munmap (14 samples, 0.44%)</title><rect x="39.7695%" y="501" width="0.4360%" height="15" fill="rgb(219,88,35)" fg:x="1277" fg:w="14"/><text x="40.0195%" y="511.50"></text></g><g><title>__do_munmap (14 samples, 0.44%)</title><rect x="39.7695%" y="485" width="0.4360%" height="15" fill="rgb(220,193,23)" fg:x="1277" fg:w="14"/><text x="40.0195%" y="495.50"></text></g><g><title>unmap_region (14 samples, 0.44%)</title><rect x="39.7695%" y="469" width="0.4360%" height="15" fill="rgb(230,90,52)" fg:x="1277" fg:w="14"/><text x="40.0195%" y="479.50"></text></g><g><title>unmap_vmas (14 samples, 0.44%)</title><rect x="39.7695%" y="453" width="0.4360%" height="15" fill="rgb(252,106,19)" fg:x="1277" fg:w="14"/><text x="40.0195%" y="463.50"></text></g><g><title>unmap_single_vma (14 samples, 0.44%)</title><rect x="39.7695%" y="437" width="0.4360%" height="15" fill="rgb(206,74,20)" fg:x="1277" fg:w="14"/><text x="40.0195%" y="447.50"></text></g><g><title>unmap_page_range (14 samples, 0.44%)</title><rect x="39.7695%" y="421" width="0.4360%" height="15" fill="rgb(230,138,44)" fg:x="1277" fg:w="14"/><text x="40.0195%" y="431.50"></text></g><g><title>zap_pmd_range.isra.0 (14 samples, 0.44%)</title><rect x="39.7695%" y="405" width="0.4360%" height="15" fill="rgb(235,182,43)" fg:x="1277" fg:w="14"/><text x="40.0195%" y="415.50"></text></g><g><title>zap_pte_range (13 samples, 0.40%)</title><rect x="39.8007%" y="389" width="0.4049%" height="15" fill="rgb(242,16,51)" fg:x="1278" fg:w="13"/><text x="40.0507%" y="399.50"></text></g><g><title>tlb_flush_mmu (10 samples, 0.31%)</title><rect x="39.8941%" y="373" width="0.3114%" height="15" fill="rgb(248,9,4)" fg:x="1281" fg:w="10"/><text x="40.1441%" y="383.50"></text></g><g><title>free_pages_and_swap_cache (10 samples, 0.31%)</title><rect x="39.8941%" y="357" width="0.3114%" height="15" fill="rgb(210,31,22)" fg:x="1281" fg:w="10"/><text x="40.1441%" y="367.50"></text></g><g><title>release_pages (10 samples, 0.31%)</title><rect x="39.8941%" y="341" width="0.3114%" height="15" fill="rgb(239,54,39)" fg:x="1281" fg:w="10"/><text x="40.1441%" y="351.50"></text></g><g><title>lock_page_lruvec_irqsave (1 samples, 0.03%)</title><rect x="40.1744%" y="325" width="0.0311%" height="15" fill="rgb(230,99,41)" fg:x="1290" fg:w="1"/><text x="40.4244%" y="335.50"></text></g><g><title>_raw_spin_lock_irqsave (1 samples, 0.03%)</title><rect x="40.1744%" y="309" width="0.0311%" height="15" fill="rgb(253,106,12)" fg:x="1290" fg:w="1"/><text x="40.4244%" y="319.50"></text></g><g><title>test_mmmh::process_name (83 samples, 2.58%)</title><rect x="40.2055%" y="661" width="2.5849%" height="15" fill="rgb(213,46,41)" fg:x="1291" fg:w="83"/><text x="40.4555%" y="671.50">te..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;mut A&gt;::eq (83 samples, 2.58%)</title><rect x="40.2055%" y="645" width="2.5849%" height="15" fill="rgb(215,133,35)" fg:x="1291" fg:w="83"/><text x="40.4555%" y="655.50">co..</text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&lt;str&gt;&gt;::eq (83 samples, 2.58%)</title><rect x="40.2055%" y="629" width="2.5849%" height="15" fill="rgb(213,28,5)" fg:x="1291" fg:w="83"/><text x="40.4555%" y="639.50">&lt;a..</text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (83 samples, 2.58%)</title><rect x="40.2055%" y="613" width="2.5849%" height="15" fill="rgb(215,77,49)" fg:x="1291" fg:w="83"/><text x="40.4555%" y="623.50">co..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (83 samples, 2.58%)</title><rect x="40.2055%" y="597" width="2.5849%" height="15" fill="rgb(248,100,22)" fg:x="1291" fg:w="83"/><text x="40.4555%" y="607.50">co..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (83 samples, 2.58%)</title><rect x="40.2055%" y="581" width="2.5849%" height="15" fill="rgb(208,67,9)" fg:x="1291" fg:w="83"/><text x="40.4555%" y="591.50">co..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (83 samples, 2.58%)</title><rect x="40.2055%" y="565" width="2.5849%" height="15" fill="rgb(219,133,21)" fg:x="1291" fg:w="83"/><text x="40.4555%" y="575.50">&lt;[..</text></g><g><title>test_mmmh::SubProduct1::update_subproduct (86 samples, 2.68%)</title><rect x="40.2055%" y="677" width="2.6783%" height="15" fill="rgb(246,46,29)" fg:x="1291" fg:w="86"/><text x="40.4555%" y="687.50">te..</text></g><g><title>test_mmmh::process_price (3 samples, 0.09%)</title><rect x="42.7904%" y="661" width="0.0934%" height="15" fill="rgb(246,185,52)" fg:x="1374" fg:w="3"/><text x="43.0404%" y="671.50"></text></g><g><title>checked_request2size (9 samples, 0.28%)</title><rect x="43.4133%" y="421" width="0.2803%" height="15" fill="rgb(252,136,11)" fg:x="1394" fg:w="9"/><text x="43.6633%" y="431.50"></text></g><g><title>__GI___libc_malloc (26 samples, 0.81%)</title><rect x="43.1641%" y="437" width="0.8097%" height="15" fill="rgb(219,138,53)" fg:x="1386" fg:w="26"/><text x="43.4141%" y="447.50"></text></g><g><title>tcache_get (9 samples, 0.28%)</title><rect x="43.6936%" y="421" width="0.2803%" height="15" fill="rgb(211,51,23)" fg:x="1403" fg:w="9"/><text x="43.9436%" y="431.50"></text></g><g><title>__rdl_alloc (3 samples, 0.09%)</title><rect x="43.9738%" y="437" width="0.0934%" height="15" fill="rgb(247,221,28)" fg:x="1412" fg:w="3"/><text x="44.2238%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.09%)</title><rect x="43.9738%" y="421" width="0.0934%" height="15" fill="rgb(251,222,45)" fg:x="1412" fg:w="3"/><text x="44.2238%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (33 samples, 1.03%)</title><rect x="43.1641%" y="533" width="1.0277%" height="15" fill="rgb(217,162,53)" fg:x="1386" fg:w="33"/><text x="43.4141%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (33 samples, 1.03%)</title><rect x="43.1641%" y="517" width="1.0277%" height="15" fill="rgb(229,93,14)" fg:x="1386" fg:w="33"/><text x="43.4141%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (33 samples, 1.03%)</title><rect x="43.1641%" y="501" width="1.0277%" height="15" fill="rgb(209,67,49)" fg:x="1386" fg:w="33"/><text x="43.4141%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (33 samples, 1.03%)</title><rect x="43.1641%" y="485" width="1.0277%" height="15" fill="rgb(213,87,29)" fg:x="1386" fg:w="33"/><text x="43.4141%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (33 samples, 1.03%)</title><rect x="43.1641%" y="469" width="1.0277%" height="15" fill="rgb(205,151,52)" fg:x="1386" fg:w="33"/><text x="43.4141%" y="479.50"></text></g><g><title>alloc::alloc::alloc (33 samples, 1.03%)</title><rect x="43.1641%" y="453" width="1.0277%" height="15" fill="rgb(253,215,39)" fg:x="1386" fg:w="33"/><text x="43.4141%" y="463.50"></text></g><g><title>__rust_alloc (4 samples, 0.12%)</title><rect x="44.0673%" y="437" width="0.1246%" height="15" fill="rgb(221,220,41)" fg:x="1415" fg:w="4"/><text x="44.3173%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (34 samples, 1.06%)</title><rect x="43.1641%" y="645" width="1.0589%" height="15" fill="rgb(218,133,21)" fg:x="1386" fg:w="34"/><text x="43.4141%" y="655.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (34 samples, 1.06%)</title><rect x="43.1641%" y="629" width="1.0589%" height="15" fill="rgb(221,193,43)" fg:x="1386" fg:w="34"/><text x="43.4141%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (34 samples, 1.06%)</title><rect x="43.1641%" y="613" width="1.0589%" height="15" fill="rgb(240,128,52)" fg:x="1386" fg:w="34"/><text x="43.4141%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (34 samples, 1.06%)</title><rect x="43.1641%" y="597" width="1.0589%" height="15" fill="rgb(253,114,12)" fg:x="1386" fg:w="34"/><text x="43.4141%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (34 samples, 1.06%)</title><rect x="43.1641%" y="581" width="1.0589%" height="15" fill="rgb(215,223,47)" fg:x="1386" fg:w="34"/><text x="43.4141%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (34 samples, 1.06%)</title><rect x="43.1641%" y="565" width="1.0589%" height="15" fill="rgb(248,225,23)" fg:x="1386" fg:w="34"/><text x="43.4141%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (34 samples, 1.06%)</title><rect x="43.1641%" y="549" width="1.0589%" height="15" fill="rgb(250,108,0)" fg:x="1386" fg:w="34"/><text x="43.4141%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.03%)</title><rect x="44.1918%" y="533" width="0.0311%" height="15" fill="rgb(228,208,7)" fg:x="1419" fg:w="1"/><text x="44.4418%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="44.1918%" y="517" width="0.0311%" height="15" fill="rgb(244,45,10)" fg:x="1419" fg:w="1"/><text x="44.4418%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::ops::index::Index&lt;core::ops::range::RangeFull&gt;&gt;::index (2 samples, 0.06%)</title><rect x="44.2230%" y="613" width="0.0623%" height="15" fill="rgb(207,125,25)" fg:x="1420" fg:w="2"/><text x="44.4730%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.06%)</title><rect x="44.2230%" y="597" width="0.0623%" height="15" fill="rgb(210,195,18)" fg:x="1420" fg:w="2"/><text x="44.4730%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.03%)</title><rect x="44.2541%" y="581" width="0.0311%" height="15" fill="rgb(249,80,12)" fg:x="1421" fg:w="1"/><text x="44.5041%" y="591.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;mut A&gt;::eq (9 samples, 0.28%)</title><rect x="44.2230%" y="645" width="0.2803%" height="15" fill="rgb(221,65,9)" fg:x="1420" fg:w="9"/><text x="44.4730%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&lt;str&gt;&gt;::eq (9 samples, 0.28%)</title><rect x="44.2230%" y="629" width="0.2803%" height="15" fill="rgb(235,49,36)" fg:x="1420" fg:w="9"/><text x="44.4730%" y="639.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (7 samples, 0.22%)</title><rect x="44.2853%" y="613" width="0.2180%" height="15" fill="rgb(225,32,20)" fg:x="1422" fg:w="7"/><text x="44.5353%" y="623.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (7 samples, 0.22%)</title><rect x="44.2853%" y="597" width="0.2180%" height="15" fill="rgb(215,141,46)" fg:x="1422" fg:w="7"/><text x="44.5353%" y="607.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (7 samples, 0.22%)</title><rect x="44.2853%" y="581" width="0.2180%" height="15" fill="rgb(250,160,47)" fg:x="1422" fg:w="7"/><text x="44.5353%" y="591.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (7 samples, 0.22%)</title><rect x="44.2853%" y="565" width="0.2180%" height="15" fill="rgb(216,222,40)" fg:x="1422" fg:w="7"/><text x="44.5353%" y="575.50"></text></g><g><title>_int_free (22 samples, 0.69%)</title><rect x="44.7524%" y="533" width="0.6851%" height="15" fill="rgb(234,217,39)" fg:x="1437" fg:w="22"/><text x="45.0024%" y="543.50"></text></g><g><title>tcache_put (2 samples, 0.06%)</title><rect x="45.3753%" y="517" width="0.0623%" height="15" fill="rgb(207,178,40)" fg:x="1457" fg:w="2"/><text x="45.6253%" y="527.50"></text></g><g><title>__GI___libc_free (32 samples, 1.00%)</title><rect x="44.5033%" y="549" width="0.9966%" height="15" fill="rgb(221,136,13)" fg:x="1429" fg:w="32"/><text x="44.7533%" y="559.50"></text></g><g><title>arena_for_chunk (2 samples, 0.06%)</title><rect x="45.4376%" y="533" width="0.0623%" height="15" fill="rgb(249,199,10)" fg:x="1459" fg:w="2"/><text x="45.6876%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (37 samples, 1.15%)</title><rect x="44.5033%" y="581" width="1.1523%" height="15" fill="rgb(249,222,13)" fg:x="1429" fg:w="37"/><text x="44.7533%" y="591.50"></text></g><g><title>alloc::alloc::dealloc (37 samples, 1.15%)</title><rect x="44.5033%" y="565" width="1.1523%" height="15" fill="rgb(244,185,38)" fg:x="1429" fg:w="37"/><text x="44.7533%" y="575.50"></text></g><g><title>__rdl_dealloc (5 samples, 0.16%)</title><rect x="45.4998%" y="549" width="0.1557%" height="15" fill="rgb(236,202,9)" fg:x="1461" fg:w="5"/><text x="45.7498%" y="559.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (5 samples, 0.16%)</title><rect x="45.4998%" y="533" width="0.1557%" height="15" fill="rgb(250,229,37)" fg:x="1461" fg:w="5"/><text x="45.7498%" y="543.50"></text></g><g><title>test_mmmh::process_production_site (87 samples, 2.71%)</title><rect x="42.9773%" y="661" width="2.7094%" height="15" fill="rgb(206,174,23)" fg:x="1380" fg:w="87"/><text x="43.2273%" y="671.50">te..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (38 samples, 1.18%)</title><rect x="44.5033%" y="645" width="1.1834%" height="15" fill="rgb(211,33,43)" fg:x="1429" fg:w="38"/><text x="44.7533%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (38 samples, 1.18%)</title><rect x="44.5033%" y="629" width="1.1834%" height="15" fill="rgb(245,58,50)" fg:x="1429" fg:w="38"/><text x="44.7533%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (38 samples, 1.18%)</title><rect x="44.5033%" y="613" width="1.1834%" height="15" fill="rgb(244,68,36)" fg:x="1429" fg:w="38"/><text x="44.7533%" y="623.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (38 samples, 1.18%)</title><rect x="44.5033%" y="597" width="1.1834%" height="15" fill="rgb(232,229,15)" fg:x="1429" fg:w="38"/><text x="44.7533%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.03%)</title><rect x="45.6556%" y="581" width="0.0311%" height="15" fill="rgb(254,30,23)" fg:x="1466" fg:w="1"/><text x="45.9056%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.06%)</title><rect x="46.0604%" y="517" width="0.0623%" height="15" fill="rgb(235,160,14)" fg:x="1479" fg:w="2"/><text x="46.3104%" y="527.50"></text></g><g><title>_int_realloc (18 samples, 0.56%)</title><rect x="58.4553%" y="437" width="0.5606%" height="15" fill="rgb(212,155,44)" fg:x="1877" fg:w="18"/><text x="58.7053%" y="447.50"></text></g><g><title>arena_for_chunk (4 samples, 0.12%)</title><rect x="59.0159%" y="437" width="0.1246%" height="15" fill="rgb(226,2,50)" fg:x="1895" fg:w="4"/><text x="59.2659%" y="447.50"></text></g><g><title>acpi_ec_gpe_handler (1 samples, 0.03%)</title><rect x="59.1405%" y="277" width="0.0311%" height="15" fill="rgb(234,177,6)" fg:x="1899" fg:w="1"/><text x="59.3905%" y="287.50"></text></g><g><title>advance_transaction (1 samples, 0.03%)</title><rect x="59.1405%" y="261" width="0.0311%" height="15" fill="rgb(217,24,9)" fg:x="1899" fg:w="1"/><text x="59.3905%" y="271.50"></text></g><g><title>asm_common_interrupt (2 samples, 0.06%)</title><rect x="59.1405%" y="437" width="0.0623%" height="15" fill="rgb(220,13,46)" fg:x="1899" fg:w="2"/><text x="59.3905%" y="447.50"></text></g><g><title>common_interrupt (2 samples, 0.06%)</title><rect x="59.1405%" y="421" width="0.0623%" height="15" fill="rgb(239,221,27)" fg:x="1899" fg:w="2"/><text x="59.3905%" y="431.50"></text></g><g><title>__common_interrupt (2 samples, 0.06%)</title><rect x="59.1405%" y="405" width="0.0623%" height="15" fill="rgb(222,198,25)" fg:x="1899" fg:w="2"/><text x="59.3905%" y="415.50"></text></g><g><title>handle_fasteoi_irq (2 samples, 0.06%)</title><rect x="59.1405%" y="389" width="0.0623%" height="15" fill="rgb(211,99,13)" fg:x="1899" fg:w="2"/><text x="59.3905%" y="399.50"></text></g><g><title>handle_irq_event (2 samples, 0.06%)</title><rect x="59.1405%" y="373" width="0.0623%" height="15" fill="rgb(232,111,31)" fg:x="1899" fg:w="2"/><text x="59.3905%" y="383.50"></text></g><g><title>__handle_irq_event_percpu (2 samples, 0.06%)</title><rect x="59.1405%" y="357" width="0.0623%" height="15" fill="rgb(245,82,37)" fg:x="1899" fg:w="2"/><text x="59.3905%" y="367.50"></text></g><g><title>acpi_irq (2 samples, 0.06%)</title><rect x="59.1405%" y="341" width="0.0623%" height="15" fill="rgb(227,149,46)" fg:x="1899" fg:w="2"/><text x="59.3905%" y="351.50"></text></g><g><title>acpi_ev_sci_xrupt_handler (2 samples, 0.06%)</title><rect x="59.1405%" y="325" width="0.0623%" height="15" fill="rgb(218,36,50)" fg:x="1899" fg:w="2"/><text x="59.3905%" y="335.50"></text></g><g><title>acpi_ev_gpe_detect (2 samples, 0.06%)</title><rect x="59.1405%" y="309" width="0.0623%" height="15" fill="rgb(226,80,48)" fg:x="1899" fg:w="2"/><text x="59.3905%" y="319.50"></text></g><g><title>acpi_ev_detect_gpe (2 samples, 0.06%)</title><rect x="59.1405%" y="293" width="0.0623%" height="15" fill="rgb(238,224,15)" fg:x="1899" fg:w="2"/><text x="59.3905%" y="303.50"></text></g><g><title>acpi_hw_gpe_read (1 samples, 0.03%)</title><rect x="59.1716%" y="277" width="0.0311%" height="15" fill="rgb(241,136,10)" fg:x="1900" fg:w="1"/><text x="59.4216%" y="287.50"></text></g><g><title>acpi_os_read_port (1 samples, 0.03%)</title><rect x="59.1716%" y="261" width="0.0311%" height="15" fill="rgb(208,32,45)" fg:x="1900" fg:w="1"/><text x="59.4216%" y="271.50"></text></g><g><title>asm_sysvec_call_function (2 samples, 0.06%)</title><rect x="59.2027%" y="437" width="0.0623%" height="15" fill="rgb(207,135,9)" fg:x="1901" fg:w="2"/><text x="59.4527%" y="447.50"></text></g><g><title>sysvec_call_function (2 samples, 0.06%)</title><rect x="59.2027%" y="421" width="0.0623%" height="15" fill="rgb(206,86,44)" fg:x="1901" fg:w="2"/><text x="59.4527%" y="431.50"></text></g><g><title>__sysvec_call_function (2 samples, 0.06%)</title><rect x="59.2027%" y="405" width="0.0623%" height="15" fill="rgb(245,177,15)" fg:x="1901" fg:w="2"/><text x="59.4527%" y="415.50"></text></g><g><title>generic_smp_call_function_single_interrupt (2 samples, 0.06%)</title><rect x="59.2027%" y="389" width="0.0623%" height="15" fill="rgb(206,64,50)" fg:x="1901" fg:w="2"/><text x="59.4527%" y="399.50"></text></g><g><title>flush_smp_call_function_queue (2 samples, 0.06%)</title><rect x="59.2027%" y="373" width="0.0623%" height="15" fill="rgb(234,36,40)" fg:x="1901" fg:w="2"/><text x="59.4527%" y="383.50"></text></g><g><title>flush_tlb_func (2 samples, 0.06%)</title><rect x="59.2027%" y="357" width="0.0623%" height="15" fill="rgb(213,64,8)" fg:x="1901" fg:w="2"/><text x="59.4527%" y="367.50"></text></g><g><title>native_flush_tlb_one_user (2 samples, 0.06%)</title><rect x="59.2027%" y="341" width="0.0623%" height="15" fill="rgb(210,75,36)" fg:x="1901" fg:w="2"/><text x="59.4527%" y="351.50"></text></g><g><title>checked_request2size (2 samples, 0.06%)</title><rect x="59.2650%" y="437" width="0.0623%" height="15" fill="rgb(229,88,21)" fg:x="1903" fg:w="2"/><text x="59.5150%" y="447.50"></text></g><g><title>__GI___libc_realloc (416 samples, 12.96%)</title><rect x="46.4030%" y="453" width="12.9555%" height="15" fill="rgb(252,204,47)" fg:x="1490" fg:w="416"/><text x="46.6530%" y="463.50">__GI___libc_realloc</text></g><g><title>sync_regs (1 samples, 0.03%)</title><rect x="59.3273%" y="437" width="0.0311%" height="15" fill="rgb(208,77,27)" fg:x="1905" fg:w="1"/><text x="59.5773%" y="447.50"></text></g><g><title>__rdl_realloc (3 samples, 0.09%)</title><rect x="59.3585%" y="453" width="0.0934%" height="15" fill="rgb(221,76,26)" fg:x="1906" fg:w="3"/><text x="59.6085%" y="463.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.03%)</title><rect x="59.4207%" y="437" width="0.0311%" height="15" fill="rgb(225,139,18)" fg:x="1908" fg:w="1"/><text x="59.6707%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (429 samples, 13.36%)</title><rect x="46.1227%" y="517" width="13.3603%" height="15" fill="rgb(230,137,11)" fg:x="1481" fg:w="429"/><text x="46.3727%" y="527.50">alloc::raw_vec::fini..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (423 samples, 13.17%)</title><rect x="46.3096%" y="501" width="13.1735%" height="15" fill="rgb(212,28,1)" fg:x="1487" fg:w="423"/><text x="46.5596%" y="511.50">&lt;alloc::alloc::Globa..</text></g><g><title>alloc::alloc::Global::grow_impl (423 samples, 13.17%)</title><rect x="46.3096%" y="485" width="13.1735%" height="15" fill="rgb(248,164,17)" fg:x="1487" fg:w="423"/><text x="46.5596%" y="495.50">alloc::alloc::Global..</text></g><g><title>alloc::alloc::realloc (423 samples, 13.17%)</title><rect x="46.3096%" y="469" width="13.1735%" height="15" fill="rgb(222,171,42)" fg:x="1487" fg:w="423"/><text x="46.5596%" y="479.50">alloc::alloc::realloc</text></g><g><title>__rust_realloc (1 samples, 0.03%)</title><rect x="59.4519%" y="453" width="0.0311%" height="15" fill="rgb(243,84,45)" fg:x="1909" fg:w="1"/><text x="59.7019%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (443 samples, 13.80%)</title><rect x="45.7490%" y="581" width="13.7963%" height="15" fill="rgb(252,49,23)" fg:x="1469" fg:w="443"/><text x="45.9990%" y="591.50">alloc::vec::Vec&lt;T,A&gt;:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (443 samples, 13.80%)</title><rect x="45.7490%" y="565" width="13.7963%" height="15" fill="rgb(215,19,7)" fg:x="1469" fg:w="443"/><text x="45.9990%" y="575.50">alloc::raw_vec::RawVe..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (438 samples, 13.64%)</title><rect x="45.9047%" y="549" width="13.6406%" height="15" fill="rgb(238,81,41)" fg:x="1474" fg:w="438"/><text x="46.1547%" y="559.50">alloc::raw_vec::RawVe..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (438 samples, 13.64%)</title><rect x="45.9047%" y="533" width="13.6406%" height="15" fill="rgb(210,199,37)" fg:x="1474" fg:w="438"/><text x="46.1547%" y="543.50">alloc::raw_vec::RawVe..</text></g><g><title>core::cmp::max (2 samples, 0.06%)</title><rect x="59.4830%" y="517" width="0.0623%" height="15" fill="rgb(244,192,49)" fg:x="1910" fg:w="2"/><text x="59.7330%" y="527.50"></text></g><g><title>core::cmp::Ord::max (2 samples, 0.06%)</title><rect x="59.4830%" y="501" width="0.0623%" height="15" fill="rgb(226,211,11)" fg:x="1910" fg:w="2"/><text x="59.7330%" y="511.50"></text></g><g><title>core::cmp::max_by (2 samples, 0.06%)</title><rect x="59.4830%" y="485" width="0.0623%" height="15" fill="rgb(236,162,54)" fg:x="1910" fg:w="2"/><text x="59.7330%" y="495.50"></text></g><g><title>alloc::string::String::push_str (446 samples, 13.89%)</title><rect x="45.6867%" y="645" width="13.8898%" height="15" fill="rgb(220,229,9)" fg:x="1467" fg:w="446"/><text x="45.9367%" y="655.50">alloc::string::String..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (446 samples, 13.89%)</title><rect x="45.6867%" y="629" width="13.8898%" height="15" fill="rgb(250,87,22)" fg:x="1467" fg:w="446"/><text x="45.9367%" y="639.50">alloc::vec::Vec&lt;T,A&gt;:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (446 samples, 13.89%)</title><rect x="45.6867%" y="613" width="13.8898%" height="15" fill="rgb(239,43,17)" fg:x="1467" fg:w="446"/><text x="45.9367%" y="623.50">&lt;alloc::vec::Vec&lt;T,A&gt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (446 samples, 13.89%)</title><rect x="45.6867%" y="597" width="13.8898%" height="15" fill="rgb(231,177,25)" fg:x="1467" fg:w="446"/><text x="45.9367%" y="607.50">alloc::vec::Vec&lt;T,A&gt;:..</text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="59.5453%" y="581" width="0.0311%" height="15" fill="rgb(219,179,1)" fg:x="1912" fg:w="1"/><text x="59.7953%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::ops::index::Index&lt;core::ops::range::RangeFull&gt;&gt;::index (6 samples, 0.19%)</title><rect x="59.5765%" y="613" width="0.1869%" height="15" fill="rgb(238,219,53)" fg:x="1913" fg:w="6"/><text x="59.8265%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (6 samples, 0.19%)</title><rect x="59.5765%" y="597" width="0.1869%" height="15" fill="rgb(232,167,36)" fg:x="1913" fg:w="6"/><text x="59.8265%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (2 samples, 0.06%)</title><rect x="59.7010%" y="581" width="0.0623%" height="15" fill="rgb(244,19,51)" fg:x="1917" fg:w="2"/><text x="59.9510%" y="591.50"></text></g><g><title>__clone3 (1,660 samples, 51.70%)</title><rect x="8.2840%" y="949" width="51.6973%" height="15" fill="rgb(224,6,22)" fg:x="266" fg:w="1660"/><text x="8.5340%" y="959.50">__clone3</text></g><g><title>start_thread (1,659 samples, 51.67%)</title><rect x="8.3152%" y="933" width="51.6661%" height="15" fill="rgb(224,145,5)" fg:x="267" fg:w="1659"/><text x="8.5652%" y="943.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (1,659 samples, 51.67%)</title><rect x="8.3152%" y="917" width="51.6661%" height="15" fill="rgb(234,130,49)" fg:x="267" fg:w="1659"/><text x="8.5652%" y="927.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1,659 samples, 51.67%)</title><rect x="8.3152%" y="901" width="51.6661%" height="15" fill="rgb(254,6,2)" fg:x="267" fg:w="1659"/><text x="8.5652%" y="911.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1,659 samples, 51.67%)</title><rect x="8.3152%" y="885" width="51.6661%" height="15" fill="rgb(208,96,46)" fg:x="267" fg:w="1659"/><text x="8.5652%" y="895.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1,659 samples, 51.67%)</title><rect x="8.3152%" y="869" width="51.6661%" height="15" fill="rgb(239,3,39)" fg:x="267" fg:w="1659"/><text x="8.5652%" y="879.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (1,659 samples, 51.67%)</title><rect x="8.3152%" y="853" width="51.6661%" height="15" fill="rgb(233,210,1)" fg:x="267" fg:w="1659"/><text x="8.5652%" y="863.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,659 samples, 51.67%)</title><rect x="8.3152%" y="837" width="51.6661%" height="15" fill="rgb(244,137,37)" fg:x="267" fg:w="1659"/><text x="8.5652%" y="847.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,659 samples, 51.67%)</title><rect x="8.3152%" y="821" width="51.6661%" height="15" fill="rgb(240,136,2)" fg:x="267" fg:w="1659"/><text x="8.5652%" y="831.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,659 samples, 51.67%)</title><rect x="8.3152%" y="805" width="51.6661%" height="15" fill="rgb(239,18,37)" fg:x="267" fg:w="1659"/><text x="8.5652%" y="815.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,659 samples, 51.67%)</title><rect x="8.3152%" y="789" width="51.6661%" height="15" fill="rgb(218,185,22)" fg:x="267" fg:w="1659"/><text x="8.5652%" y="799.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::c..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (1,659 samples, 51.67%)</title><rect x="8.3152%" y="773" width="51.6661%" height="15" fill="rgb(225,218,4)" fg:x="267" fg:w="1659"/><text x="8.5652%" y="783.50">std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,659 samples, 51.67%)</title><rect x="8.3152%" y="757" width="51.6661%" height="15" fill="rgb(230,182,32)" fg:x="267" fg:w="1659"/><text x="8.5652%" y="767.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1,659 samples, 51.67%)</title><rect x="8.3152%" y="741" width="51.6661%" height="15" fill="rgb(242,56,43)" fg:x="267" fg:w="1659"/><text x="8.5652%" y="751.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1,659 samples, 51.67%)</title><rect x="8.3152%" y="725" width="51.6661%" height="15" fill="rgb(233,99,24)" fg:x="267" fg:w="1659"/><text x="8.5652%" y="735.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>crossbeam_utils::thread::ScopedThreadBuilder::spawn::{{closure}} (1,659 samples, 51.67%)</title><rect x="8.3152%" y="709" width="51.6661%" height="15" fill="rgb(234,209,42)" fg:x="267" fg:w="1659"/><text x="8.5652%" y="719.50">crossbeam_utils::thread::ScopedThreadBuilder::spawn::{{closure}}</text></g><g><title>test_mmmh::update_3::{{closure}}::{{closure}} (1,659 samples, 51.67%)</title><rect x="8.3152%" y="693" width="51.6661%" height="15" fill="rgb(227,7,12)" fg:x="267" fg:w="1659"/><text x="8.5652%" y="703.50">test_mmmh::update_3::{{closure}}::{{closure}}</text></g><g><title>test_mmmh::SubProduct2::update_subproduct (549 samples, 17.10%)</title><rect x="42.8838%" y="677" width="17.0975%" height="15" fill="rgb(245,203,43)" fg:x="1377" fg:w="549"/><text x="43.1338%" y="687.50">test_mmmh::SubProduct2::up..</text></g><g><title>test_mmmh::process_vendor (459 samples, 14.29%)</title><rect x="45.6867%" y="661" width="14.2946%" height="15" fill="rgb(238,205,33)" fg:x="1467" fg:w="459"/><text x="45.9367%" y="671.50">test_mmmh::process_ven..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;mut A&gt;::ne (13 samples, 0.40%)</title><rect x="59.5765%" y="645" width="0.4049%" height="15" fill="rgb(231,56,7)" fg:x="1913" fg:w="13"/><text x="59.8265%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&lt;str&gt;&gt;::ne (13 samples, 0.40%)</title><rect x="59.5765%" y="629" width="0.4049%" height="15" fill="rgb(244,186,29)" fg:x="1913" fg:w="13"/><text x="59.8265%" y="639.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::ne (7 samples, 0.22%)</title><rect x="59.7633%" y="613" width="0.2180%" height="15" fill="rgb(234,111,31)" fg:x="1919" fg:w="7"/><text x="60.0133%" y="623.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (7 samples, 0.22%)</title><rect x="59.7633%" y="597" width="0.2180%" height="15" fill="rgb(241,149,10)" fg:x="1919" fg:w="7"/><text x="60.0133%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (7 samples, 0.22%)</title><rect x="59.7633%" y="581" width="0.2180%" height="15" fill="rgb(249,206,44)" fg:x="1919" fg:w="7"/><text x="60.0133%" y="591.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (7 samples, 0.22%)</title><rect x="59.7633%" y="565" width="0.2180%" height="15" fill="rgb(251,153,30)" fg:x="1919" fg:w="7"/><text x="60.0133%" y="575.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (7 samples, 0.22%)</title><rect x="59.7633%" y="549" width="0.2180%" height="15" fill="rgb(239,152,38)" fg:x="1919" fg:w="7"/><text x="60.0133%" y="559.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.03%)</title><rect x="59.9813%" y="821" width="0.0311%" height="15" fill="rgb(249,139,47)" fg:x="1926" fg:w="1"/><text x="60.2313%" y="831.50"></text></g><g><title>std::rt::cleanup (1 samples, 0.03%)</title><rect x="59.9813%" y="805" width="0.0311%" height="15" fill="rgb(244,64,35)" fg:x="1926" fg:w="1"/><text x="60.2313%" y="815.50"></text></g><g><title>std::sync::once::Once::call_once (1 samples, 0.03%)</title><rect x="59.9813%" y="789" width="0.0311%" height="15" fill="rgb(216,46,15)" fg:x="1926" fg:w="1"/><text x="60.2313%" y="799.50"></text></g><g><title>std::sync::once::Once::call_inner (1 samples, 0.03%)</title><rect x="59.9813%" y="773" width="0.0311%" height="15" fill="rgb(250,74,19)" fg:x="1926" fg:w="1"/><text x="60.2313%" y="783.50"></text></g><g><title>std::sync::once::Once::call_once::{{closure}} (1 samples, 0.03%)</title><rect x="59.9813%" y="757" width="0.0311%" height="15" fill="rgb(249,42,33)" fg:x="1926" fg:w="1"/><text x="60.2313%" y="767.50"></text></g><g><title>std::rt::cleanup::{{closure}} (1 samples, 0.03%)</title><rect x="59.9813%" y="741" width="0.0311%" height="15" fill="rgb(242,149,17)" fg:x="1926" fg:w="1"/><text x="60.2313%" y="751.50"></text></g><g><title>std::sys::unix::cleanup (1 samples, 0.03%)</title><rect x="59.9813%" y="725" width="0.0311%" height="15" fill="rgb(244,29,21)" fg:x="1926" fg:w="1"/><text x="60.2313%" y="735.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::cleanup (1 samples, 0.03%)</title><rect x="59.9813%" y="709" width="0.0311%" height="15" fill="rgb(220,130,37)" fg:x="1926" fg:w="1"/><text x="60.2313%" y="719.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::drop_handler (1 samples, 0.03%)</title><rect x="59.9813%" y="693" width="0.0311%" height="15" fill="rgb(211,67,2)" fg:x="1926" fg:w="1"/><text x="60.2313%" y="703.50"></text></g><g><title>__GI___munmap (1 samples, 0.03%)</title><rect x="59.9813%" y="677" width="0.0311%" height="15" fill="rgb(235,68,52)" fg:x="1926" fg:w="1"/><text x="60.2313%" y="687.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="59.9813%" y="661" width="0.0311%" height="15" fill="rgb(246,142,3)" fg:x="1926" fg:w="1"/><text x="60.2313%" y="671.50"></text></g><g><title>do_syscall_64 (1 samples, 0.03%)</title><rect x="59.9813%" y="645" width="0.0311%" height="15" fill="rgb(241,25,7)" fg:x="1926" fg:w="1"/><text x="60.2313%" y="655.50"></text></g><g><title>__x64_sys_munmap (1 samples, 0.03%)</title><rect x="59.9813%" y="629" width="0.0311%" height="15" fill="rgb(242,119,39)" fg:x="1926" fg:w="1"/><text x="60.2313%" y="639.50"></text></g><g><title>__vm_munmap (1 samples, 0.03%)</title><rect x="59.9813%" y="613" width="0.0311%" height="15" fill="rgb(241,98,45)" fg:x="1926" fg:w="1"/><text x="60.2313%" y="623.50"></text></g><g><title>__do_munmap (1 samples, 0.03%)</title><rect x="59.9813%" y="597" width="0.0311%" height="15" fill="rgb(254,28,30)" fg:x="1926" fg:w="1"/><text x="60.2313%" y="607.50"></text></g><g><title>__split_vma (1 samples, 0.03%)</title><rect x="59.9813%" y="581" width="0.0311%" height="15" fill="rgb(241,142,54)" fg:x="1926" fg:w="1"/><text x="60.2313%" y="591.50"></text></g><g><title>vm_area_dup (1 samples, 0.03%)</title><rect x="59.9813%" y="565" width="0.0311%" height="15" fill="rgb(222,85,15)" fg:x="1926" fg:w="1"/><text x="60.2313%" y="575.50"></text></g><g><title>kmem_cache_alloc (1 samples, 0.03%)</title><rect x="59.9813%" y="549" width="0.0311%" height="15" fill="rgb(210,85,47)" fg:x="1926" fg:w="1"/><text x="60.2313%" y="559.50"></text></g><g><title>get_obj_cgroup_from_current (1 samples, 0.03%)</title><rect x="59.9813%" y="533" width="0.0311%" height="15" fill="rgb(224,206,25)" fg:x="1926" fg:w="1"/><text x="60.2313%" y="543.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.03%)</title><rect x="61.0713%" y="469" width="0.0311%" height="15" fill="rgb(243,201,19)" fg:x="1961" fg:w="1"/><text x="61.3213%" y="479.50"></text></g><g><title>__cond_resched (1 samples, 0.03%)</title><rect x="61.1025%" y="453" width="0.0311%" height="15" fill="rgb(236,59,4)" fg:x="1962" fg:w="1"/><text x="61.3525%" y="463.50"></text></g><g><title>find_vma (1 samples, 0.03%)</title><rect x="61.1959%" y="437" width="0.0311%" height="15" fill="rgb(254,179,45)" fg:x="1965" fg:w="1"/><text x="61.4459%" y="447.50"></text></g><g><title>vmacache_find (1 samples, 0.03%)</title><rect x="61.1959%" y="421" width="0.0311%" height="15" fill="rgb(226,14,10)" fg:x="1965" fg:w="1"/><text x="61.4459%" y="431.50"></text></g><g><title>_raw_spin_lock (3 samples, 0.09%)</title><rect x="61.4762%" y="389" width="0.0934%" height="15" fill="rgb(244,27,41)" fg:x="1974" fg:w="3"/><text x="61.7262%" y="399.50"></text></g><g><title>__cgroup_throttle_swaprate (2 samples, 0.06%)</title><rect x="61.7565%" y="373" width="0.0623%" height="15" fill="rgb(235,35,32)" fg:x="1983" fg:w="2"/><text x="62.0065%" y="383.50"></text></g><g><title>kthread_blkcg (1 samples, 0.03%)</title><rect x="61.7876%" y="357" width="0.0311%" height="15" fill="rgb(218,68,31)" fg:x="1984" fg:w="1"/><text x="62.0376%" y="367.50"></text></g><g><title>mem_cgroup_charge_statistics.constprop.0 (3 samples, 0.09%)</title><rect x="62.4416%" y="341" width="0.0934%" height="15" fill="rgb(207,120,37)" fg:x="2005" fg:w="3"/><text x="62.6916%" y="351.50"></text></g><g><title>charge_memcg (36 samples, 1.12%)</title><rect x="61.8187%" y="357" width="1.1211%" height="15" fill="rgb(227,98,0)" fg:x="1985" fg:w="36"/><text x="62.0687%" y="367.50"></text></g><g><title>try_charge_memcg (13 samples, 0.40%)</title><rect x="62.5350%" y="341" width="0.4049%" height="15" fill="rgb(207,7,3)" fg:x="2008" fg:w="13"/><text x="62.7850%" y="351.50"></text></g><g><title>page_counter_try_charge (1 samples, 0.03%)</title><rect x="62.9088%" y="325" width="0.0311%" height="15" fill="rgb(206,98,19)" fg:x="2020" fg:w="1"/><text x="63.1588%" y="335.50"></text></g><g><title>get_mem_cgroup_from_mm (4 samples, 0.12%)</title><rect x="62.9399%" y="357" width="0.1246%" height="15" fill="rgb(217,5,26)" fg:x="2021" fg:w="4"/><text x="63.1899%" y="367.50"></text></g><g><title>memcg_check_events (1 samples, 0.03%)</title><rect x="63.0645%" y="357" width="0.0311%" height="15" fill="rgb(235,190,38)" fg:x="2025" fg:w="1"/><text x="63.3145%" y="367.50"></text></g><g><title>__mem_cgroup_charge (42 samples, 1.31%)</title><rect x="61.8187%" y="373" width="1.3080%" height="15" fill="rgb(247,86,24)" fg:x="1985" fg:w="42"/><text x="62.0687%" y="383.50"></text></g><g><title>try_charge_memcg (1 samples, 0.03%)</title><rect x="63.0956%" y="357" width="0.0311%" height="15" fill="rgb(205,101,16)" fg:x="2026" fg:w="1"/><text x="63.3456%" y="367.50"></text></g><g><title>__zone_watermark_ok (1 samples, 0.03%)</title><rect x="63.3448%" y="325" width="0.0311%" height="15" fill="rgb(246,168,33)" fg:x="2034" fg:w="1"/><text x="63.5948%" y="335.50"></text></g><g><title>clear_page_erms (3 samples, 0.09%)</title><rect x="63.3759%" y="325" width="0.0934%" height="15" fill="rgb(231,114,1)" fg:x="2035" fg:w="3"/><text x="63.6259%" y="335.50"></text></g><g><title>alloc_pages_vma (19 samples, 0.59%)</title><rect x="63.1268%" y="373" width="0.5917%" height="15" fill="rgb(207,184,53)" fg:x="2027" fg:w="19"/><text x="63.3768%" y="383.50"></text></g><g><title>__alloc_pages (19 samples, 0.59%)</title><rect x="63.1268%" y="357" width="0.5917%" height="15" fill="rgb(224,95,51)" fg:x="2027" fg:w="19"/><text x="63.3768%" y="367.50"></text></g><g><title>get_page_from_freelist (15 samples, 0.47%)</title><rect x="63.2513%" y="341" width="0.4671%" height="15" fill="rgb(212,188,45)" fg:x="2031" fg:w="15"/><text x="63.5013%" y="351.50"></text></g><g><title>rmqueue (8 samples, 0.25%)</title><rect x="63.4693%" y="325" width="0.2491%" height="15" fill="rgb(223,154,38)" fg:x="2038" fg:w="8"/><text x="63.7193%" y="335.50"></text></g><g><title>rmqueue_bulk (5 samples, 0.16%)</title><rect x="63.5628%" y="309" width="0.1557%" height="15" fill="rgb(251,22,52)" fg:x="2041" fg:w="5"/><text x="63.8128%" y="319.50"></text></g><g><title>__mod_memcg_lruvec_state (2 samples, 0.06%)</title><rect x="63.9676%" y="293" width="0.0623%" height="15" fill="rgb(229,209,22)" fg:x="2054" fg:w="2"/><text x="64.2176%" y="303.50"></text></g><g><title>cgroup_rstat_updated (1 samples, 0.03%)</title><rect x="63.9988%" y="277" width="0.0311%" height="15" fill="rgb(234,138,34)" fg:x="2055" fg:w="1"/><text x="64.2488%" y="287.50"></text></g><g><title>__mod_lruvec_state (4 samples, 0.12%)</title><rect x="63.9365%" y="309" width="0.1246%" height="15" fill="rgb(212,95,11)" fg:x="2053" fg:w="4"/><text x="64.1865%" y="319.50"></text></g><g><title>__mod_node_page_state (1 samples, 0.03%)</title><rect x="64.0299%" y="293" width="0.0311%" height="15" fill="rgb(240,179,47)" fg:x="2056" fg:w="1"/><text x="64.2799%" y="303.50"></text></g><g><title>mem_cgroup_update_lru_size (1 samples, 0.03%)</title><rect x="64.0610%" y="309" width="0.0311%" height="15" fill="rgb(240,163,11)" fg:x="2057" fg:w="1"/><text x="64.3110%" y="319.50"></text></g><g><title>__pagevec_lru_add_fn (10 samples, 0.31%)</title><rect x="63.8119%" y="325" width="0.3114%" height="15" fill="rgb(236,37,12)" fg:x="2049" fg:w="10"/><text x="64.0619%" y="335.50"></text></g><g><title>page_mapping (1 samples, 0.03%)</title><rect x="64.0922%" y="309" width="0.0311%" height="15" fill="rgb(232,164,16)" fg:x="2058" fg:w="1"/><text x="64.3422%" y="319.50"></text></g><g><title>lru_cache_add_inactive_or_unevictable (14 samples, 0.44%)</title><rect x="63.7185%" y="373" width="0.4360%" height="15" fill="rgb(244,205,15)" fg:x="2046" fg:w="14"/><text x="63.9685%" y="383.50"></text></g><g><title>lru_cache_add (14 samples, 0.44%)</title><rect x="63.7185%" y="357" width="0.4360%" height="15" fill="rgb(223,117,47)" fg:x="2046" fg:w="14"/><text x="63.9685%" y="367.50"></text></g><g><title>__pagevec_lru_add (12 samples, 0.37%)</title><rect x="63.7808%" y="341" width="0.3737%" height="15" fill="rgb(244,107,35)" fg:x="2048" fg:w="12"/><text x="64.0308%" y="351.50"></text></g><g><title>release_pages (1 samples, 0.03%)</title><rect x="64.1233%" y="325" width="0.0311%" height="15" fill="rgb(205,140,8)" fg:x="2059" fg:w="1"/><text x="64.3733%" y="335.50"></text></g><g><title>do_anonymous_page (86 samples, 2.68%)</title><rect x="61.5696%" y="389" width="2.6783%" height="15" fill="rgb(228,84,46)" fg:x="1977" fg:w="86"/><text x="61.8196%" y="399.50">do..</text></g><g><title>page_add_new_anon_rmap (3 samples, 0.09%)</title><rect x="64.1545%" y="373" width="0.0934%" height="15" fill="rgb(254,188,9)" fg:x="2060" fg:w="3"/><text x="64.4045%" y="383.50"></text></g><g><title>__mod_lruvec_page_state (2 samples, 0.06%)</title><rect x="64.1856%" y="357" width="0.0623%" height="15" fill="rgb(206,112,54)" fg:x="2061" fg:w="2"/><text x="64.4356%" y="367.50"></text></g><g><title>__mod_lruvec_state (2 samples, 0.06%)</title><rect x="64.1856%" y="341" width="0.0623%" height="15" fill="rgb(216,84,49)" fg:x="2061" fg:w="2"/><text x="64.4356%" y="351.50"></text></g><g><title>__mod_memcg_lruvec_state (1 samples, 0.03%)</title><rect x="64.2168%" y="325" width="0.0311%" height="15" fill="rgb(214,194,35)" fg:x="2062" fg:w="1"/><text x="64.4668%" y="335.50"></text></g><g><title>pfn_pte (1 samples, 0.03%)</title><rect x="64.2479%" y="389" width="0.0311%" height="15" fill="rgb(249,28,3)" fg:x="2063" fg:w="1"/><text x="64.4979%" y="399.50"></text></g><g><title>handle_pte_fault (93 samples, 2.90%)</title><rect x="61.4139%" y="405" width="2.8963%" height="15" fill="rgb(222,56,52)" fg:x="1972" fg:w="93"/><text x="61.6639%" y="415.50">ha..</text></g><g><title>pmd_page_vaddr (1 samples, 0.03%)</title><rect x="64.2790%" y="389" width="0.0311%" height="15" fill="rgb(245,217,50)" fg:x="2064" fg:w="1"/><text x="64.5290%" y="399.50"></text></g><g><title>__handle_mm_fault (100 samples, 3.11%)</title><rect x="61.2270%" y="421" width="3.1143%" height="15" fill="rgb(213,201,24)" fg:x="1966" fg:w="100"/><text x="61.4770%" y="431.50">__h..</text></g><g><title>pmd_val (1 samples, 0.03%)</title><rect x="64.3102%" y="405" width="0.0311%" height="15" fill="rgb(248,116,28)" fg:x="2065" fg:w="1"/><text x="64.5602%" y="415.50"></text></g><g><title>do_user_addr_fault (104 samples, 3.24%)</title><rect x="61.1336%" y="453" width="3.2389%" height="15" fill="rgb(219,72,43)" fg:x="1963" fg:w="104"/><text x="61.3836%" y="463.50">do_..</text></g><g><title>handle_mm_fault (101 samples, 3.15%)</title><rect x="61.2270%" y="437" width="3.1454%" height="15" fill="rgb(209,138,14)" fg:x="1966" fg:w="101"/><text x="61.4770%" y="447.50">han..</text></g><g><title>cgroup_rstat_updated (1 samples, 0.03%)</title><rect x="64.3413%" y="421" width="0.0311%" height="15" fill="rgb(222,18,33)" fg:x="2066" fg:w="1"/><text x="64.5913%" y="431.50"></text></g><g><title>asm_exc_page_fault (109 samples, 3.39%)</title><rect x="61.0090%" y="485" width="3.3946%" height="15" fill="rgb(213,199,7)" fg:x="1959" fg:w="109"/><text x="61.2590%" y="495.50">asm..</text></g><g><title>exc_page_fault (106 samples, 3.30%)</title><rect x="61.1025%" y="469" width="3.3012%" height="15" fill="rgb(250,110,10)" fg:x="1962" fg:w="106"/><text x="61.3525%" y="479.50">exc..</text></g><g><title>up_read (1 samples, 0.03%)</title><rect x="64.3725%" y="453" width="0.0311%" height="15" fill="rgb(248,123,6)" fg:x="2067" fg:w="1"/><text x="64.6225%" y="463.50"></text></g><g><title>error_entry (3 samples, 0.09%)</title><rect x="64.4036%" y="485" width="0.0934%" height="15" fill="rgb(206,91,31)" fg:x="2068" fg:w="3"/><text x="64.6536%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (165 samples, 5.14%)</title><rect x="60.0125%" y="533" width="5.1386%" height="15" fill="rgb(211,154,13)" fg:x="1927" fg:w="165"/><text x="60.2625%" y="543.50">core::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend::{{closure}} (165 samples, 5.14%)</title><rect x="60.0125%" y="517" width="5.1386%" height="15" fill="rgb(225,148,7)" fg:x="1927" fg:w="165"/><text x="60.2625%" y="527.50">&lt;alloc..</text></g><g><title>core::ptr::write (165 samples, 5.14%)</title><rect x="60.0125%" y="501" width="5.1386%" height="15" fill="rgb(220,160,43)" fg:x="1927" fg:w="165"/><text x="60.2625%" y="511.50">core::..</text></g><g><title>sync_regs (21 samples, 0.65%)</title><rect x="64.4970%" y="485" width="0.6540%" height="15" fill="rgb(213,52,39)" fg:x="2071" fg:w="21"/><text x="64.7470%" y="495.50"></text></g><g><title>__irqentry_text_end (1 samples, 0.03%)</title><rect x="77.2656%" y="277" width="0.0311%" height="15" fill="rgb(243,137,7)" fg:x="2481" fg:w="1"/><text x="77.5156%" y="287.50"></text></g><g><title>alloc_perturb (18 samples, 0.56%)</title><rect x="77.2968%" y="277" width="0.5606%" height="15" fill="rgb(230,79,13)" fg:x="2482" fg:w="18"/><text x="77.5468%" y="287.50"></text></g><g><title>__cgroup_throttle_swaprate (4 samples, 0.12%)</title><rect x="78.5114%" y="165" width="0.1246%" height="15" fill="rgb(247,105,23)" fg:x="2521" fg:w="4"/><text x="78.7614%" y="175.50"></text></g><g><title>__get_vma_policy (2 samples, 0.06%)</title><rect x="78.6359%" y="165" width="0.0623%" height="15" fill="rgb(223,179,41)" fg:x="2525" fg:w="2"/><text x="78.8859%" y="175.50"></text></g><g><title>mem_cgroup_charge_statistics.constprop.0 (6 samples, 0.19%)</title><rect x="79.1654%" y="133" width="0.1869%" height="15" fill="rgb(218,9,34)" fg:x="2542" fg:w="6"/><text x="79.4154%" y="143.50"></text></g><g><title>cgroup_rstat_updated (3 samples, 0.09%)</title><rect x="79.2588%" y="117" width="0.0934%" height="15" fill="rgb(222,106,8)" fg:x="2545" fg:w="3"/><text x="79.5088%" y="127.50"></text></g><g><title>memcg_check_events (1 samples, 0.03%)</title><rect x="79.3522%" y="133" width="0.0311%" height="15" fill="rgb(211,220,0)" fg:x="2548" fg:w="1"/><text x="79.6022%" y="143.50"></text></g><g><title>__mem_cgroup_threshold (1 samples, 0.03%)</title><rect x="79.3522%" y="117" width="0.0311%" height="15" fill="rgb(229,52,16)" fg:x="2548" fg:w="1"/><text x="79.6022%" y="127.50"></text></g><g><title>charge_memcg (31 samples, 0.97%)</title><rect x="78.6982%" y="149" width="0.9654%" height="15" fill="rgb(212,155,18)" fg:x="2527" fg:w="31"/><text x="78.9482%" y="159.50"></text></g><g><title>try_charge_memcg (9 samples, 0.28%)</title><rect x="79.3834%" y="133" width="0.2803%" height="15" fill="rgb(242,21,14)" fg:x="2549" fg:w="9"/><text x="79.6334%" y="143.50"></text></g><g><title>get_mem_cgroup_from_mm (5 samples, 0.16%)</title><rect x="79.6637%" y="149" width="0.1557%" height="15" fill="rgb(222,19,48)" fg:x="2558" fg:w="5"/><text x="79.9137%" y="159.50"></text></g><g><title>rcu_read_unlock_strict (1 samples, 0.03%)</title><rect x="79.7882%" y="133" width="0.0311%" height="15" fill="rgb(232,45,27)" fg:x="2562" fg:w="1"/><text x="80.0382%" y="143.50"></text></g><g><title>__mem_cgroup_charge (37 samples, 1.15%)</title><rect x="78.6982%" y="165" width="1.1523%" height="15" fill="rgb(249,103,42)" fg:x="2527" fg:w="37"/><text x="78.9482%" y="175.50"></text></g><g><title>try_charge_memcg (1 samples, 0.03%)</title><rect x="79.8194%" y="149" width="0.0311%" height="15" fill="rgb(246,81,33)" fg:x="2563" fg:w="1"/><text x="80.0694%" y="159.50"></text></g><g><title>add_mm_counter_fast (1 samples, 0.03%)</title><rect x="79.8505%" y="165" width="0.0311%" height="15" fill="rgb(252,33,42)" fg:x="2564" fg:w="1"/><text x="80.1005%" y="175.50"></text></g><g><title>__next_zones_zonelist (1 samples, 0.03%)</title><rect x="79.9751%" y="133" width="0.0311%" height="15" fill="rgb(209,212,41)" fg:x="2568" fg:w="1"/><text x="80.2251%" y="143.50"></text></g><g><title>__next_zones_zonelist (1 samples, 0.03%)</title><rect x="80.0685%" y="117" width="0.0311%" height="15" fill="rgb(207,154,6)" fg:x="2571" fg:w="1"/><text x="80.3185%" y="127.50"></text></g><g><title>__zone_watermark_ok (1 samples, 0.03%)</title><rect x="80.0997%" y="117" width="0.0311%" height="15" fill="rgb(223,64,47)" fg:x="2572" fg:w="1"/><text x="80.3497%" y="127.50"></text></g><g><title>clear_page_erms (4 samples, 0.12%)</title><rect x="80.1308%" y="117" width="0.1246%" height="15" fill="rgb(211,161,38)" fg:x="2573" fg:w="4"/><text x="80.3808%" y="127.50"></text></g><g><title>__alloc_pages (18 samples, 0.56%)</title><rect x="79.9128%" y="149" width="0.5606%" height="15" fill="rgb(219,138,40)" fg:x="2566" fg:w="18"/><text x="80.1628%" y="159.50"></text></g><g><title>get_page_from_freelist (15 samples, 0.47%)</title><rect x="80.0062%" y="133" width="0.4671%" height="15" fill="rgb(241,228,46)" fg:x="2569" fg:w="15"/><text x="80.2562%" y="143.50"></text></g><g><title>rmqueue (7 samples, 0.22%)</title><rect x="80.2554%" y="117" width="0.2180%" height="15" fill="rgb(223,209,38)" fg:x="2577" fg:w="7"/><text x="80.5054%" y="127.50"></text></g><g><title>rmqueue_bulk (4 samples, 0.12%)</title><rect x="80.3488%" y="101" width="0.1246%" height="15" fill="rgb(236,164,45)" fg:x="2580" fg:w="4"/><text x="80.5988%" y="111.50"></text></g><g><title>alloc_pages_vma (21 samples, 0.65%)</title><rect x="79.8817%" y="165" width="0.6540%" height="15" fill="rgb(231,15,5)" fg:x="2565" fg:w="21"/><text x="80.1317%" y="175.50"></text></g><g><title>__next_zones_zonelist (2 samples, 0.06%)</title><rect x="80.4734%" y="149" width="0.0623%" height="15" fill="rgb(252,35,15)" fg:x="2584" fg:w="2"/><text x="80.7234%" y="159.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.03%)</title><rect x="80.6914%" y="101" width="0.0311%" height="15" fill="rgb(248,181,18)" fg:x="2591" fg:w="1"/><text x="80.9414%" y="111.50"></text></g><g><title>__mod_memcg_lruvec_state (1 samples, 0.03%)</title><rect x="80.6914%" y="85" width="0.0311%" height="15" fill="rgb(233,39,42)" fg:x="2591" fg:w="1"/><text x="80.9414%" y="95.50"></text></g><g><title>cgroup_rstat_updated (1 samples, 0.03%)</title><rect x="80.6914%" y="69" width="0.0311%" height="15" fill="rgb(238,110,33)" fg:x="2591" fg:w="1"/><text x="80.9414%" y="79.50"></text></g><g><title>__mod_zone_page_state (2 samples, 0.06%)</title><rect x="80.7225%" y="101" width="0.0623%" height="15" fill="rgb(233,195,10)" fg:x="2592" fg:w="2"/><text x="80.9725%" y="111.50"></text></g><g><title>__pagevec_lru_add_fn (9 samples, 0.28%)</title><rect x="80.5357%" y="117" width="0.2803%" height="15" fill="rgb(254,105,3)" fg:x="2586" fg:w="9"/><text x="80.7857%" y="127.50"></text></g><g><title>mem_cgroup_update_lru_size (1 samples, 0.03%)</title><rect x="80.7848%" y="101" width="0.0311%" height="15" fill="rgb(221,225,9)" fg:x="2594" fg:w="1"/><text x="81.0348%" y="111.50"></text></g><g><title>page_mapping (1 samples, 0.03%)</title><rect x="80.8159%" y="117" width="0.0311%" height="15" fill="rgb(224,227,45)" fg:x="2595" fg:w="1"/><text x="81.0659%" y="127.50"></text></g><g><title>lru_cache_add_inactive_or_unevictable (14 samples, 0.44%)</title><rect x="80.5357%" y="165" width="0.4360%" height="15" fill="rgb(229,198,43)" fg:x="2586" fg:w="14"/><text x="80.7857%" y="175.50"></text></g><g><title>lru_cache_add (14 samples, 0.44%)</title><rect x="80.5357%" y="149" width="0.4360%" height="15" fill="rgb(206,209,35)" fg:x="2586" fg:w="14"/><text x="80.7857%" y="159.50"></text></g><g><title>__pagevec_lru_add (14 samples, 0.44%)</title><rect x="80.5357%" y="133" width="0.4360%" height="15" fill="rgb(245,195,53)" fg:x="2586" fg:w="14"/><text x="80.7857%" y="143.50"></text></g><g><title>release_pages (4 samples, 0.12%)</title><rect x="80.8471%" y="117" width="0.1246%" height="15" fill="rgb(240,92,26)" fg:x="2596" fg:w="4"/><text x="81.0971%" y="127.50"></text></g><g><title>free_unref_page_list (1 samples, 0.03%)</title><rect x="80.9405%" y="101" width="0.0311%" height="15" fill="rgb(207,40,23)" fg:x="2599" fg:w="1"/><text x="81.1905%" y="111.50"></text></g><g><title>__mod_memcg_lruvec_state (2 samples, 0.06%)</title><rect x="81.0028%" y="117" width="0.0623%" height="15" fill="rgb(223,111,35)" fg:x="2601" fg:w="2"/><text x="81.2528%" y="127.50"></text></g><g><title>__mod_lruvec_page_state (4 samples, 0.12%)</title><rect x="80.9717%" y="149" width="0.1246%" height="15" fill="rgb(229,147,28)" fg:x="2600" fg:w="4"/><text x="81.2217%" y="159.50"></text></g><g><title>__mod_lruvec_state (3 samples, 0.09%)</title><rect x="81.0028%" y="133" width="0.0934%" height="15" fill="rgb(211,29,28)" fg:x="2601" fg:w="3"/><text x="81.2528%" y="143.50"></text></g><g><title>__mod_node_page_state (1 samples, 0.03%)</title><rect x="81.0651%" y="117" width="0.0311%" height="15" fill="rgb(228,72,33)" fg:x="2603" fg:w="1"/><text x="81.3151%" y="127.50"></text></g><g><title>page_add_new_anon_rmap (5 samples, 0.16%)</title><rect x="80.9717%" y="165" width="0.1557%" height="15" fill="rgb(205,214,31)" fg:x="2600" fg:w="5"/><text x="81.2217%" y="175.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.03%)</title><rect x="81.0962%" y="149" width="0.0311%" height="15" fill="rgb(224,111,15)" fg:x="2604" fg:w="1"/><text x="81.3462%" y="159.50"></text></g><g><title>pfn_pte (1 samples, 0.03%)</title><rect x="81.1274%" y="165" width="0.0311%" height="15" fill="rgb(253,21,26)" fg:x="2605" fg:w="1"/><text x="81.3774%" y="175.50"></text></g><g><title>pmd_page_vaddr (2 samples, 0.06%)</title><rect x="81.1585%" y="165" width="0.0623%" height="15" fill="rgb(245,139,43)" fg:x="2606" fg:w="2"/><text x="81.4085%" y="175.50"></text></g><g><title>pmd_val (1 samples, 0.03%)</title><rect x="81.2208%" y="165" width="0.0311%" height="15" fill="rgb(252,170,7)" fg:x="2608" fg:w="1"/><text x="81.4708%" y="175.50"></text></g><g><title>pte_alloc_one (1 samples, 0.03%)</title><rect x="81.2519%" y="165" width="0.0311%" height="15" fill="rgb(231,118,14)" fg:x="2609" fg:w="1"/><text x="81.5019%" y="175.50"></text></g><g><title>do_anonymous_page (95 samples, 2.96%)</title><rect x="78.3557%" y="181" width="2.9586%" height="15" fill="rgb(238,83,0)" fg:x="2516" fg:w="95"/><text x="78.6057%" y="191.50">do_..</text></g><g><title>set_pte (1 samples, 0.03%)</title><rect x="81.2831%" y="165" width="0.0311%" height="15" fill="rgb(221,39,39)" fg:x="2610" fg:w="1"/><text x="81.5331%" y="175.50"></text></g><g><title>__handle_mm_fault (105 samples, 3.27%)</title><rect x="78.0754%" y="213" width="3.2700%" height="15" fill="rgb(222,119,46)" fg:x="2507" fg:w="105"/><text x="78.3254%" y="223.50">__h..</text></g><g><title>handle_pte_fault (97 samples, 3.02%)</title><rect x="78.3245%" y="197" width="3.0209%" height="15" fill="rgb(222,165,49)" fg:x="2515" fg:w="97"/><text x="78.5745%" y="207.50">han..</text></g><g><title>pmd_val (1 samples, 0.03%)</title><rect x="81.3142%" y="181" width="0.0311%" height="15" fill="rgb(219,113,52)" fg:x="2611" fg:w="1"/><text x="81.5642%" y="191.50"></text></g><g><title>pmd_val (2 samples, 0.06%)</title><rect x="81.3454%" y="213" width="0.0623%" height="15" fill="rgb(214,7,15)" fg:x="2612" fg:w="2"/><text x="81.5954%" y="223.50"></text></g><g><title>do_user_addr_fault (114 samples, 3.55%)</title><rect x="77.8885%" y="245" width="3.5503%" height="15" fill="rgb(235,32,4)" fg:x="2501" fg:w="114"/><text x="78.1385%" y="255.50">do_u..</text></g><g><title>handle_mm_fault (114 samples, 3.55%)</title><rect x="77.8885%" y="229" width="3.5503%" height="15" fill="rgb(238,90,54)" fg:x="2501" fg:w="114"/><text x="78.1385%" y="239.50">hand..</text></g><g><title>pud_val (1 samples, 0.03%)</title><rect x="81.4077%" y="213" width="0.0311%" height="15" fill="rgb(213,208,19)" fg:x="2614" fg:w="1"/><text x="81.6577%" y="223.50"></text></g><g><title>exc_page_fault (116 samples, 3.61%)</title><rect x="77.8885%" y="261" width="3.6126%" height="15" fill="rgb(233,156,4)" fg:x="2501" fg:w="116"/><text x="78.1385%" y="271.50">exc_..</text></g><g><title>irqentry_exit (2 samples, 0.06%)</title><rect x="81.4388%" y="245" width="0.0623%" height="15" fill="rgb(207,194,5)" fg:x="2615" fg:w="2"/><text x="81.6888%" y="255.50"></text></g><g><title>irqentry_exit_to_user_mode (2 samples, 0.06%)</title><rect x="81.4388%" y="229" width="0.0623%" height="15" fill="rgb(206,111,30)" fg:x="2615" fg:w="2"/><text x="81.6888%" y="239.50"></text></g><g><title>exit_to_user_mode_prepare (2 samples, 0.06%)</title><rect x="81.4388%" y="213" width="0.0623%" height="15" fill="rgb(243,70,54)" fg:x="2615" fg:w="2"/><text x="81.6888%" y="223.50"></text></g><g><title>asm_exc_page_fault (118 samples, 3.67%)</title><rect x="77.8574%" y="277" width="3.6749%" height="15" fill="rgb(242,28,8)" fg:x="2500" fg:w="118"/><text x="78.1074%" y="287.50">asm_..</text></g><g><title>irqentry_exit (1 samples, 0.03%)</title><rect x="81.5011%" y="261" width="0.0311%" height="15" fill="rgb(219,106,18)" fg:x="2617" fg:w="1"/><text x="81.7511%" y="271.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="81.5322%" y="277" width="0.0311%" height="15" fill="rgb(244,222,10)" fg:x="2618" fg:w="1"/><text x="81.7822%" y="287.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="81.5322%" y="261" width="0.0311%" height="15" fill="rgb(236,179,52)" fg:x="2618" fg:w="1"/><text x="81.7822%" y="271.50"></text></g><g><title>irqentry_exit (1 samples, 0.03%)</title><rect x="81.5322%" y="245" width="0.0311%" height="15" fill="rgb(213,23,39)" fg:x="2618" fg:w="1"/><text x="81.7822%" y="255.50"></text></g><g><title>irqentry_exit_to_user_mode (1 samples, 0.03%)</title><rect x="81.5322%" y="229" width="0.0311%" height="15" fill="rgb(238,48,10)" fg:x="2618" fg:w="1"/><text x="81.7822%" y="239.50"></text></g><g><title>exit_to_user_mode_prepare (1 samples, 0.03%)</title><rect x="81.5322%" y="213" width="0.0311%" height="15" fill="rgb(251,196,23)" fg:x="2618" fg:w="1"/><text x="81.7822%" y="223.50"></text></g><g><title>exit_to_user_mode_loop (1 samples, 0.03%)</title><rect x="81.5322%" y="197" width="0.0311%" height="15" fill="rgb(250,152,24)" fg:x="2618" fg:w="1"/><text x="81.7822%" y="207.50"></text></g><g><title>__rseq_handle_notify_resume (1 samples, 0.03%)</title><rect x="81.5322%" y="181" width="0.0311%" height="15" fill="rgb(209,150,17)" fg:x="2618" fg:w="1"/><text x="81.7822%" y="191.50"></text></g><g><title>rseq_ip_fixup (1 samples, 0.03%)</title><rect x="81.5322%" y="165" width="0.0311%" height="15" fill="rgb(234,202,34)" fg:x="2618" fg:w="1"/><text x="81.7822%" y="175.50"></text></g><g><title>__get_user_8 (1 samples, 0.03%)</title><rect x="81.5322%" y="149" width="0.0311%" height="15" fill="rgb(253,148,53)" fg:x="2618" fg:w="1"/><text x="81.7822%" y="159.50"></text></g><g><title>checked_request2size (7 samples, 0.22%)</title><rect x="81.5634%" y="277" width="0.2180%" height="15" fill="rgb(218,129,16)" fg:x="2619" fg:w="7"/><text x="81.8134%" y="287.50"></text></g><g><title>exc_page_fault (1 samples, 0.03%)</title><rect x="81.7814%" y="277" width="0.0311%" height="15" fill="rgb(216,85,19)" fg:x="2626" fg:w="1"/><text x="82.0314%" y="287.50"></text></g><g><title>sync_regs (20 samples, 0.62%)</title><rect x="81.8125%" y="277" width="0.6229%" height="15" fill="rgb(235,228,7)" fg:x="2627" fg:w="20"/><text x="82.0625%" y="287.50"></text></g><g><title>perf_event_mmap (2 samples, 0.06%)</title><rect x="82.5600%" y="117" width="0.0623%" height="15" fill="rgb(245,175,0)" fg:x="2651" fg:w="2"/><text x="82.8100%" y="127.50"></text></g><g><title>perf_event_mmap_event (2 samples, 0.06%)</title><rect x="82.5600%" y="101" width="0.0623%" height="15" fill="rgb(208,168,36)" fg:x="2651" fg:w="2"/><text x="82.8100%" y="111.50"></text></g><g><title>perf_iterate_sb (2 samples, 0.06%)</title><rect x="82.5600%" y="85" width="0.0623%" height="15" fill="rgb(246,171,24)" fg:x="2651" fg:w="2"/><text x="82.8100%" y="95.50"></text></g><g><title>perf_iterate_ctx (2 samples, 0.06%)</title><rect x="82.5600%" y="69" width="0.0623%" height="15" fill="rgb(215,142,24)" fg:x="2651" fg:w="2"/><text x="82.8100%" y="79.50"></text></g><g><title>perf_event_mmap_output (2 samples, 0.06%)</title><rect x="82.5600%" y="53" width="0.0623%" height="15" fill="rgb(250,187,7)" fg:x="2651" fg:w="2"/><text x="82.8100%" y="63.50"></text></g><g><title>memcpy_erms (1 samples, 0.03%)</title><rect x="82.5911%" y="37" width="0.0311%" height="15" fill="rgb(228,66,33)" fg:x="2652" fg:w="1"/><text x="82.8411%" y="47.50"></text></g><g><title>__glibc_morecore (3 samples, 0.09%)</title><rect x="82.5600%" y="261" width="0.0934%" height="15" fill="rgb(234,215,21)" fg:x="2651" fg:w="3"/><text x="82.8100%" y="271.50"></text></g><g><title>__GI___sbrk (3 samples, 0.09%)</title><rect x="82.5600%" y="245" width="0.0934%" height="15" fill="rgb(222,191,20)" fg:x="2651" fg:w="3"/><text x="82.8100%" y="255.50"></text></g><g><title>__GI___sbrk (3 samples, 0.09%)</title><rect x="82.5600%" y="229" width="0.0934%" height="15" fill="rgb(245,79,54)" fg:x="2651" fg:w="3"/><text x="82.8100%" y="239.50"></text></g><g><title>__brk (3 samples, 0.09%)</title><rect x="82.5600%" y="213" width="0.0934%" height="15" fill="rgb(240,10,37)" fg:x="2651" fg:w="3"/><text x="82.8100%" y="223.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (3 samples, 0.09%)</title><rect x="82.5600%" y="197" width="0.0934%" height="15" fill="rgb(214,192,32)" fg:x="2651" fg:w="3"/><text x="82.8100%" y="207.50"></text></g><g><title>do_syscall_64 (3 samples, 0.09%)</title><rect x="82.5600%" y="181" width="0.0934%" height="15" fill="rgb(209,36,54)" fg:x="2651" fg:w="3"/><text x="82.8100%" y="191.50"></text></g><g><title>__x64_sys_brk (3 samples, 0.09%)</title><rect x="82.5600%" y="165" width="0.0934%" height="15" fill="rgb(220,10,11)" fg:x="2651" fg:w="3"/><text x="82.8100%" y="175.50"></text></g><g><title>__do_sys_brk (3 samples, 0.09%)</title><rect x="82.5600%" y="149" width="0.0934%" height="15" fill="rgb(221,106,17)" fg:x="2651" fg:w="3"/><text x="82.8100%" y="159.50"></text></g><g><title>do_brk_flags (3 samples, 0.09%)</title><rect x="82.5600%" y="133" width="0.0934%" height="15" fill="rgb(251,142,44)" fg:x="2651" fg:w="3"/><text x="82.8100%" y="143.50"></text></g><g><title>vma_merge (1 samples, 0.03%)</title><rect x="82.6222%" y="117" width="0.0311%" height="15" fill="rgb(238,13,15)" fg:x="2653" fg:w="1"/><text x="82.8722%" y="127.50"></text></g><g><title>__vma_adjust (1 samples, 0.03%)</title><rect x="82.6222%" y="101" width="0.0311%" height="15" fill="rgb(208,107,27)" fg:x="2653" fg:w="1"/><text x="82.8722%" y="111.50"></text></g><g><title>down_write (1 samples, 0.03%)</title><rect x="82.6222%" y="85" width="0.0311%" height="15" fill="rgb(205,136,37)" fg:x="2653" fg:w="1"/><text x="82.8722%" y="95.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.03%)</title><rect x="82.6534%" y="229" width="0.0311%" height="15" fill="rgb(250,205,27)" fg:x="2654" fg:w="1"/><text x="82.9034%" y="239.50"></text></g><g><title>handle_mm_fault (1 samples, 0.03%)</title><rect x="82.6534%" y="213" width="0.0311%" height="15" fill="rgb(210,80,43)" fg:x="2654" fg:w="1"/><text x="82.9034%" y="223.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.03%)</title><rect x="82.6534%" y="197" width="0.0311%" height="15" fill="rgb(247,160,36)" fg:x="2654" fg:w="1"/><text x="82.9034%" y="207.50"></text></g><g><title>handle_pte_fault (1 samples, 0.03%)</title><rect x="82.6534%" y="181" width="0.0311%" height="15" fill="rgb(234,13,49)" fg:x="2654" fg:w="1"/><text x="82.9034%" y="191.50"></text></g><g><title>do_anonymous_page (1 samples, 0.03%)</title><rect x="82.6534%" y="165" width="0.0311%" height="15" fill="rgb(234,122,0)" fg:x="2654" fg:w="1"/><text x="82.9034%" y="175.50"></text></g><g><title>__mem_cgroup_charge (1 samples, 0.03%)</title><rect x="82.6534%" y="149" width="0.0311%" height="15" fill="rgb(207,146,38)" fg:x="2654" fg:w="1"/><text x="82.9034%" y="159.50"></text></g><g><title>charge_memcg (1 samples, 0.03%)</title><rect x="82.6534%" y="133" width="0.0311%" height="15" fill="rgb(207,177,25)" fg:x="2654" fg:w="1"/><text x="82.9034%" y="143.50"></text></g><g><title>asm_exc_page_fault (2 samples, 0.06%)</title><rect x="82.6534%" y="261" width="0.0623%" height="15" fill="rgb(211,178,42)" fg:x="2654" fg:w="2"/><text x="82.9034%" y="271.50"></text></g><g><title>exc_page_fault (2 samples, 0.06%)</title><rect x="82.6534%" y="245" width="0.0623%" height="15" fill="rgb(230,69,54)" fg:x="2654" fg:w="2"/><text x="82.9034%" y="255.50"></text></g><g><title>irqentry_exit (1 samples, 0.03%)</title><rect x="82.6845%" y="229" width="0.0311%" height="15" fill="rgb(214,135,41)" fg:x="2655" fg:w="1"/><text x="82.9345%" y="239.50"></text></g><g><title>irqentry_exit_to_user_mode (1 samples, 0.03%)</title><rect x="82.6845%" y="213" width="0.0311%" height="15" fill="rgb(237,67,25)" fg:x="2655" fg:w="1"/><text x="82.9345%" y="223.50"></text></g><g><title>exit_to_user_mode_prepare (1 samples, 0.03%)</title><rect x="82.6845%" y="197" width="0.0311%" height="15" fill="rgb(222,189,50)" fg:x="2655" fg:w="1"/><text x="82.9345%" y="207.50"></text></g><g><title>_int_malloc (429 samples, 13.36%)</title><rect x="69.3865%" y="293" width="13.3603%" height="15" fill="rgb(245,148,34)" fg:x="2228" fg:w="429"/><text x="69.6365%" y="303.50">_int_malloc</text></g><g><title>sysmalloc (10 samples, 0.31%)</title><rect x="82.4354%" y="277" width="0.3114%" height="15" fill="rgb(222,29,6)" fg:x="2647" fg:w="10"/><text x="82.6854%" y="287.50"></text></g><g><title>sync_regs (1 samples, 0.03%)</title><rect x="82.7157%" y="261" width="0.0311%" height="15" fill="rgb(221,189,43)" fg:x="2656" fg:w="1"/><text x="82.9657%" y="271.50"></text></g><g><title>arena_for_chunk (14 samples, 0.44%)</title><rect x="82.7468%" y="293" width="0.4360%" height="15" fill="rgb(207,36,27)" fg:x="2657" fg:w="14"/><text x="82.9968%" y="303.50"></text></g><g><title>__GI___libc_malloc (511 samples, 15.91%)</title><rect x="67.6425%" y="309" width="15.9140%" height="15" fill="rgb(217,90,24)" fg:x="2172" fg:w="511"/><text x="67.8925%" y="319.50">__GI___libc_malloc</text></g><g><title>checked_request2size (12 samples, 0.37%)</title><rect x="83.1828%" y="293" width="0.3737%" height="15" fill="rgb(224,66,35)" fg:x="2671" fg:w="12"/><text x="83.4328%" y="303.50"></text></g><g><title>__rdl_alloc (18 samples, 0.56%)</title><rect x="83.5565%" y="309" width="0.5606%" height="15" fill="rgb(221,13,50)" fg:x="2683" fg:w="18"/><text x="83.8065%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (18 samples, 0.56%)</title><rect x="83.5565%" y="293" width="0.5606%" height="15" fill="rgb(236,68,49)" fg:x="2683" fg:w="18"/><text x="83.8065%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (552 samples, 17.19%)</title><rect x="67.1753%" y="405" width="17.1909%" height="15" fill="rgb(229,146,28)" fg:x="2157" fg:w="552"/><text x="67.4253%" y="415.50">alloc::vec::Vec&lt;T,A&gt;::with_..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (552 samples, 17.19%)</title><rect x="67.1753%" y="389" width="17.1909%" height="15" fill="rgb(225,31,38)" fg:x="2157" fg:w="552"/><text x="67.4253%" y="399.50">alloc::raw_vec::RawVec&lt;T,A&gt;..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (552 samples, 17.19%)</title><rect x="67.1753%" y="373" width="17.1909%" height="15" fill="rgb(250,208,3)" fg:x="2157" fg:w="552"/><text x="67.4253%" y="383.50">alloc::raw_vec::RawVec&lt;T,A&gt;..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (548 samples, 17.07%)</title><rect x="67.2999%" y="357" width="17.0663%" height="15" fill="rgb(246,54,23)" fg:x="2161" fg:w="548"/><text x="67.5499%" y="367.50">&lt;alloc::alloc::Global as c..</text></g><g><title>alloc::alloc::Global::alloc_impl (548 samples, 17.07%)</title><rect x="67.2999%" y="341" width="17.0663%" height="15" fill="rgb(243,76,11)" fg:x="2161" fg:w="548"/><text x="67.5499%" y="351.50">alloc::alloc::Global::allo..</text></g><g><title>alloc::alloc::alloc (540 samples, 16.82%)</title><rect x="67.5491%" y="325" width="16.8172%" height="15" fill="rgb(245,21,50)" fg:x="2169" fg:w="540"/><text x="67.7991%" y="335.50">alloc::alloc::alloc</text></g><g><title>__rust_alloc (8 samples, 0.25%)</title><rect x="84.1171%" y="309" width="0.2491%" height="15" fill="rgb(228,9,43)" fg:x="2701" fg:w="8"/><text x="84.3671%" y="319.50"></text></g><g><title>[libc.so.6] (22 samples, 0.69%)</title><rect x="84.6465%" y="373" width="0.6851%" height="15" fill="rgb(208,100,47)" fg:x="2718" fg:w="22"/><text x="84.8965%" y="383.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.03%)</title><rect x="85.3317%" y="341" width="0.0311%" height="15" fill="rgb(232,26,8)" fg:x="2740" fg:w="1"/><text x="85.5817%" y="351.50"></text></g><g><title>error_entry (3 samples, 0.09%)</title><rect x="85.3628%" y="341" width="0.0934%" height="15" fill="rgb(216,166,38)" fg:x="2741" fg:w="3"/><text x="85.6128%" y="351.50"></text></g><g><title>sync_regs (1 samples, 0.03%)</title><rect x="85.4562%" y="341" width="0.0311%" height="15" fill="rgb(251,202,51)" fg:x="2744" fg:w="1"/><text x="85.7062%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (589 samples, 18.34%)</title><rect x="67.1753%" y="517" width="18.3432%" height="15" fill="rgb(254,216,34)" fg:x="2157" fg:w="589"/><text x="67.4253%" y="527.50">&lt;alloc::string::String as cor..</text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (589 samples, 18.34%)</title><rect x="67.1753%" y="501" width="18.3432%" height="15" fill="rgb(251,32,27)" fg:x="2157" fg:w="589"/><text x="67.4253%" y="511.50">alloc::str::&lt;impl alloc::borr..</text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (589 samples, 18.34%)</title><rect x="67.1753%" y="485" width="18.3432%" height="15" fill="rgb(208,127,28)" fg:x="2157" fg:w="589"/><text x="67.4253%" y="495.50">alloc::slice::&lt;impl alloc::bo..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (589 samples, 18.34%)</title><rect x="67.1753%" y="469" width="18.3432%" height="15" fill="rgb(224,137,22)" fg:x="2157" fg:w="589"/><text x="67.4253%" y="479.50">alloc::slice::&lt;impl [T]&gt;::to_..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (589 samples, 18.34%)</title><rect x="67.1753%" y="453" width="18.3432%" height="15" fill="rgb(254,70,32)" fg:x="2157" fg:w="589"/><text x="67.4253%" y="463.50">alloc::slice::&lt;impl [T]&gt;::to_..</text></g><g><title>alloc::slice::hack::to_vec (589 samples, 18.34%)</title><rect x="67.1753%" y="437" width="18.3432%" height="15" fill="rgb(229,75,37)" fg:x="2157" fg:w="589"/><text x="67.4253%" y="447.50">alloc::slice::hack::to_vec</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (589 samples, 18.34%)</title><rect x="67.1753%" y="421" width="18.3432%" height="15" fill="rgb(252,64,23)" fg:x="2157" fg:w="589"/><text x="67.4253%" y="431.50">&lt;T as alloc::slice::hack::Con..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (37 samples, 1.15%)</title><rect x="84.3662%" y="405" width="1.1523%" height="15" fill="rgb(232,162,48)" fg:x="2709" fg:w="37"/><text x="84.6162%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (37 samples, 1.15%)</title><rect x="84.3662%" y="389" width="1.1523%" height="15" fill="rgb(246,160,12)" fg:x="2709" fg:w="37"/><text x="84.6162%" y="399.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.19%)</title><rect x="85.3317%" y="373" width="0.1869%" height="15" fill="rgb(247,166,0)" fg:x="2740" fg:w="6"/><text x="85.5817%" y="383.50"></text></g><g><title>_int_malloc (6 samples, 0.19%)</title><rect x="85.3317%" y="357" width="0.1869%" height="15" fill="rgb(249,219,21)" fg:x="2740" fg:w="6"/><text x="85.5817%" y="367.50"></text></g><g><title>sysmalloc (1 samples, 0.03%)</title><rect x="85.4874%" y="341" width="0.0311%" height="15" fill="rgb(205,209,3)" fg:x="2745" fg:w="1"/><text x="85.7374%" y="351.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.03%)</title><rect x="85.4874%" y="325" width="0.0311%" height="15" fill="rgb(243,44,1)" fg:x="2745" fg:w="1"/><text x="85.7374%" y="335.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (822 samples, 25.60%)</title><rect x="60.0125%" y="549" width="25.5995%" height="15" fill="rgb(206,159,16)" fg:x="1927" fg:w="822"/><text x="60.2625%" y="559.50">core::iter::adapters::map::map_fold::{{cl..</text></g><g><title>test_mmmh::main::{{closure}} (657 samples, 20.46%)</title><rect x="65.1510%" y="533" width="20.4609%" height="15" fill="rgb(244,77,30)" fg:x="2092" fg:w="657"/><text x="65.4010%" y="543.50">test_mmmh::main::{{closure}}</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3 samples, 0.09%)</title><rect x="85.5185%" y="517" width="0.0934%" height="15" fill="rgb(218,69,12)" fg:x="2746" fg:w="3"/><text x="85.7685%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.09%)</title><rect x="85.5185%" y="501" width="0.0934%" height="15" fill="rgb(212,87,7)" fg:x="2746" fg:w="3"/><text x="85.7685%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (3 samples, 0.09%)</title><rect x="85.5185%" y="485" width="0.0934%" height="15" fill="rgb(245,114,25)" fg:x="2746" fg:w="3"/><text x="85.7685%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (823 samples, 25.63%)</title><rect x="60.0125%" y="677" width="25.6306%" height="15" fill="rgb(210,61,42)" fg:x="1927" fg:w="823"/><text x="60.2625%" y="687.50">core::iter::traits::iterator::Iterator::c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (823 samples, 25.63%)</title><rect x="60.0125%" y="661" width="25.6306%" height="15" fill="rgb(211,52,33)" fg:x="1927" fg:w="823"/><text x="60.2625%" y="671.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (823 samples, 25.63%)</title><rect x="60.0125%" y="645" width="25.6306%" height="15" fill="rgb(234,58,33)" fg:x="1927" fg:w="823"/><text x="60.2625%" y="655.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_f..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (823 samples, 25.63%)</title><rect x="60.0125%" y="629" width="25.6306%" height="15" fill="rgb(220,115,36)" fg:x="1927" fg:w="823"/><text x="60.2625%" y="639.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_f..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (823 samples, 25.63%)</title><rect x="60.0125%" y="613" width="25.6306%" height="15" fill="rgb(243,153,54)" fg:x="1927" fg:w="823"/><text x="60.2625%" y="623.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (823 samples, 25.63%)</title><rect x="60.0125%" y="597" width="25.6306%" height="15" fill="rgb(251,47,18)" fg:x="1927" fg:w="823"/><text x="60.2625%" y="607.50">core::iter::traits::iterator::Iterator::f..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (823 samples, 25.63%)</title><rect x="60.0125%" y="581" width="25.6306%" height="15" fill="rgb(242,102,42)" fg:x="1927" fg:w="823"/><text x="60.2625%" y="591.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as c..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (823 samples, 25.63%)</title><rect x="60.0125%" y="565" width="25.6306%" height="15" fill="rgb(234,31,38)" fg:x="1927" fg:w="823"/><text x="60.2625%" y="575.50">core::iter::traits::iterator::Iterator::f..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.03%)</title><rect x="85.6120%" y="549" width="0.0311%" height="15" fill="rgb(221,117,51)" fg:x="2749" fg:w="1"/><text x="85.8620%" y="559.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.03%)</title><rect x="85.6120%" y="533" width="0.0311%" height="15" fill="rgb(212,20,18)" fg:x="2749" fg:w="1"/><text x="85.8620%" y="543.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1 samples, 0.03%)</title><rect x="85.6120%" y="517" width="0.0311%" height="15" fill="rgb(245,133,36)" fg:x="2749" fg:w="1"/><text x="85.8620%" y="527.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="85.7365%" y="613" width="0.0311%" height="15" fill="rgb(212,6,19)" fg:x="2753" fg:w="1"/><text x="85.9865%" y="623.50"></text></g><g><title>__irqentry_text_end (1 samples, 0.03%)</title><rect x="87.2937%" y="533" width="0.0311%" height="15" fill="rgb(218,1,36)" fg:x="2803" fg:w="1"/><text x="87.5437%" y="543.50"></text></g><g><title>down_read_trylock (1 samples, 0.03%)</title><rect x="87.4494%" y="485" width="0.0311%" height="15" fill="rgb(246,84,54)" fg:x="2808" fg:w="1"/><text x="87.6994%" y="495.50"></text></g><g><title>__count_memcg_events (3 samples, 0.09%)</title><rect x="87.5117%" y="469" width="0.0934%" height="15" fill="rgb(242,110,6)" fg:x="2810" fg:w="3"/><text x="87.7617%" y="479.50"></text></g><g><title>cgroup_rstat_updated (3 samples, 0.09%)</title><rect x="87.5117%" y="453" width="0.0934%" height="15" fill="rgb(214,47,5)" fg:x="2810" fg:w="3"/><text x="87.7617%" y="463.50"></text></g><g><title>_raw_spin_lock_irqsave (1 samples, 0.03%)</title><rect x="87.5740%" y="437" width="0.0311%" height="15" fill="rgb(218,159,25)" fg:x="2812" fg:w="1"/><text x="87.8240%" y="447.50"></text></g><g><title>native_queued_spin_lock_slowpath (1 samples, 0.03%)</title><rect x="87.5740%" y="421" width="0.0311%" height="15" fill="rgb(215,211,28)" fg:x="2812" fg:w="1"/><text x="87.8240%" y="431.50"></text></g><g><title>native_queued_spin_lock_slowpath.part.0 (1 samples, 0.03%)</title><rect x="87.5740%" y="405" width="0.0311%" height="15" fill="rgb(238,59,32)" fg:x="2812" fg:w="1"/><text x="87.8240%" y="415.50"></text></g><g><title>__cgroup_throttle_swaprate (1 samples, 0.03%)</title><rect x="87.7920%" y="437" width="0.0311%" height="15" fill="rgb(226,82,3)" fg:x="2819" fg:w="1"/><text x="88.0420%" y="447.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.03%)</title><rect x="87.8231%" y="437" width="0.0311%" height="15" fill="rgb(240,164,32)" fg:x="2820" fg:w="1"/><text x="88.0731%" y="447.50"></text></g><g><title>alloc_pages_vma (1 samples, 0.03%)</title><rect x="87.8543%" y="437" width="0.0311%" height="15" fill="rgb(232,46,7)" fg:x="2821" fg:w="1"/><text x="88.1043%" y="447.50"></text></g><g><title>__alloc_pages (1 samples, 0.03%)</title><rect x="88.0411%" y="421" width="0.0311%" height="15" fill="rgb(229,129,53)" fg:x="2827" fg:w="1"/><text x="88.2911%" y="431.50"></text></g><g><title>__cgroup_throttle_swaprate (4 samples, 0.12%)</title><rect x="88.0723%" y="421" width="0.1246%" height="15" fill="rgb(234,188,29)" fg:x="2828" fg:w="4"/><text x="88.3223%" y="431.50"></text></g><g><title>arch_local_irq_enable (1 samples, 0.03%)</title><rect x="88.5705%" y="389" width="0.0311%" height="15" fill="rgb(246,141,4)" fg:x="2844" fg:w="1"/><text x="88.8205%" y="399.50"></text></g><g><title>cgroup_rstat_updated (1 samples, 0.03%)</title><rect x="88.6017%" y="389" width="0.0311%" height="15" fill="rgb(229,23,39)" fg:x="2845" fg:w="1"/><text x="88.8517%" y="399.50"></text></g><g><title>mem_cgroup_charge_statistics.constprop.0 (2 samples, 0.06%)</title><rect x="88.6328%" y="389" width="0.0623%" height="15" fill="rgb(206,12,3)" fg:x="2846" fg:w="2"/><text x="88.8828%" y="399.50"></text></g><g><title>arch_local_irq_enable (2 samples, 0.06%)</title><rect x="88.9754%" y="373" width="0.0623%" height="15" fill="rgb(252,226,20)" fg:x="2857" fg:w="2"/><text x="89.2254%" y="383.50"></text></g><g><title>charge_memcg (28 samples, 0.87%)</title><rect x="88.1968%" y="405" width="0.8720%" height="15" fill="rgb(216,123,35)" fg:x="2832" fg:w="28"/><text x="88.4468%" y="415.50"></text></g><g><title>try_charge_memcg (12 samples, 0.37%)</title><rect x="88.6951%" y="389" width="0.3737%" height="15" fill="rgb(212,68,40)" fg:x="2848" fg:w="12"/><text x="88.9451%" y="399.50"></text></g><g><title>page_counter_try_charge (1 samples, 0.03%)</title><rect x="89.0377%" y="373" width="0.0311%" height="15" fill="rgb(254,125,32)" fg:x="2859" fg:w="1"/><text x="89.2877%" y="383.50"></text></g><g><title>get_mem_cgroup_from_mm (3 samples, 0.09%)</title><rect x="89.0688%" y="405" width="0.0934%" height="15" fill="rgb(253,97,22)" fg:x="2860" fg:w="3"/><text x="89.3188%" y="415.50"></text></g><g><title>mem_cgroup_charge_statistics.constprop.0 (1 samples, 0.03%)</title><rect x="89.1623%" y="405" width="0.0311%" height="15" fill="rgb(241,101,14)" fg:x="2863" fg:w="1"/><text x="89.4123%" y="415.50"></text></g><g><title>__mem_cgroup_charge (33 samples, 1.03%)</title><rect x="88.1968%" y="421" width="1.0277%" height="15" fill="rgb(238,103,29)" fg:x="2832" fg:w="33"/><text x="88.4468%" y="431.50"></text></g><g><title>try_charge_memcg (1 samples, 0.03%)</title><rect x="89.1934%" y="405" width="0.0311%" height="15" fill="rgb(233,195,47)" fg:x="2864" fg:w="1"/><text x="89.4434%" y="415.50"></text></g><g><title>__next_zones_zonelist (1 samples, 0.03%)</title><rect x="89.4114%" y="389" width="0.0311%" height="15" fill="rgb(246,218,30)" fg:x="2871" fg:w="1"/><text x="89.6614%" y="399.50"></text></g><g><title>__zone_watermark_ok (1 samples, 0.03%)</title><rect x="89.5983%" y="373" width="0.0311%" height="15" fill="rgb(219,145,47)" fg:x="2877" fg:w="1"/><text x="89.8483%" y="383.50"></text></g><g><title>clear_page_erms (16 samples, 0.50%)</title><rect x="89.6294%" y="373" width="0.4983%" height="15" fill="rgb(243,12,26)" fg:x="2878" fg:w="16"/><text x="89.8794%" y="383.50"></text></g><g><title>get_page_from_freelist (26 samples, 0.81%)</title><rect x="89.4425%" y="389" width="0.8097%" height="15" fill="rgb(214,87,16)" fg:x="2872" fg:w="26"/><text x="89.6925%" y="399.50"></text></g><g><title>rmqueue (4 samples, 0.12%)</title><rect x="90.1277%" y="373" width="0.1246%" height="15" fill="rgb(208,99,42)" fg:x="2894" fg:w="4"/><text x="90.3777%" y="383.50"></text></g><g><title>rmqueue_bulk (2 samples, 0.06%)</title><rect x="90.1900%" y="357" width="0.0623%" height="15" fill="rgb(253,99,2)" fg:x="2896" fg:w="2"/><text x="90.4400%" y="367.50"></text></g><g><title>__alloc_pages (31 samples, 0.97%)</title><rect x="89.3180%" y="405" width="0.9654%" height="15" fill="rgb(220,168,23)" fg:x="2868" fg:w="31"/><text x="89.5680%" y="415.50"></text></g><g><title>kernel_init_free_pages.part.0 (1 samples, 0.03%)</title><rect x="90.2523%" y="389" width="0.0311%" height="15" fill="rgb(242,38,24)" fg:x="2898" fg:w="1"/><text x="90.5023%" y="399.50"></text></g><g><title>alloc_pages_vma (35 samples, 1.09%)</title><rect x="89.2245%" y="421" width="1.0900%" height="15" fill="rgb(225,182,9)" fg:x="2865" fg:w="35"/><text x="89.4745%" y="431.50"></text></g><g><title>should_fail_alloc_page (1 samples, 0.03%)</title><rect x="90.2834%" y="405" width="0.0311%" height="15" fill="rgb(243,178,37)" fg:x="2899" fg:w="1"/><text x="90.5334%" y="415.50"></text></g><g><title>kthread_blkcg (1 samples, 0.03%)</title><rect x="90.3145%" y="421" width="0.0311%" height="15" fill="rgb(232,139,19)" fg:x="2900" fg:w="1"/><text x="90.5645%" y="431.50"></text></g><g><title>__mod_zone_page_state (1 samples, 0.03%)</title><rect x="90.3768%" y="373" width="0.0311%" height="15" fill="rgb(225,201,24)" fg:x="2902" fg:w="1"/><text x="90.6268%" y="383.50"></text></g><g><title>__mod_lruvec_state (2 samples, 0.06%)</title><rect x="90.5325%" y="357" width="0.0623%" height="15" fill="rgb(221,47,46)" fg:x="2907" fg:w="2"/><text x="90.7825%" y="367.50"></text></g><g><title>__mod_memcg_lruvec_state (1 samples, 0.03%)</title><rect x="90.5637%" y="341" width="0.0311%" height="15" fill="rgb(249,23,13)" fg:x="2908" fg:w="1"/><text x="90.8137%" y="351.50"></text></g><g><title>__pagevec_lru_add_fn (7 samples, 0.22%)</title><rect x="90.4080%" y="373" width="0.2180%" height="15" fill="rgb(219,9,5)" fg:x="2903" fg:w="7"/><text x="90.6580%" y="383.50"></text></g><g><title>__mod_memcg_lruvec_state (1 samples, 0.03%)</title><rect x="90.5948%" y="357" width="0.0311%" height="15" fill="rgb(254,171,16)" fg:x="2909" fg:w="1"/><text x="90.8448%" y="367.50"></text></g><g><title>page_mapping (2 samples, 0.06%)</title><rect x="90.6260%" y="373" width="0.0623%" height="15" fill="rgb(230,171,20)" fg:x="2910" fg:w="2"/><text x="90.8760%" y="383.50"></text></g><g><title>__pagevec_lru_add (11 samples, 0.34%)</title><rect x="90.3768%" y="389" width="0.3426%" height="15" fill="rgb(210,71,41)" fg:x="2902" fg:w="11"/><text x="90.6268%" y="399.50"></text></g><g><title>release_pages (1 samples, 0.03%)</title><rect x="90.6883%" y="373" width="0.0311%" height="15" fill="rgb(206,173,20)" fg:x="2912" fg:w="1"/><text x="90.9383%" y="383.50"></text></g><g><title>lru_cache_add_inactive_or_unevictable (13 samples, 0.40%)</title><rect x="90.3457%" y="421" width="0.4049%" height="15" fill="rgb(233,88,34)" fg:x="2901" fg:w="13"/><text x="90.5957%" y="431.50"></text></g><g><title>lru_cache_add (13 samples, 0.40%)</title><rect x="90.3457%" y="405" width="0.4049%" height="15" fill="rgb(223,209,46)" fg:x="2901" fg:w="13"/><text x="90.5957%" y="415.50"></text></g><g><title>release_pages (1 samples, 0.03%)</title><rect x="90.7194%" y="389" width="0.0311%" height="15" fill="rgb(250,43,18)" fg:x="2913" fg:w="1"/><text x="90.9694%" y="399.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.03%)</title><rect x="90.7505%" y="389" width="0.0311%" height="15" fill="rgb(208,13,10)" fg:x="2914" fg:w="1"/><text x="91.0005%" y="399.50"></text></g><g><title>__mod_node_page_state (1 samples, 0.03%)</title><rect x="90.7505%" y="373" width="0.0311%" height="15" fill="rgb(212,200,36)" fg:x="2914" fg:w="1"/><text x="91.0005%" y="383.50"></text></g><g><title>__mod_lruvec_page_state (2 samples, 0.06%)</title><rect x="90.7505%" y="405" width="0.0623%" height="15" fill="rgb(225,90,30)" fg:x="2914" fg:w="2"/><text x="91.0005%" y="415.50"></text></g><g><title>__mod_memcg_lruvec_state (1 samples, 0.03%)</title><rect x="90.7817%" y="389" width="0.0311%" height="15" fill="rgb(236,182,39)" fg:x="2915" fg:w="1"/><text x="91.0317%" y="399.50"></text></g><g><title>do_user_addr_fault (110 samples, 3.43%)</title><rect x="87.4182%" y="501" width="3.4257%" height="15" fill="rgb(212,144,35)" fg:x="2807" fg:w="110"/><text x="87.6682%" y="511.50">do_..</text></g><g><title>handle_mm_fault (108 samples, 3.36%)</title><rect x="87.4805%" y="485" width="3.3634%" height="15" fill="rgb(228,63,44)" fg:x="2809" fg:w="108"/><text x="87.7305%" y="495.50">han..</text></g><g><title>__handle_mm_fault (104 samples, 3.24%)</title><rect x="87.6051%" y="469" width="3.2389%" height="15" fill="rgb(228,109,6)" fg:x="2813" fg:w="104"/><text x="87.8551%" y="479.50">__h..</text></g><g><title>handle_pte_fault (101 samples, 3.15%)</title><rect x="87.6985%" y="453" width="3.1454%" height="15" fill="rgb(238,117,24)" fg:x="2816" fg:w="101"/><text x="87.9485%" y="463.50">han..</text></g><g><title>do_anonymous_page (95 samples, 2.96%)</title><rect x="87.8854%" y="437" width="2.9586%" height="15" fill="rgb(242,26,26)" fg:x="2822" fg:w="95"/><text x="88.1354%" y="447.50">do_..</text></g><g><title>page_add_new_anon_rmap (3 samples, 0.09%)</title><rect x="90.7505%" y="421" width="0.0934%" height="15" fill="rgb(221,92,48)" fg:x="2914" fg:w="3"/><text x="91.0005%" y="431.50"></text></g><g><title>__page_set_anon_rmap (1 samples, 0.03%)</title><rect x="90.8128%" y="405" width="0.0311%" height="15" fill="rgb(209,209,32)" fg:x="2916" fg:w="1"/><text x="91.0628%" y="415.50"></text></g><g><title>down_read_trylock (1 samples, 0.03%)</title><rect x="90.8440%" y="501" width="0.0311%" height="15" fill="rgb(221,70,22)" fg:x="2917" fg:w="1"/><text x="91.0940%" y="511.50"></text></g><g><title>exit_to_user_mode_prepare (1 samples, 0.03%)</title><rect x="90.8751%" y="469" width="0.0311%" height="15" fill="rgb(248,145,5)" fg:x="2918" fg:w="1"/><text x="91.1251%" y="479.50"></text></g><g><title>irqentry_exit (2 samples, 0.06%)</title><rect x="90.8751%" y="501" width="0.0623%" height="15" fill="rgb(226,116,26)" fg:x="2918" fg:w="2"/><text x="91.1251%" y="511.50"></text></g><g><title>irqentry_exit_to_user_mode (2 samples, 0.06%)</title><rect x="90.8751%" y="485" width="0.0623%" height="15" fill="rgb(244,5,17)" fg:x="2918" fg:w="2"/><text x="91.1251%" y="495.50"></text></g><g><title>fpregs_assert_state_consistent (1 samples, 0.03%)</title><rect x="90.9063%" y="469" width="0.0311%" height="15" fill="rgb(252,159,33)" fg:x="2919" fg:w="1"/><text x="91.1563%" y="479.50"></text></g><g><title>asm_exc_page_fault (117 samples, 3.64%)</title><rect x="87.3248%" y="533" width="3.6437%" height="15" fill="rgb(206,71,0)" fg:x="2804" fg:w="117"/><text x="87.5748%" y="543.50">asm_..</text></g><g><title>exc_page_fault (114 samples, 3.55%)</title><rect x="87.4182%" y="517" width="3.5503%" height="15" fill="rgb(233,118,54)" fg:x="2807" fg:w="114"/><text x="87.6682%" y="527.50">exc_..</text></g><g><title>up_read (1 samples, 0.03%)</title><rect x="90.9374%" y="501" width="0.0311%" height="15" fill="rgb(234,83,48)" fg:x="2920" fg:w="1"/><text x="91.1874%" y="511.50"></text></g><g><title>__rseq_handle_notify_resume (1 samples, 0.03%)</title><rect x="90.9685%" y="437" width="0.0311%" height="15" fill="rgb(228,3,54)" fg:x="2921" fg:w="1"/><text x="91.2185%" y="447.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (6 samples, 0.19%)</title><rect x="90.9685%" y="533" width="0.1869%" height="15" fill="rgb(226,155,13)" fg:x="2921" fg:w="6"/><text x="91.2185%" y="543.50"></text></g><g><title>sysvec_apic_timer_interrupt (6 samples, 0.19%)</title><rect x="90.9685%" y="517" width="0.1869%" height="15" fill="rgb(241,28,37)" fg:x="2921" fg:w="6"/><text x="91.2185%" y="527.50"></text></g><g><title>irqentry_exit (6 samples, 0.19%)</title><rect x="90.9685%" y="501" width="0.1869%" height="15" fill="rgb(233,93,10)" fg:x="2921" fg:w="6"/><text x="91.2185%" y="511.50"></text></g><g><title>irqentry_exit_to_user_mode (6 samples, 0.19%)</title><rect x="90.9685%" y="485" width="0.1869%" height="15" fill="rgb(225,113,19)" fg:x="2921" fg:w="6"/><text x="91.2185%" y="495.50"></text></g><g><title>exit_to_user_mode_prepare (6 samples, 0.19%)</title><rect x="90.9685%" y="469" width="0.1869%" height="15" fill="rgb(241,2,18)" fg:x="2921" fg:w="6"/><text x="91.2185%" y="479.50"></text></g><g><title>exit_to_user_mode_loop (6 samples, 0.19%)</title><rect x="90.9685%" y="453" width="0.1869%" height="15" fill="rgb(228,207,21)" fg:x="2921" fg:w="6"/><text x="91.2185%" y="463.50"></text></g><g><title>schedule (5 samples, 0.16%)</title><rect x="90.9997%" y="437" width="0.1557%" height="15" fill="rgb(213,211,35)" fg:x="2922" fg:w="5"/><text x="91.2497%" y="447.50"></text></g><g><title>__schedule (5 samples, 0.16%)</title><rect x="90.9997%" y="421" width="0.1557%" height="15" fill="rgb(209,83,10)" fg:x="2922" fg:w="5"/><text x="91.2497%" y="431.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.16%)</title><rect x="90.9997%" y="405" width="0.1557%" height="15" fill="rgb(209,164,1)" fg:x="2922" fg:w="5"/><text x="91.2497%" y="415.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.16%)</title><rect x="90.9997%" y="389" width="0.1557%" height="15" fill="rgb(213,184,43)" fg:x="2922" fg:w="5"/><text x="91.2497%" y="399.50"></text></g><g><title>x86_pmu_enable (5 samples, 0.16%)</title><rect x="90.9997%" y="373" width="0.1557%" height="15" fill="rgb(231,61,34)" fg:x="2922" fg:w="5"/><text x="91.2497%" y="383.50"></text></g><g><title>intel_pmu_enable_all (5 samples, 0.16%)</title><rect x="90.9997%" y="357" width="0.1557%" height="15" fill="rgb(235,75,3)" fg:x="2922" fg:w="5"/><text x="91.2497%" y="367.50"></text></g><g><title>native_write_msr (5 samples, 0.16%)</title><rect x="90.9997%" y="341" width="0.1557%" height="15" fill="rgb(220,106,47)" fg:x="2922" fg:w="5"/><text x="91.2497%" y="351.50"></text></g><g><title>&lt;(ExtendA,ExtendB) as core::iter::traits::collect::Extend&lt;(A,B)&gt;&gt;::extend::extend::{{closure}} (192 samples, 5.98%)</title><rect x="85.7677%" y="597" width="5.9794%" height="15" fill="rgb(210,196,33)" fg:x="2754" fg:w="192"/><text x="86.0177%" y="607.50">&lt;(Extend..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend_one (190 samples, 5.92%)</title><rect x="85.8300%" y="581" width="5.9172%" height="15" fill="rgb(229,154,42)" fg:x="2756" fg:w="190"/><text x="86.0800%" y="591.50">&lt;alloc::..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (186 samples, 5.79%)</title><rect x="85.9545%" y="565" width="5.7926%" height="15" fill="rgb(228,114,26)" fg:x="2760" fg:w="186"/><text x="86.2045%" y="575.50">alloc::..</text></g><g><title>core::ptr::write (174 samples, 5.42%)</title><rect x="86.3282%" y="549" width="5.4189%" height="15" fill="rgb(208,144,1)" fg:x="2772" fg:w="174"/><text x="86.5782%" y="559.50">core::p..</text></g><g><title>sync_regs (19 samples, 0.59%)</title><rect x="91.1554%" y="533" width="0.5917%" height="15" fill="rgb(239,112,37)" fg:x="2927" fg:w="19"/><text x="91.4054%" y="543.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (273 samples, 8.50%)</title><rect x="85.7677%" y="613" width="8.5020%" height="15" fill="rgb(210,96,50)" fg:x="2754" fg:w="273"/><text x="86.0177%" y="623.50">core::iter::..</text></g><g><title>test_mmmh::main::{{closure}} (81 samples, 2.52%)</title><rect x="91.7471%" y="597" width="2.5226%" height="15" fill="rgb(222,178,2)" fg:x="2946" fg:w="81"/><text x="91.9971%" y="607.50">te..</text></g><g><title>test_mmmh::Product::into_subs (76 samples, 2.37%)</title><rect x="91.9028%" y="581" width="2.3669%" height="15" fill="rgb(226,74,18)" fg:x="2951" fg:w="76"/><text x="92.1528%" y="591.50">te..</text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="94.2386%" y="565" width="0.0311%" height="15" fill="rgb(225,67,54)" fg:x="3026" fg:w="1"/><text x="94.4886%" y="575.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="94.2386%" y="549" width="0.0311%" height="15" fill="rgb(251,92,32)" fg:x="3026" fg:w="1"/><text x="94.4886%" y="559.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="94.2386%" y="533" width="0.0311%" height="15" fill="rgb(228,149,22)" fg:x="3026" fg:w="1"/><text x="94.4886%" y="543.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.03%)</title><rect x="94.2386%" y="517" width="0.0311%" height="15" fill="rgb(243,54,13)" fg:x="3026" fg:w="1"/><text x="94.4886%" y="527.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.03%)</title><rect x="94.2386%" y="501" width="0.0311%" height="15" fill="rgb(243,180,28)" fg:x="3026" fg:w="1"/><text x="94.4886%" y="511.50"></text></g><g><title>tick_sched_timer (1 samples, 0.03%)</title><rect x="94.2386%" y="485" width="0.0311%" height="15" fill="rgb(208,167,24)" fg:x="3026" fg:w="1"/><text x="94.4886%" y="495.50"></text></g><g><title>tick_sched_handle (1 samples, 0.03%)</title><rect x="94.2386%" y="469" width="0.0311%" height="15" fill="rgb(245,73,45)" fg:x="3026" fg:w="1"/><text x="94.4886%" y="479.50"></text></g><g><title>update_process_times (1 samples, 0.03%)</title><rect x="94.2386%" y="453" width="0.0311%" height="15" fill="rgb(237,203,48)" fg:x="3026" fg:w="1"/><text x="94.4886%" y="463.50"></text></g><g><title>scheduler_tick (1 samples, 0.03%)</title><rect x="94.2386%" y="437" width="0.0311%" height="15" fill="rgb(211,197,16)" fg:x="3026" fg:w="1"/><text x="94.4886%" y="447.50"></text></g><g><title>arch_scale_freq_tick (1 samples, 0.03%)</title><rect x="94.2386%" y="421" width="0.0311%" height="15" fill="rgb(243,99,51)" fg:x="3026" fg:w="1"/><text x="94.4886%" y="431.50"></text></g><g><title>native_read_msr (1 samples, 0.03%)</title><rect x="94.2386%" y="405" width="0.0311%" height="15" fill="rgb(215,123,29)" fg:x="3026" fg:w="1"/><text x="94.4886%" y="415.50"></text></g><g><title>page_remove_rmap (2 samples, 0.06%)</title><rect x="94.3320%" y="389" width="0.0623%" height="15" fill="rgb(239,186,37)" fg:x="3029" fg:w="2"/><text x="94.5820%" y="399.50"></text></g><g><title>__mod_lruvec_state (4 samples, 0.12%)</title><rect x="94.3943%" y="341" width="0.1246%" height="15" fill="rgb(252,136,39)" fg:x="3031" fg:w="4"/><text x="94.6443%" y="351.50"></text></g><g><title>__mod_memcg_lruvec_state (3 samples, 0.09%)</title><rect x="94.4254%" y="325" width="0.0934%" height="15" fill="rgb(223,213,32)" fg:x="3032" fg:w="3"/><text x="94.6754%" y="335.50"></text></g><g><title>free_unref_page_list (9 samples, 0.28%)</title><rect x="94.5188%" y="341" width="0.2803%" height="15" fill="rgb(233,115,5)" fg:x="3035" fg:w="9"/><text x="94.7688%" y="351.50"></text></g><g><title>free_unref_page_commit.constprop.0 (9 samples, 0.28%)</title><rect x="94.5188%" y="325" width="0.2803%" height="15" fill="rgb(207,226,44)" fg:x="3035" fg:w="9"/><text x="94.7688%" y="335.50"></text></g><g><title>free_pcppages_bulk (8 samples, 0.25%)</title><rect x="94.5500%" y="309" width="0.2491%" height="15" fill="rgb(208,126,0)" fg:x="3036" fg:w="8"/><text x="94.8000%" y="319.50"></text></g><g><title>__free_one_page (4 samples, 0.12%)</title><rect x="94.6746%" y="293" width="0.1246%" height="15" fill="rgb(244,66,21)" fg:x="3040" fg:w="4"/><text x="94.9246%" y="303.50"></text></g><g><title>free_pages_and_swap_cache (14 samples, 0.44%)</title><rect x="94.3943%" y="373" width="0.4360%" height="15" fill="rgb(222,97,12)" fg:x="3031" fg:w="14"/><text x="94.6443%" y="383.50"></text></g><g><title>release_pages (14 samples, 0.44%)</title><rect x="94.3943%" y="357" width="0.4360%" height="15" fill="rgb(219,213,19)" fg:x="3031" fg:w="14"/><text x="94.6443%" y="367.50"></text></g><g><title>mem_cgroup_update_lru_size (1 samples, 0.03%)</title><rect x="94.7991%" y="341" width="0.0311%" height="15" fill="rgb(252,169,30)" fg:x="3044" fg:w="1"/><text x="95.0491%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::unzip (299 samples, 9.31%)</title><rect x="85.6431%" y="677" width="9.3117%" height="15" fill="rgb(206,32,51)" fg:x="2750" fg:w="299"/><text x="85.8931%" y="687.50">core::iter::t..</text></g><g><title>&lt;(ExtendA,ExtendB) as core::iter::traits::collect::Extend&lt;(A,B)&gt;&gt;::extend (299 samples, 9.31%)</title><rect x="85.6431%" y="661" width="9.3117%" height="15" fill="rgb(250,172,42)" fg:x="2750" fg:w="299"/><text x="85.8931%" y="671.50">&lt;(ExtendA,Ext..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (299 samples, 9.31%)</title><rect x="85.6431%" y="645" width="9.3117%" height="15" fill="rgb(209,34,43)" fg:x="2750" fg:w="299"/><text x="85.8931%" y="655.50">&lt;core::iter::..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (299 samples, 9.31%)</title><rect x="85.6431%" y="629" width="9.3117%" height="15" fill="rgb(223,11,35)" fg:x="2750" fg:w="299"/><text x="85.8931%" y="639.50">core::iter::t..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;test_mmmh::Product&gt;&gt; (22 samples, 0.69%)</title><rect x="94.2697%" y="613" width="0.6851%" height="15" fill="rgb(251,219,26)" fg:x="3027" fg:w="22"/><text x="94.5197%" y="623.50"></text></g><g><title>__GI___libc_free (22 samples, 0.69%)</title><rect x="94.2697%" y="597" width="0.6851%" height="15" fill="rgb(231,119,3)" fg:x="3027" fg:w="22"/><text x="94.5197%" y="607.50"></text></g><g><title>__GI___munmap (22 samples, 0.69%)</title><rect x="94.2697%" y="581" width="0.6851%" height="15" fill="rgb(216,97,11)" fg:x="3027" fg:w="22"/><text x="94.5197%" y="591.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (22 samples, 0.69%)</title><rect x="94.2697%" y="565" width="0.6851%" height="15" fill="rgb(223,59,9)" fg:x="3027" fg:w="22"/><text x="94.5197%" y="575.50"></text></g><g><title>do_syscall_64 (22 samples, 0.69%)</title><rect x="94.2697%" y="549" width="0.6851%" height="15" fill="rgb(233,93,31)" fg:x="3027" fg:w="22"/><text x="94.5197%" y="559.50"></text></g><g><title>__x64_sys_munmap (22 samples, 0.69%)</title><rect x="94.2697%" y="533" width="0.6851%" height="15" fill="rgb(239,81,33)" fg:x="3027" fg:w="22"/><text x="94.5197%" y="543.50"></text></g><g><title>__vm_munmap (22 samples, 0.69%)</title><rect x="94.2697%" y="517" width="0.6851%" height="15" fill="rgb(213,120,34)" fg:x="3027" fg:w="22"/><text x="94.5197%" y="527.50"></text></g><g><title>__do_munmap (22 samples, 0.69%)</title><rect x="94.2697%" y="501" width="0.6851%" height="15" fill="rgb(243,49,53)" fg:x="3027" fg:w="22"/><text x="94.5197%" y="511.50"></text></g><g><title>unmap_region (22 samples, 0.69%)</title><rect x="94.2697%" y="485" width="0.6851%" height="15" fill="rgb(247,216,33)" fg:x="3027" fg:w="22"/><text x="94.5197%" y="495.50"></text></g><g><title>unmap_vmas (22 samples, 0.69%)</title><rect x="94.2697%" y="469" width="0.6851%" height="15" fill="rgb(226,26,14)" fg:x="3027" fg:w="22"/><text x="94.5197%" y="479.50"></text></g><g><title>unmap_single_vma (22 samples, 0.69%)</title><rect x="94.2697%" y="453" width="0.6851%" height="15" fill="rgb(215,49,53)" fg:x="3027" fg:w="22"/><text x="94.5197%" y="463.50"></text></g><g><title>unmap_page_range (22 samples, 0.69%)</title><rect x="94.2697%" y="437" width="0.6851%" height="15" fill="rgb(245,162,40)" fg:x="3027" fg:w="22"/><text x="94.5197%" y="447.50"></text></g><g><title>zap_pmd_range.isra.0 (22 samples, 0.69%)</title><rect x="94.2697%" y="421" width="0.6851%" height="15" fill="rgb(229,68,17)" fg:x="3027" fg:w="22"/><text x="94.5197%" y="431.50"></text></g><g><title>zap_pte_range (22 samples, 0.69%)</title><rect x="94.2697%" y="405" width="0.6851%" height="15" fill="rgb(213,182,10)" fg:x="3027" fg:w="22"/><text x="94.5197%" y="415.50"></text></g><g><title>tlb_flush_mmu (18 samples, 0.56%)</title><rect x="94.3943%" y="389" width="0.5606%" height="15" fill="rgb(245,125,30)" fg:x="3031" fg:w="18"/><text x="94.6443%" y="399.50"></text></g><g><title>free_swap_cache (4 samples, 0.12%)</title><rect x="94.8303%" y="373" width="0.1246%" height="15" fill="rgb(232,202,2)" fg:x="3045" fg:w="4"/><text x="95.0803%" y="383.50"></text></g><g><title>asm_sysvec_irq_work (1 samples, 0.03%)</title><rect x="94.9548%" y="293" width="0.0311%" height="15" fill="rgb(237,140,51)" fg:x="3049" fg:w="1"/><text x="95.2048%" y="303.50"></text></g><g><title>__libc_start_main_impl (1,128 samples, 35.13%)</title><rect x="59.9813%" y="933" width="35.1292%" height="15" fill="rgb(236,157,25)" fg:x="1926" fg:w="1128"/><text x="60.2313%" y="943.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (1,128 samples, 35.13%)</title><rect x="59.9813%" y="917" width="35.1292%" height="15" fill="rgb(219,209,0)" fg:x="1926" fg:w="1128"/><text x="60.2313%" y="927.50">__libc_start_call_main</text></g><g><title>main (1,128 samples, 35.13%)</title><rect x="59.9813%" y="901" width="35.1292%" height="15" fill="rgb(240,116,54)" fg:x="1926" fg:w="1128"/><text x="60.2313%" y="911.50">main</text></g><g><title>std::rt::lang_start_internal (1,128 samples, 35.13%)</title><rect x="59.9813%" y="885" width="35.1292%" height="15" fill="rgb(216,10,36)" fg:x="1926" fg:w="1128"/><text x="60.2313%" y="895.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,128 samples, 35.13%)</title><rect x="59.9813%" y="869" width="35.1292%" height="15" fill="rgb(222,72,44)" fg:x="1926" fg:w="1128"/><text x="60.2313%" y="879.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,128 samples, 35.13%)</title><rect x="59.9813%" y="853" width="35.1292%" height="15" fill="rgb(232,159,9)" fg:x="1926" fg:w="1128"/><text x="60.2313%" y="863.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,128 samples, 35.13%)</title><rect x="59.9813%" y="837" width="35.1292%" height="15" fill="rgb(210,39,32)" fg:x="1926" fg:w="1128"/><text x="60.2313%" y="847.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,127 samples, 35.10%)</title><rect x="60.0125%" y="821" width="35.0981%" height="15" fill="rgb(216,194,45)" fg:x="1927" fg:w="1127"/><text x="60.2625%" y="831.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,127 samples, 35.10%)</title><rect x="60.0125%" y="805" width="35.0981%" height="15" fill="rgb(218,18,35)" fg:x="1927" fg:w="1127"/><text x="60.2625%" y="815.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,127 samples, 35.10%)</title><rect x="60.0125%" y="789" width="35.0981%" height="15" fill="rgb(207,83,51)" fg:x="1927" fg:w="1127"/><text x="60.2625%" y="799.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,127 samples, 35.10%)</title><rect x="60.0125%" y="773" width="35.0981%" height="15" fill="rgb(225,63,43)" fg:x="1927" fg:w="1127"/><text x="60.2625%" y="783.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,127 samples, 35.10%)</title><rect x="60.0125%" y="757" width="35.0981%" height="15" fill="rgb(207,57,36)" fg:x="1927" fg:w="1127"/><text x="60.2625%" y="767.50">core::ops::function::impls::&lt;impl core::ops::function::Fn..</text></g><g><title>std::rt::lang_start::{{closure}} (1,127 samples, 35.10%)</title><rect x="60.0125%" y="741" width="35.0981%" height="15" fill="rgb(216,99,33)" fg:x="1927" fg:w="1127"/><text x="60.2625%" y="751.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,127 samples, 35.10%)</title><rect x="60.0125%" y="725" width="35.0981%" height="15" fill="rgb(225,42,16)" fg:x="1927" fg:w="1127"/><text x="60.2625%" y="735.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (1,127 samples, 35.10%)</title><rect x="60.0125%" y="709" width="35.0981%" height="15" fill="rgb(220,201,45)" fg:x="1927" fg:w="1127"/><text x="60.2625%" y="719.50">core::ops::function::FnOnce::call_once</text></g><g><title>test_mmmh::main (1,127 samples, 35.10%)</title><rect x="60.0125%" y="693" width="35.0981%" height="15" fill="rgb(225,33,4)" fg:x="1927" fg:w="1127"/><text x="60.2625%" y="703.50">test_mmmh::main</text></g><g><title>test_mmmh::update_3 (5 samples, 0.16%)</title><rect x="94.9548%" y="677" width="0.1557%" height="15" fill="rgb(224,33,50)" fg:x="3049" fg:w="5"/><text x="95.2048%" y="687.50"></text></g><g><title>crossbeam_utils::thread::scope (5 samples, 0.16%)</title><rect x="94.9548%" y="661" width="0.1557%" height="15" fill="rgb(246,198,51)" fg:x="3049" fg:w="5"/><text x="95.2048%" y="671.50"></text></g><g><title>std::panic::catch_unwind (5 samples, 0.16%)</title><rect x="94.9548%" y="645" width="0.1557%" height="15" fill="rgb(205,22,4)" fg:x="3049" fg:w="5"/><text x="95.2048%" y="655.50"></text></g><g><title>std::panicking::try (5 samples, 0.16%)</title><rect x="94.9548%" y="629" width="0.1557%" height="15" fill="rgb(206,3,8)" fg:x="3049" fg:w="5"/><text x="95.2048%" y="639.50"></text></g><g><title>std::panicking::try::do_call (5 samples, 0.16%)</title><rect x="94.9548%" y="613" width="0.1557%" height="15" fill="rgb(251,23,15)" fg:x="3049" fg:w="5"/><text x="95.2048%" y="623.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (5 samples, 0.16%)</title><rect x="94.9548%" y="597" width="0.1557%" height="15" fill="rgb(252,88,28)" fg:x="3049" fg:w="5"/><text x="95.2048%" y="607.50"></text></g><g><title>crossbeam_utils::thread::scope::{{closure}} (5 samples, 0.16%)</title><rect x="94.9548%" y="581" width="0.1557%" height="15" fill="rgb(212,127,14)" fg:x="3049" fg:w="5"/><text x="95.2048%" y="591.50"></text></g><g><title>test_mmmh::update_3::{{closure}} (5 samples, 0.16%)</title><rect x="94.9548%" y="565" width="0.1557%" height="15" fill="rgb(247,145,37)" fg:x="3049" fg:w="5"/><text x="95.2048%" y="575.50"></text></g><g><title>crossbeam_utils::thread::ScopedJoinHandle&lt;T&gt;::join (5 samples, 0.16%)</title><rect x="94.9548%" y="549" width="0.1557%" height="15" fill="rgb(209,117,53)" fg:x="3049" fg:w="5"/><text x="95.2048%" y="559.50"></text></g><g><title>std::thread::JoinHandle&lt;T&gt;::join (5 samples, 0.16%)</title><rect x="94.9548%" y="533" width="0.1557%" height="15" fill="rgb(212,90,42)" fg:x="3049" fg:w="5"/><text x="95.2048%" y="543.50"></text></g><g><title>std::thread::JoinInner&lt;T&gt;::join (5 samples, 0.16%)</title><rect x="94.9548%" y="517" width="0.1557%" height="15" fill="rgb(218,164,37)" fg:x="3049" fg:w="5"/><text x="95.2048%" y="527.50"></text></g><g><title>std::sys::unix::thread::Thread::join (5 samples, 0.16%)</title><rect x="94.9548%" y="501" width="0.1557%" height="15" fill="rgb(246,65,34)" fg:x="3049" fg:w="5"/><text x="95.2048%" y="511.50"></text></g><g><title>__pthread_clockjoin_ex (5 samples, 0.16%)</title><rect x="94.9548%" y="485" width="0.1557%" height="15" fill="rgb(231,100,33)" fg:x="3049" fg:w="5"/><text x="95.2048%" y="495.50"></text></g><g><title>__GI___futex_abstimed_wait_cancelable64 (5 samples, 0.16%)</title><rect x="94.9548%" y="469" width="0.1557%" height="15" fill="rgb(228,126,14)" fg:x="3049" fg:w="5"/><text x="95.2048%" y="479.50"></text></g><g><title>__futex_abstimed_wait_common (5 samples, 0.16%)</title><rect x="94.9548%" y="453" width="0.1557%" height="15" fill="rgb(215,173,21)" fg:x="3049" fg:w="5"/><text x="95.2048%" y="463.50"></text></g><g><title>__futex_abstimed_wait_common64 (5 samples, 0.16%)</title><rect x="94.9548%" y="437" width="0.1557%" height="15" fill="rgb(210,6,40)" fg:x="3049" fg:w="5"/><text x="95.2048%" y="447.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 0.16%)</title><rect x="94.9548%" y="421" width="0.1557%" height="15" fill="rgb(212,48,18)" fg:x="3049" fg:w="5"/><text x="95.2048%" y="431.50"></text></g><g><title>do_syscall_64 (5 samples, 0.16%)</title><rect x="94.9548%" y="405" width="0.1557%" height="15" fill="rgb(230,214,11)" fg:x="3049" fg:w="5"/><text x="95.2048%" y="415.50"></text></g><g><title>__x64_sys_futex (5 samples, 0.16%)</title><rect x="94.9548%" y="389" width="0.1557%" height="15" fill="rgb(254,105,39)" fg:x="3049" fg:w="5"/><text x="95.2048%" y="399.50"></text></g><g><title>do_futex (5 samples, 0.16%)</title><rect x="94.9548%" y="373" width="0.1557%" height="15" fill="rgb(245,158,5)" fg:x="3049" fg:w="5"/><text x="95.2048%" y="383.50"></text></g><g><title>futex_wait (5 samples, 0.16%)</title><rect x="94.9548%" y="357" width="0.1557%" height="15" fill="rgb(249,208,11)" fg:x="3049" fg:w="5"/><text x="95.2048%" y="367.50"></text></g><g><title>futex_wait_queue_me (5 samples, 0.16%)</title><rect x="94.9548%" y="341" width="0.1557%" height="15" fill="rgb(210,39,28)" fg:x="3049" fg:w="5"/><text x="95.2048%" y="351.50"></text></g><g><title>schedule (5 samples, 0.16%)</title><rect x="94.9548%" y="325" width="0.1557%" height="15" fill="rgb(211,56,53)" fg:x="3049" fg:w="5"/><text x="95.2048%" y="335.50"></text></g><g><title>__schedule (5 samples, 0.16%)</title><rect x="94.9548%" y="309" width="0.1557%" height="15" fill="rgb(226,201,30)" fg:x="3049" fg:w="5"/><text x="95.2048%" y="319.50"></text></g><g><title>finish_task_switch.isra.0 (4 samples, 0.12%)</title><rect x="94.9860%" y="293" width="0.1246%" height="15" fill="rgb(239,101,34)" fg:x="3050" fg:w="4"/><text x="95.2360%" y="303.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.12%)</title><rect x="94.9860%" y="277" width="0.1246%" height="15" fill="rgb(226,209,5)" fg:x="3050" fg:w="4"/><text x="95.2360%" y="287.50"></text></g><g><title>x86_pmu_enable (4 samples, 0.12%)</title><rect x="94.9860%" y="261" width="0.1246%" height="15" fill="rgb(250,105,47)" fg:x="3050" fg:w="4"/><text x="95.2360%" y="271.50"></text></g><g><title>intel_pmu_enable_all (4 samples, 0.12%)</title><rect x="94.9860%" y="245" width="0.1246%" height="15" fill="rgb(230,72,3)" fg:x="3050" fg:w="4"/><text x="95.2360%" y="255.50"></text></g><g><title>native_write_msr (4 samples, 0.12%)</title><rect x="94.9860%" y="229" width="0.1246%" height="15" fill="rgb(232,218,39)" fg:x="3050" fg:w="4"/><text x="95.2360%" y="239.50"></text></g><g><title>_start (1,129 samples, 35.16%)</title><rect x="59.9813%" y="949" width="35.1604%" height="15" fill="rgb(248,166,6)" fg:x="1926" fg:w="1129"/><text x="60.2313%" y="959.50">_start</text></g><g><title>asm_exc_page_fault (1 samples, 0.03%)</title><rect x="95.1106%" y="933" width="0.0311%" height="15" fill="rgb(247,89,20)" fg:x="3054" fg:w="1"/><text x="95.3606%" y="943.50"></text></g><g><title>exc_page_fault (1 samples, 0.03%)</title><rect x="95.1106%" y="917" width="0.0311%" height="15" fill="rgb(248,130,54)" fg:x="3054" fg:w="1"/><text x="95.3606%" y="927.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.03%)</title><rect x="95.1106%" y="901" width="0.0311%" height="15" fill="rgb(234,196,4)" fg:x="3054" fg:w="1"/><text x="95.3606%" y="911.50"></text></g><g><title>handle_mm_fault (1 samples, 0.03%)</title><rect x="95.1106%" y="885" width="0.0311%" height="15" fill="rgb(250,143,31)" fg:x="3054" fg:w="1"/><text x="95.3606%" y="895.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.03%)</title><rect x="95.1106%" y="869" width="0.0311%" height="15" fill="rgb(211,110,34)" fg:x="3054" fg:w="1"/><text x="95.3606%" y="879.50"></text></g><g><title>handle_pte_fault (1 samples, 0.03%)</title><rect x="95.1106%" y="853" width="0.0311%" height="15" fill="rgb(215,124,48)" fg:x="3054" fg:w="1"/><text x="95.3606%" y="863.50"></text></g><g><title>do_fault (1 samples, 0.03%)</title><rect x="95.1106%" y="837" width="0.0311%" height="15" fill="rgb(216,46,13)" fg:x="3054" fg:w="1"/><text x="95.3606%" y="847.50"></text></g><g><title>do_read_fault (1 samples, 0.03%)</title><rect x="95.1106%" y="821" width="0.0311%" height="15" fill="rgb(205,184,25)" fg:x="3054" fg:w="1"/><text x="95.3606%" y="831.50"></text></g><g><title>unlock_page (1 samples, 0.03%)</title><rect x="95.1106%" y="805" width="0.0311%" height="15" fill="rgb(228,1,10)" fg:x="3054" fg:w="1"/><text x="95.3606%" y="815.50"></text></g><g><title>asm_exc_page_fault (110 samples, 3.43%)</title><rect x="95.1417%" y="949" width="3.4257%" height="15" fill="rgb(213,116,27)" fg:x="3055" fg:w="110"/><text x="95.3917%" y="959.50">asm..</text></g><g><title>exc_page_fault (1 samples, 0.03%)</title><rect x="98.5363%" y="933" width="0.0311%" height="15" fill="rgb(241,95,50)" fg:x="3164" fg:w="1"/><text x="98.7863%" y="943.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.03%)</title><rect x="98.5363%" y="917" width="0.0311%" height="15" fill="rgb(238,48,32)" fg:x="3164" fg:w="1"/><text x="98.7863%" y="927.50"></text></g><g><title>handle_mm_fault (1 samples, 0.03%)</title><rect x="98.5363%" y="901" width="0.0311%" height="15" fill="rgb(235,113,49)" fg:x="3164" fg:w="1"/><text x="98.7863%" y="911.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.03%)</title><rect x="98.5363%" y="885" width="0.0311%" height="15" fill="rgb(205,127,43)" fg:x="3164" fg:w="1"/><text x="98.7863%" y="895.50"></text></g><g><title>handle_pte_fault (1 samples, 0.03%)</title><rect x="98.5363%" y="869" width="0.0311%" height="15" fill="rgb(250,162,2)" fg:x="3164" fg:w="1"/><text x="98.7863%" y="879.50"></text></g><g><title>do_anonymous_page (1 samples, 0.03%)</title><rect x="98.5363%" y="853" width="0.0311%" height="15" fill="rgb(220,13,41)" fg:x="3164" fg:w="1"/><text x="98.7863%" y="863.50"></text></g><g><title>alloc_pages_vma (1 samples, 0.03%)</title><rect x="98.5363%" y="837" width="0.0311%" height="15" fill="rgb(249,221,25)" fg:x="3164" fg:w="1"/><text x="98.7863%" y="847.50"></text></g><g><title>__alloc_pages (1 samples, 0.03%)</title><rect x="98.5363%" y="821" width="0.0311%" height="15" fill="rgb(215,208,19)" fg:x="3164" fg:w="1"/><text x="98.7863%" y="831.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.03%)</title><rect x="98.5363%" y="805" width="0.0311%" height="15" fill="rgb(236,175,2)" fg:x="3164" fg:w="1"/><text x="98.7863%" y="815.50"></text></g><g><title>rmqueue (1 samples, 0.03%)</title><rect x="98.5363%" y="789" width="0.0311%" height="15" fill="rgb(241,52,2)" fg:x="3164" fg:w="1"/><text x="98.7863%" y="799.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="98.5674%" y="949" width="0.0311%" height="15" fill="rgb(248,140,14)" fg:x="3165" fg:w="1"/><text x="98.8174%" y="959.50"></text></g><g><title>asm_sysvec_call_function (9 samples, 0.28%)</title><rect x="98.5986%" y="949" width="0.2803%" height="15" fill="rgb(253,22,42)" fg:x="3166" fg:w="9"/><text x="98.8486%" y="959.50"></text></g><g><title>__x64_sys_execve (1 samples, 0.03%)</title><rect x="98.8789%" y="917" width="0.0311%" height="15" fill="rgb(234,61,47)" fg:x="3175" fg:w="1"/><text x="99.1289%" y="927.50"></text></g><g><title>do_execveat_common.isra.0 (1 samples, 0.03%)</title><rect x="98.8789%" y="901" width="0.0311%" height="15" fill="rgb(208,226,15)" fg:x="3175" fg:w="1"/><text x="99.1289%" y="911.50"></text></g><g><title>bprm_execve (1 samples, 0.03%)</title><rect x="98.8789%" y="885" width="0.0311%" height="15" fill="rgb(217,221,4)" fg:x="3175" fg:w="1"/><text x="99.1289%" y="895.50"></text></g><g><title>bprm_execve.part.0 (1 samples, 0.03%)</title><rect x="98.8789%" y="869" width="0.0311%" height="15" fill="rgb(212,174,34)" fg:x="3175" fg:w="1"/><text x="99.1289%" y="879.50"></text></g><g><title>exec_binprm (1 samples, 0.03%)</title><rect x="98.8789%" y="853" width="0.0311%" height="15" fill="rgb(253,83,4)" fg:x="3175" fg:w="1"/><text x="99.1289%" y="863.50"></text></g><g><title>search_binary_handler (1 samples, 0.03%)</title><rect x="98.8789%" y="837" width="0.0311%" height="15" fill="rgb(250,195,49)" fg:x="3175" fg:w="1"/><text x="99.1289%" y="847.50"></text></g><g><title>load_elf_binary (1 samples, 0.03%)</title><rect x="98.8789%" y="821" width="0.0311%" height="15" fill="rgb(241,192,25)" fg:x="3175" fg:w="1"/><text x="99.1289%" y="831.50"></text></g><g><title>setup_arg_pages (1 samples, 0.03%)</title><rect x="98.8789%" y="805" width="0.0311%" height="15" fill="rgb(208,124,10)" fg:x="3175" fg:w="1"/><text x="99.1289%" y="815.50"></text></g><g><title>shift_arg_pages (1 samples, 0.03%)</title><rect x="98.8789%" y="789" width="0.0311%" height="15" fill="rgb(222,33,0)" fg:x="3175" fg:w="1"/><text x="99.1289%" y="799.50"></text></g><g><title>__vma_adjust (1 samples, 0.03%)</title><rect x="98.8789%" y="773" width="0.0311%" height="15" fill="rgb(234,209,28)" fg:x="3175" fg:w="1"/><text x="99.1289%" y="783.50"></text></g><g><title>__tlb_remove_page_size (1 samples, 0.03%)</title><rect x="98.9100%" y="757" width="0.0311%" height="15" fill="rgb(224,11,23)" fg:x="3176" fg:w="1"/><text x="99.1600%" y="767.50"></text></g><g><title>__mod_lruvec_page_state (1 samples, 0.03%)</title><rect x="99.0346%" y="741" width="0.0311%" height="15" fill="rgb(232,99,1)" fg:x="3180" fg:w="1"/><text x="99.2846%" y="751.50"></text></g><g><title>__mod_lruvec_page_state (1 samples, 0.03%)</title><rect x="99.0969%" y="725" width="0.0311%" height="15" fill="rgb(237,95,45)" fg:x="3182" fg:w="1"/><text x="99.3469%" y="735.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.03%)</title><rect x="99.0969%" y="709" width="0.0311%" height="15" fill="rgb(208,109,11)" fg:x="3182" fg:w="1"/><text x="99.3469%" y="719.50"></text></g><g><title>__mod_memcg_lruvec_state (1 samples, 0.03%)</title><rect x="99.0969%" y="693" width="0.0311%" height="15" fill="rgb(216,190,48)" fg:x="3182" fg:w="1"/><text x="99.3469%" y="703.50"></text></g><g><title>page_remove_rmap (3 samples, 0.09%)</title><rect x="99.0657%" y="741" width="0.0934%" height="15" fill="rgb(251,171,36)" fg:x="3181" fg:w="3"/><text x="99.3157%" y="751.50"></text></g><g><title>unlock_page_memcg (1 samples, 0.03%)</title><rect x="99.1280%" y="725" width="0.0311%" height="15" fill="rgb(230,62,22)" fg:x="3183" fg:w="1"/><text x="99.3780%" y="735.50"></text></g><g><title>__mod_zone_page_state (1 samples, 0.03%)</title><rect x="99.3149%" y="693" width="0.0311%" height="15" fill="rgb(225,114,35)" fg:x="3189" fg:w="1"/><text x="99.5649%" y="703.50"></text></g><g><title>free_unref_page_list (12 samples, 0.37%)</title><rect x="99.3460%" y="693" width="0.3737%" height="15" fill="rgb(215,118,42)" fg:x="3190" fg:w="12"/><text x="99.5960%" y="703.50"></text></g><g><title>free_unref_page_commit.constprop.0 (9 samples, 0.28%)</title><rect x="99.4394%" y="677" width="0.2803%" height="15" fill="rgb(243,119,21)" fg:x="3193" fg:w="9"/><text x="99.6894%" y="687.50"></text></g><g><title>free_pcppages_bulk (7 samples, 0.22%)</title><rect x="99.5017%" y="661" width="0.2180%" height="15" fill="rgb(252,177,53)" fg:x="3195" fg:w="7"/><text x="99.7517%" y="671.50"></text></g><g><title>__free_one_page (4 samples, 0.12%)</title><rect x="99.5951%" y="645" width="0.1246%" height="15" fill="rgb(237,209,29)" fg:x="3198" fg:w="4"/><text x="99.8451%" y="655.50"></text></g><g><title>free_pages_and_swap_cache (19 samples, 0.59%)</title><rect x="99.1591%" y="725" width="0.5917%" height="15" fill="rgb(212,65,23)" fg:x="3184" fg:w="19"/><text x="99.4091%" y="735.50"></text></g><g><title>release_pages (19 samples, 0.59%)</title><rect x="99.1591%" y="709" width="0.5917%" height="15" fill="rgb(230,222,46)" fg:x="3184" fg:w="19"/><text x="99.4091%" y="719.50"></text></g><g><title>uncharge_page (1 samples, 0.03%)</title><rect x="99.7197%" y="693" width="0.0311%" height="15" fill="rgb(215,135,32)" fg:x="3202" fg:w="1"/><text x="99.9697%" y="703.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (30 samples, 0.93%)</title><rect x="98.8789%" y="949" width="0.9343%" height="15" fill="rgb(246,101,22)" fg:x="3175" fg:w="30"/><text x="99.1289%" y="959.50"></text></g><g><title>do_syscall_64 (30 samples, 0.93%)</title><rect x="98.8789%" y="933" width="0.9343%" height="15" fill="rgb(206,107,13)" fg:x="3175" fg:w="30"/><text x="99.1289%" y="943.50"></text></g><g><title>__x64_sys_exit_group (29 samples, 0.90%)</title><rect x="98.9100%" y="917" width="0.9031%" height="15" fill="rgb(250,100,44)" fg:x="3176" fg:w="29"/><text x="99.1600%" y="927.50"></text></g><g><title>do_group_exit (29 samples, 0.90%)</title><rect x="98.9100%" y="901" width="0.9031%" height="15" fill="rgb(231,147,38)" fg:x="3176" fg:w="29"/><text x="99.1600%" y="911.50"></text></g><g><title>do_exit (29 samples, 0.90%)</title><rect x="98.9100%" y="885" width="0.9031%" height="15" fill="rgb(229,8,40)" fg:x="3176" fg:w="29"/><text x="99.1600%" y="895.50"></text></g><g><title>exit_mm (29 samples, 0.90%)</title><rect x="98.9100%" y="869" width="0.9031%" height="15" fill="rgb(221,135,30)" fg:x="3176" fg:w="29"/><text x="99.1600%" y="879.50"></text></g><g><title>mmput (29 samples, 0.90%)</title><rect x="98.9100%" y="853" width="0.9031%" height="15" fill="rgb(249,193,18)" fg:x="3176" fg:w="29"/><text x="99.1600%" y="863.50"></text></g><g><title>exit_mmap (29 samples, 0.90%)</title><rect x="98.9100%" y="837" width="0.9031%" height="15" fill="rgb(209,133,39)" fg:x="3176" fg:w="29"/><text x="99.1600%" y="847.50"></text></g><g><title>unmap_vmas (29 samples, 0.90%)</title><rect x="98.9100%" y="821" width="0.9031%" height="15" fill="rgb(232,100,14)" fg:x="3176" fg:w="29"/><text x="99.1600%" y="831.50"></text></g><g><title>unmap_single_vma (29 samples, 0.90%)</title><rect x="98.9100%" y="805" width="0.9031%" height="15" fill="rgb(224,185,1)" fg:x="3176" fg:w="29"/><text x="99.1600%" y="815.50"></text></g><g><title>unmap_page_range (29 samples, 0.90%)</title><rect x="98.9100%" y="789" width="0.9031%" height="15" fill="rgb(223,139,8)" fg:x="3176" fg:w="29"/><text x="99.1600%" y="799.50"></text></g><g><title>zap_pmd_range.isra.0 (29 samples, 0.90%)</title><rect x="98.9100%" y="773" width="0.9031%" height="15" fill="rgb(232,213,38)" fg:x="3176" fg:w="29"/><text x="99.1600%" y="783.50"></text></g><g><title>zap_pte_range (28 samples, 0.87%)</title><rect x="98.9411%" y="757" width="0.8720%" height="15" fill="rgb(207,94,22)" fg:x="3177" fg:w="28"/><text x="99.1911%" y="767.50"></text></g><g><title>tlb_flush_mmu (21 samples, 0.65%)</title><rect x="99.1591%" y="741" width="0.6540%" height="15" fill="rgb(219,183,54)" fg:x="3184" fg:w="21"/><text x="99.4091%" y="751.50"></text></g><g><title>free_swap_cache (2 samples, 0.06%)</title><rect x="99.7509%" y="725" width="0.0623%" height="15" fill="rgb(216,185,54)" fg:x="3203" fg:w="2"/><text x="100.0009%" y="735.50"></text></g><g><title>all (3,211 samples, 100%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(254,217,39)" fg:x="0" fg:w="3211"/><text x="0.2500%" y="991.50"></text></g><g><title>test_mmmh (3,206 samples, 99.84%)</title><rect x="0.1557%" y="965" width="99.8443%" height="15" fill="rgb(240,178,23)" fg:x="5" fg:w="3206"/><text x="0.4057%" y="975.50">test_mmmh</text></g><g><title>ret_from_fork (6 samples, 0.19%)</title><rect x="99.8131%" y="949" width="0.1869%" height="15" fill="rgb(218,11,47)" fg:x="3205" fg:w="6"/><text x="100.0631%" y="959.50"></text></g><g><title>schedule_tail (6 samples, 0.19%)</title><rect x="99.8131%" y="933" width="0.1869%" height="15" fill="rgb(218,51,51)" fg:x="3205" fg:w="6"/><text x="100.0631%" y="943.50"></text></g><g><title>finish_task_switch.isra.0 (6 samples, 0.19%)</title><rect x="99.8131%" y="917" width="0.1869%" height="15" fill="rgb(238,126,27)" fg:x="3205" fg:w="6"/><text x="100.0631%" y="927.50"></text></g><g><title>__perf_event_task_sched_in (6 samples, 0.19%)</title><rect x="99.8131%" y="901" width="0.1869%" height="15" fill="rgb(249,202,22)" fg:x="3205" fg:w="6"/><text x="100.0631%" y="911.50"></text></g><g><title>x86_pmu_enable (6 samples, 0.19%)</title><rect x="99.8131%" y="885" width="0.1869%" height="15" fill="rgb(254,195,49)" fg:x="3205" fg:w="6"/><text x="100.0631%" y="895.50"></text></g><g><title>intel_pmu_enable_all (6 samples, 0.19%)</title><rect x="99.8131%" y="869" width="0.1869%" height="15" fill="rgb(208,123,14)" fg:x="3205" fg:w="6"/><text x="100.0631%" y="879.50"></text></g><g><title>native_write_msr (6 samples, 0.19%)</title><rect x="99.8131%" y="853" width="0.1869%" height="15" fill="rgb(224,200,8)" fg:x="3205" fg:w="6"/><text x="100.0631%" y="863.50"></text></g></svg></svg>